{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Architecture_DataFlow/","title":"Architecture &amp; Data Flow (GoMT4)","text":"<p>This section describes the overall structure of the GoMT4 project and how data flows between components.</p>"},{"location":"Architecture_DataFlow/#general-diagram","title":"General Diagram","text":"<pre><code>          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502        MT4 Terminal         \u2502\n          \u2502 (local, broker connection,  \u2502\n          \u2502  quotes, orders handling)   \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u25bc\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502        GoMT4 gRPC Server    \u2502\n          \u2502 (examples/main.go + pb API) \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502           \u2502\n                  \u25bc           \u25bc\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502 Client Apps    \u2502   \u2502 Streaming Handlers\u2502\n       \u2502 (Go, C#, etc.) \u2502   \u2502 (quotes, orders,  \u2502\n       \u2502                \u2502   \u2502 account updates)  \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nConfig.json \u2192 used by GoMT4 to log into account and select symbol.\npb module  \u2192 external Go module with generated structures and services.\n</code></pre>"},{"location":"Architecture_DataFlow/#components","title":"Components","text":"<ul> <li> <p>MT4 Terminal   Runs locally. Connects to broker, stores history, handles trading operations.</p> </li> <li> <p>GoMT4 gRPC Server   Proxy between MT4 and external apps. Implemented in <code>examples/main.go</code> and code that uses pb module.</p> </li> <li> <p>pb module   Contains generated structures and services from <code>.proto</code> files (<code>mrpc-proto</code> repository).</p> </li> <li> <p>examples/   Contains entrypoint and usage examples.</p> </li> <li> <p>docs/   Documentation for each feature.</p> </li> <li> <p>config.json   Stores login, password, server and default symbol.</p> </li> </ul>"},{"location":"Architecture_DataFlow/#data-flow","title":"Data Flow","text":"<ol> <li> <p>RPC call    A client (Go, C#, etc.) sends an RPC to the gRPC server (<code>127.0.0.1:50051</code>).</p> </li> <li> <p>GoMT4 server    Receives the request, translates it into MT4 calls, processes the response.</p> </li> <li> <p>MT4 Terminal     Executes the operation (e.g., get a quote or send an order) and returns the result.</p> </li> <li> <p>Return path    Result goes back to the client through GoMT4.</p> </li> <li> <p>Streaming calls    If the client subscribed (quotes, orders updates), GoMT4 keeps the connection open and pushes updates in real time.</p> </li> </ol>"},{"location":"Architecture_DataFlow/#highlights","title":"Highlights","text":"<ul> <li>Default gRPC port: <code>127.0.0.1:50051</code>.</li> <li>To extend the API, edit <code>.proto</code> files in <code>mrpc-proto</code> repo.</li> <li>Streaming methods allow real-time subscriptions.</li> <li>Supported domains: account, orders, history, quotes.</li> </ul>"},{"location":"Architecture_DataFlow/#developer-notes","title":"Developer Notes","text":"<ul> <li>Main entry logic: <code>examples/main.go</code>.</li> <li>Account config: <code>examples/config/config.json</code>.</li> <li>New functions: edit <code>.proto</code> and rebuild pb module.</li> <li>Debugging: use VS Code with <code>launch.json</code>.</li> </ul>"},{"location":"Beginner_Run_Guide/","title":"\ud83d\udea6 Beginner Run Guide for GoMT4","text":"<p>This guide is based on your <code>examples/main.go</code>. Code is already wired; just enter your credentials in <code>config/config.json</code> and uncomment what you want to run.</p>"},{"location":"Beginner_Run_Guide/#how-to-run","title":"\u26a1 How to Run","text":"<pre><code>cd examples\ngo run .\n</code></pre> <p>The entry point is <code>examples/main.go</code>.</p>"},{"location":"Beginner_Run_Guide/#safe-first-steps-readonly","title":"\ud83e\uddea Safe First Steps (read\u2011only)","text":"<p>Uncomment one or more \u2014 these do not change account state:</p> <pre><code>// Account snapshot\nsvc.ShowAccountSummary(ctx)\n\n// Discover all instruments\nsvc.ShowAllSymbols(ctx)\n\n// One\u2011shot quote for your default symbol\nsvc.ShowQuote(ctx, cfg.DefaultSymbol)\n\n// Live quotes for predefined symbols (stops by timeout in example)\nsvc.StreamQuotes(ctx)\n</code></pre>"},{"location":"Beginner_Run_Guide/#getting-data-account-market","title":"\ud83d\udcca Getting Data (account &amp; market)","text":"<p>Handy readers to inspect the environment:</p> <pre><code>// Recent closed orders (default window inside helper)\nsvc.ShowOrdersHistory(ctx)\n\n// All active orders (incl. pending)\nsvc.ShowOpenedOrders(ctx)\n\n// Full instrument profile\nsvc.ShowSymbolParams(ctx, cfg.DefaultSymbol)\n\n// Monetary metrics for sizing\nsvc.ShowTickValues(ctx, []string{\"EURUSD\", \"GBPUSD\", \"USDJPY\"})\n\n// Multi\u2011symbol snapshot quotes\nsvc.ShowQuotesMany(ctx, []string{\"EURUSD\", \"GBPUSD\", \"USDJPY\"})\n\n// Historical OHLC for charting\nsvc.ShowQuoteHistory(ctx, cfg.DefaultSymbol)\n</code></pre>"},{"location":"Beginner_Run_Guide/#trading-operations-danger-zone","title":"\u26a0\ufe0f Trading Operations (danger zone)","text":"<p>These modify state (even on demo). Use real tickets from output of previous steps.</p> <pre><code>// Place an order (order type configured inside helper)\nsvc.ShowOrderSendExample(ctx, cfg.DefaultSymbol)\n\n// Modify SL/TP \u2014 requires a valid ticket\nsvc.ShowOrderModifyExample(ctx, 12345678)\n\n// Close order by ticket\nsvc.ShowOrderCloseExample(ctx, 12345678)\n\n// Close by opposite order (two tickets)\nsvc.ShowOrderCloseByExample(ctx, 12345678, 12345679)\n\n// Delete a pending order by ticket\nsvc.ShowOrderDeleteExample(ctx, 111222)\n</code></pre> <p>Replace placeholders with actual tickets printed by <code>ShowOpenedOrders</code> or <code>ShowOpenedOrderTickets</code>.</p>"},{"location":"Beginner_Run_Guide/#streaming","title":"\ud83d\udce1 Streaming","text":"<p>Real\u2011time subscriptions with graceful cancellation inside examples:</p> <pre><code>// Live price updates (ticks)\nsvc.StreamQuotes(ctx)\n\n// Floating P/L per opened order (interval inside helper)\nsvc.StreamOpenedOrderProfits(ctx)\n\n// Ticket IDs of open orders only\nsvc.StreamOpenedOrderTickets(ctx)\n\n// Trade activity events\nsvc.StreamTradeUpdates(ctx)\n</code></pre>"},{"location":"Beginner_Run_Guide/#combo-scenarios","title":"\ud83c\udfac Combo Scenarios","text":""},{"location":"Beginner_Run_Guide/#a-readonly-dashboard-safe","title":"A) Read\u2011only dashboard (safe)","text":"<pre><code>svc.ShowAccountSummary(ctx)\nsvc.ShowQuote(ctx, cfg.DefaultSymbol)\nsvc.ShowOpenedOrders(ctx)\nsvc.StreamQuotes(ctx)\nsvc.StreamOpenedOrderProfits(ctx)\n</code></pre>"},{"location":"Beginner_Run_Guide/#b-adjust-risk-then-close","title":"B) Adjust risk \u2192 then close","text":"<pre><code>// 1) Inspect active orders and pick a ticket\nsvc.ShowOpenedOrders(ctx)\n\n// 2) Update SL/TP for that ticket\nsvc.ShowOrderModifyExample(ctx, /*ticket=*/ 12345678)\n\n// 3) Close when ready\nsvc.ShowOrderCloseExample(ctx, /*ticket=*/ 12345678)\n</code></pre>"},{"location":"Beginner_Run_Guide/#c-tickets-stream-lazy-details","title":"C) Tickets stream + lazy details","text":"<pre><code>// Low\u2011overhead ticket stream\nsvc.StreamOpenedOrderTickets(ctx)\n\n// Fetch full details on change\nsvc.ShowOpenedOrders(ctx)\n</code></pre>"},{"location":"Beginner_Run_Guide/#d-history-snapshot-safe","title":"D) History snapshot (safe)","text":"<pre><code>svc.ShowOrdersHistory(ctx)\n</code></pre>"},{"location":"Beginner_Run_Guide/#tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Begin with safe readers before trading helpers.</li> <li>Never hardcode tickets; copy from console output.</li> <li>Protect <code>config/config.json</code> \u2014 it contains credentials.</li> <li>Prefer demo until you are confident.</li> <li>For price formatting, use <code>Digits</code> from <code>ShowSymbolParams</code>; keep raw values for math.</li> </ul>"},{"location":"Glossary/","title":"\ud83d\udcd6 Glossary (MT4 Terms)","text":"<p>A quick reference for common MT4/GoMT4 terms used throughout the docs and code.</p>"},{"location":"Glossary/#quick-cheat-sheet","title":"\ud83d\udcdd Quick Cheat Sheet","text":"Term Example Meaning Symbol <code>EURUSD</code> Instrument identifier Lot <code>1.0</code> \u2192 100,000 Standard trading volume SL <code>1.09500</code> Stop Loss (protect from loss) TP <code>1.10500</code> Take Profit (close with gain) Ticket <code>12345678</code> Unique order ID Digits <code>5</code> Quote precision (1.23456) Margin <code>100.00</code> Locked funds for position Equity <code>1000.00</code> Balance \u00b1 open positions PnL Stream <code>StreamQuotes()</code> Continuous updates (ticks, orders, profits)"},{"location":"Glossary/#order-lifecycle-diagram","title":"\ud83d\udcca Order Lifecycle Diagram","text":"<pre><code>   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 New Order \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502 (executed at market / placed pending)\n         \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Open    \u2502\n   \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n       \u2502   \u2502\n       \u2502   \u2502 SL hit (loss)\n       \u2502   \u25bc\n       \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502 \u2502Closed \u2502\n       \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502 TP hit (profit)\n       \u2502\n       \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Delete/   \u2502\n   \u2502 Cancelled \u2502 (for pending orders)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>This diagram shows a typical order lifecycle: creation \u2192 open \u2192 closure (SL/TP or manual) or cancellation (if pending).</p>"},{"location":"Glossary/#account","title":"\ud83e\uddd1\u200d\ud83d\udcbb Account","text":"<ul> <li>Login \u2192 Numeric ID of your trading account.</li> <li>Password \u2192 Investor or trader password. Grants access to terminal.</li> <li>Server \u2192 Broker server name (e.g., <code>RoboForex-Demo</code>).</li> <li>Balance \u2192 Money currently on the account.</li> <li>Equity \u2192 Balance + open positions PnL.</li> <li>Margin \u2192 Funds locked for open positions.</li> <li>Free Margin \u2192 Equity \u2212 Margin.</li> <li>Leverage \u2192 Ratio (e.g., 1:500) showing how much borrowed funds you can use.</li> </ul>"},{"location":"Glossary/#market-info","title":"\ud83d\udcc8 Market Info","text":"<ul> <li>Symbol \u2192 Instrument identifier (e.g., <code>EURUSD</code>).</li> <li>Quote \u2192 Current bid/ask prices for a symbol.</li> <li>Digits \u2192 Decimal precision of the quote (e.g., 5 digits \u2192 1.23456).</li> <li>Point \u2192 Smallest price step for the symbol (e.g., 0.00001 for EURUSD).</li> <li>Lot \u2192 Standard trade size (usually 100,000 units base currency).</li> <li>Lot Step \u2192 Minimum increment allowed when specifying volume.</li> <li>Contract Size \u2192 Amount of base currency per lot.</li> <li>Stops Level \u2192 Minimum distance (in points) required for SL/TP from current price.</li> </ul>"},{"location":"Glossary/#orders","title":"\ud83d\udce6 Orders","text":"<ul> <li>Order \u2192 Instruction to buy or sell a symbol.</li> <li>Market Order \u2192 Executed immediately at current market price.</li> <li>Pending Order \u2192 Placed to execute in the future at a specific price (Limit or Stop).</li> <li>Ticket \u2192 Unique ID of an order (int64).</li> <li>SL (Stop Loss) \u2192 Protective level to cap loss.</li> <li>TP (Take Profit) \u2192 Target level to close with profit.</li> <li>Magic Number \u2192 User-defined integer to tag EAs/orders.</li> <li>Comment \u2192 Free text attached to an order.</li> </ul>"},{"location":"Glossary/#order-types-mt4","title":"\ud83d\udd04 Order Types (MT4)","text":"<ul> <li><code>OP_BUY</code> \u2192 Buy at market.</li> <li><code>OP_SELL</code> \u2192 Sell at market.</li> <li><code>OP_BUYLIMIT</code> \u2192 Pending: buy if price drops to X.</li> <li><code>OP_SELLLIMIT</code> \u2192 Pending: sell if price rises to X.</li> <li><code>OP_BUYSTOP</code> \u2192 Pending: buy if price rises to X.</li> <li><code>OP_SELLSTOP</code> \u2192 Pending: sell if price drops to X.</li> </ul>"},{"location":"Glossary/#connection-rpc","title":"\ud83d\udd0c Connection &amp; RPC","text":"<ul> <li>gRPC \u2192 Protocol used by GoMT4 to expose MT4 functions.</li> <li>Port 50051 \u2192 Default local address where server listens (<code>127.0.0.1:50051</code>).</li> <li>Stream \u2192 Long\u2011lived connection pushing updates (quotes, orders, history).</li> <li>Unary RPC \u2192 One\u2011shot request/response (e.g., GetQuote).</li> </ul>"},{"location":"Glossary/#history-streaming","title":"\ud83d\udcca History &amp; Streaming","text":"<ul> <li>Quote History \u2192 Past bid/ask points (OHLC bars or ticks).</li> <li>Order History \u2192 List of closed trades for a period.</li> <li>StreamQuotes \u2192 Continuous tick updates.</li> <li>StreamTradeUpdates \u2192 Real-time feed of order lifecycle events.</li> </ul>"},{"location":"Glossary/#errors-codes","title":"\ud83d\udee1\ufe0f Errors &amp; Codes","text":"<ul> <li>MrpcError \u2192 Generic RPC error (code + message).</li> <li>OrderError \u2192 Error tied to a specific order (invalid volume, price, etc.).</li> <li>Slippage \u2192 Max price deviation allowed when executing orders.</li> <li>Requote \u2192 Server rejects trade at requested price, offers new one.</li> </ul>"},{"location":"Glossary/#cheat-sheet-summary","title":"\u2705 Cheat Sheet (summary)","text":"<ul> <li>Account \u2192 who you are.</li> <li>Market Info \u2192 what you trade.</li> <li>Orders \u2192 how you trade.</li> <li>Connection \u2192 how GoMT4 talks to MT4.</li> <li>History/Streaming \u2192 how you monitor trades and quotes.</li> <li>Errors \u2192 what can go wrong.</li> </ul>"},{"location":"GoMT4_Documentation_Skeleton/","title":"GoMT4 Documentation \u2013 Skeleton","text":"<p>Version: v0 (starter scaffold). Goal: fill step-by-step with clear, beginner-friendly explanations and runnable snippets.</p>"},{"location":"GoMT4_Documentation_Skeleton/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ul> <li>Introduction</li> <li>Setup &amp; Environment </li> <li>Beginner Run Guide</li> <li>Your Easy Start</li> <li>Architecture &amp; Data Flow</li> <li>Reliability: Timeouts, Reconnects, Backoff</li> <li>Troubleshooting &amp; FAQ</li> <li>Cookbook (Recipes)</li> </ul> <p>Account   - Show Account Summary   - Stream Opened Order Profits</p> <p>Market Info   - Get Quote   - Get Multiple Quotes   - Stream Quotes   - Symbol Params</p> <p>Orders   - Place Market Order   - Place Pending Order   - Modify Order   - Close Order   - Close By Orders   - Delete Pending   - History Orders</p> <p>Reliability &amp; Connection   - Handle Reconnect   - Unary Retries   - Health Check</p> <p>Utils &amp; Helpers   - Round Volume/Price   - Ensure Symbol Visible   - Config Example</p> <ul> <li>CLI Usage (Playground)</li> <li>API Reference (Types &amp; Enums)</li> <li>Enums</li> <li>Messages</li> <li>Streaming</li> <li>Performance Notes</li> <li>Security &amp; Secrets</li> <li>Observability (Logs &amp; Metrics)</li> <li>Glossary (MT4 Terms)</li> </ul>"},{"location":"GoMT4_Documentation_Skeleton/#introduction","title":"Introduction","text":"<p>What is GoMT4? Small, pragmatic bridge between MT4 Terminal and your Go code via gRPC.</p> <p>Who is it for? Beginners, algo developers, ops teams who need a scriptable MT4 integration.</p> <p>After reading you can: - Run a local demo. - Connect to MT4. - Subscribe to quotes. - Place &amp; close an order safely.</p> <p>Quick links: \ud83d\udc49 Your Easy Start \u00b7 \ud83d\udc49 Beginner Run Guide \u00b7 \ud83d\udc49 CLI Usage</p>"},{"location":"GoMT4_Documentation_Skeleton/#setup-environment","title":"Setup &amp; Environment","text":"<p>Goal: Run everything on Windows with MT4 installed.</p>"},{"location":"GoMT4_Documentation_Skeleton/#prerequisites","title":"Prerequisites","text":"<ul> <li>Windows 10/11, MT4 Terminal.</li> <li>Go \u2265 1.21.</li> <li>(Optional) VS Code + Go extension.</li> </ul>"},{"location":"GoMT4_Documentation_Skeleton/#install-draft","title":"Install (draft)","text":"<ol> <li>Clone the repo, run <code>go mod tidy</code> in <code>examples/</code>.</li> <li>Configure credentials (see Config Example).</li> <li>Open in VS Code and launch the debug profile.</li> </ol>"},{"location":"GoMT4_Documentation_Skeleton/#architecture-data-flow","title":"Architecture &amp; Data Flow","text":"<p>Make the system non-magical: - MT4 Terminal \u21c4 GoMT4 gRPC server \u21c4 client code. - Lifecycles: connect \u2192 use \u2192 disconnect. - Streams: Quotes, Orders; buffering &amp; backpressure. - Where retries/backoff kick in.</p> <p>See details: Architecture &amp; Data Flow</p>"},{"location":"GoMT4_Documentation_Skeleton/#reliability-timeouts-reconnects-backoff","title":"Reliability: Timeouts, Reconnects, Backoff","text":"<ul> <li><code>context.WithTimeout</code> for unary calls (2\u20135s baseline).</li> <li>Treat <code>io.EOF</code> as transient on streams; reconnect with jitter.</li> <li>Ensure cancelation closes goroutines.</li> <li>Don\u2019t leak streams; add health checks.</li> </ul> <p>See recipes: - Handle Reconnect - Unary Retries - Health Check</p>"},{"location":"GoMT4_Documentation_Skeleton/#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"<ul> <li>\u201cSymbol not found EURUSD\u201d \u2192 Try broker suffix <code>EURUSD.m</code>.</li> <li>\u201cInvalid volume\u201d \u2192 Respect <code>LotStep</code>/<code>LotMin</code> and round.</li> <li>\u201cDigits mismatch\u201d \u2192 Format prices using <code>Digits</code>.</li> <li>\u201cNo connection\u201d \u2192 Firewall/UAC, terminal path, server reachability.</li> </ul> <p>Full page: Troubleshooting &amp; FAQ</p>"},{"location":"GoMT4_Documentation_Skeleton/#cookbook-recipes","title":"Cookbook (Recipes)","text":"<p>Jump into ready-made snippets:</p> <ul> <li>Watchlist &amp; Quotes \u2192 Get Quote, Multiple Quotes, Stream </li> <li>Place Order Safely \u2192 Place Market / Pending / Modify / Close </li> <li>Compute PnL Correctly \u2192 Symbol Params </li> <li>Stream History to DB \u2192 History Orders</li> </ul> <p>Full list: Cookbook index</p>"},{"location":"GoMT4_Documentation_Skeleton/#cli-usage-playground","title":"CLI Usage (Playground)","text":"<ul> <li>Subscribe to quotes.</li> <li>Dump symbol params.</li> <li>Close orders by filter.</li> </ul> <p>See: CLI Usage</p>"},{"location":"GoMT4_Documentation_Skeleton/#api-reference-types-enums","title":"API Reference (Types &amp; Enums)","text":"<p>Autogenerated types index with human-readable notes, units, ranges, and gotchas.</p> <ul> <li>Overview</li> <li>Enums</li> <li>Messages</li> <li>Streaming</li> </ul>"},{"location":"GoMT4_Documentation_Skeleton/#performance-notes","title":"Performance Notes","text":"<ul> <li>Batch calls when possible; avoid per-tick RPCs.</li> <li>Track expected latencies; simple load test plan.</li> </ul> <p>Performance Notes</p>"},{"location":"GoMT4_Documentation_Skeleton/#security-secrets","title":"Security &amp; Secrets","text":"<ul> <li><code>.env</code> handling (do not commit secrets).</li> <li>Windows credentials vault tips.</li> </ul> <p>Security &amp; Secrets</p>"},{"location":"GoMT4_Documentation_Skeleton/#observability-logs-metrics","title":"Observability (Logs &amp; Metrics)","text":"<ul> <li>Log format and levels.</li> <li>Basic metrics: latency, reconnects, dropped ticks.</li> </ul> <p>Observability</p>"},{"location":"GoMT4_Documentation_Skeleton/#glossary-mt4-terms","title":"Glossary (MT4 Terms)","text":"<ul> <li>Digits, Point, TickSize, TickValue, Lot, ContractSize.</li> <li>Hedging vs Netting (MT5 nuances for reference).</li> </ul> <p>Glossary</p>"},{"location":"Introduction/","title":"Getting Started with MetaTrader 4 in Go","text":"<p>Welcome to the MetaRPC MT4 Go Documentation \u2014 your guide to integrating with MetaTrader 4 using Go and gRPC.</p> <p>This documentation will help you:</p> <ul> <li>\ud83d\udcd8 Explore all available account, market, and trading methods</li> <li>\ud83d\udca1 Learn from Go usage examples with context and timeout handling</li> <li>\ud83d\udd01 Work with real-time streaming for quotes, orders, and trades</li> <li>\u2699\ufe0f Understand all input/output types such as <code>OrderInfo</code>, <code>QuoteData</code>, and enums like <code>ENUM_ORDER_TYPE_TF</code></li> </ul>"},{"location":"Introduction/#main-sections","title":"\ud83d\udcda Main Sections","text":""},{"location":"Introduction/#account","title":"Account","text":"<ul> <li>Show Account Summary</li> </ul>"},{"location":"Introduction/#market-info","title":"Market Info","text":"<ul> <li>Section overview: Market_Info_Overview</li> <li>Show Quote</li> <li>Show Quotes Many</li> <li>Show Quote History</li> <li>Show Symbol Params</li> <li>Show Symbols</li> <li>Show All Symbols</li> <li>Show Tick Values</li> </ul>"},{"location":"Introduction/#order-operations","title":"Order Operations \u26a0\ufe0f","text":"<ul> <li>Section overview: Order_Operations_Overview</li> <li>Show Opened Orders</li> <li>Show Opened Order Tickets</li> <li>Show Orders History</li> <li>Show Order Close Example</li> <li>Show Order Close By Example</li> <li>Show Order Delete Example</li> <li>Show Order Modify Example</li> </ul>"},{"location":"Introduction/#streaming","title":"Streaming","text":"<ul> <li>Section overview: Streaming_Overview</li> <li>Stream Opened Order Profits</li> <li>Stream Opened Order Tickets</li> <li>Stream Quotes</li> <li>Stream Trade Updates</li> <li>Stream Orders History (Example)</li> <li>Stream Quote History (Example)</li> </ul>"},{"location":"Introduction/#navigation","title":"\ud83e\udded Navigation","text":"<ul> <li>Sections above link directly to the markdown files in your repo.</li> <li>Methods are organized to mirror the MT4 API structure.</li> <li>Each Overview file contains explanations, best practices, and usage guidance.</li> </ul>"},{"location":"Observability/","title":"\ud83d\udcc8 Observability (Logs &amp; Metrics) \u2014 optional enhancement","text":"<p>\u26a0\ufe0f Note: this section is not yet in the codebase, but is recommended for developers who want better visibility.</p> <p>You can add lightweight observability to GoMT4:</p> <ul> <li>\ud83c\udf10 obs.go helper \u2014 wrapper around <code>log.Printf</code> so logs have consistent format (INFO/WARN/ERROR + timestamp).</li> <li>\u23f1 Latency timers \u2014 measure RPC duration (e.g., ShowQuote, ShowOrderSend).</li> <li>\ud83d\udcca Counters \u2014 simple <code>atomic</code> metrics for errors, ticks, RPC calls (print every 10s).</li> <li>\ud83e\udde9 Prometheus exporter \u2014 optional, if you want Grafana dashboards.</li> </ul> <p>Make GoMT4 debuggable in minutes, not hours. Below are pragmatic logging patterns and lightweight metrics that fit your current codebase (<code>examples/mt4/*.go</code>, <code>main.go</code>) and Windows setup.</p>"},{"location":"Observability/#goals","title":"\ud83c\udfaf Goals","text":"<ul> <li>See: what RPCs happen, how often, with what latency.</li> <li>Spot: reconnect loops, stream stalls, broker rejections.</li> <li>Prove: system is healthy via simple counters/ratios.</li> </ul>"},{"location":"Observability/#logging-levels-simple-effective","title":"\ud83e\udded Logging levels (simple &amp; effective)","text":"<p>Use three coarse levels via the standard <code>log</code> pkg (no heavy deps):</p> <ul> <li><code>INFO</code> \u2014 high\u2011level events (connect, subscribe, order actions).</li> <li><code>WARN</code> \u2014 transient issues (retry, backoff, deadline exceeded).</li> <li><code>ERROR</code> \u2014 final failures (stream aborted, order rejected).</li> </ul> <p>Helper:</p> <pre><code>package obs\nimport (\n  \"fmt\"; \"log\"; \"time\"\n)\nfunc ts() string { return time.Now().Format(time.RFC3339) }\nfunc Info(msg string, a ...any)  { log.Printf(\"INFO  %s | \"+msg, append([]any{ts()}, a...)...) }\nfunc Warn(msg string, a ...any)  { log.Printf(\"WARN  %s | \"+msg, append([]any{ts()}, a...)...) }\nfunc Error(msg string, a ...any) { log.Printf(\"ERROR %s | \"+msg, append([]any{ts()}, a...)...) }\n</code></pre> <p>Place in <code>examples/mt4/obs/obs.go</code> (or inline now). Replace current <code>fmt.Println(...)</code> in hot paths.</p> <p>Redaction (from Security &amp; Secrets): never print passwords; mask tokens.</p>"},{"location":"Observability/#streams-what-to-log","title":"\ud83d\udd0c Streams \u2014 what to log","text":"<p>Target minimal but useful lines.</p> <p><code>StreamQuotes</code> (<code>examples/mt4/MT4_service.go</code>):</p> <pre><code>obs.Info(\"stream.quotes.start symbols=%v\", symbols)\n// on first N ticks only (sampling)\nif ticks%100 == 0 { obs.Info(\"stream.quotes.rate ticks=%d\", ticks) }\n// on error\nobs.Error(\"stream.quotes.error err=%v\", err)\n// on normal end\nobs.Info(\"stream.quotes.end ticks=%d\", ticks)\n</code></pre> <p><code>StreamOpenedOrderProfits</code>:</p> <pre><code>obs.Info(\"stream.pnl.start buf=%d\", 1000)\nif n%50 == 0 { obs.Info(\"stream.pnl.rate updates=%d\", n) }\nif err != nil { obs.Error(\"stream.pnl.error err=%v\", err) }\n</code></pre> <p>Reconnect/backoff (Cookbook \u2192 <code>HandleReconnect.md</code>):</p> <pre><code>obs.Warn(\"reconnect reason=%v delay=%s attempt=%d\", reason, delay, attempt)\n</code></pre>"},{"location":"Observability/#unary-rpcs-latency-outcomes","title":"\u23f1\ufe0f Unary RPCs \u2014 latency &amp; outcomes","text":"<p>Wrap calls with a tiny stopwatch.</p> <pre><code>t0 := time.Now()\nq, err := s.ShowQuote(ctx, symbol)\ndur := time.Since(t0)\nif err != nil {\n  obs.Error(\"rpc.show_quote symbol=%s dur=%s err=%v\", symbol, dur, err)\n} else {\n  obs.Info(\"rpc.show_quote symbol=%s dur=%s digits=%d\", symbol, dur, q.Digits)\n}\n</code></pre> <p>Apply to: <code>ShowQuotesMany</code>, <code>ShowSymbolParams</code>, <code>ShowTickValues</code>, history getters, and order actions (<code>ShowOrderSend/Modify/Close*</code>).</p>"},{"location":"Observability/#minimal-metrics-standard-lib","title":"\ud83e\uddee Minimal metrics (standard lib)","text":"<p>No Prometheus? Start with process\u2011local counters and periodic prints.</p> <pre><code>var (\n  ticks uint64; pnlUpdates uint64; rpcOK uint64; rpcErr uint64\n)\nfunc incr(p *uint64) { atomic.AddUint64(p, 1) }\n\n// In streams\nincr(&amp;ticks)\n// In rpc success/fail\nincr(&amp;rpcOK); incr(&amp;rpcErr)\n\n// Reporter goroutine\nfunc StartMetricsLogger() {\n  go func(){\n    t := time.NewTicker(10 * time.Second)\n    for range t.C {\n      ok := atomic.LoadUint64(&amp;rpcOK)\n      er := atomic.LoadUint64(&amp;rpcErr)\n      tk := atomic.LoadUint64(&amp;ticks)\n      obs.Info(\"metrics rpc_ok=%d rpc_err=%d ticks=%d\", ok, er, tk)\n    }\n  }()\n}\n</code></pre> <p>Call <code>StartMetricsLogger()</code> once in <code>main.go</code>.</p> <p>Why it helps: you instantly see rates and error spikes without extra tooling.</p>"},{"location":"Observability/#optional-prometheus-exporter","title":"\ud83d\udcca (Optional) Prometheus exporter","text":"<p>If you later add infra, expose counters via <code>promhttp</code>.</p> <pre><code>var (\n  mRpcOK  = prometheus.NewCounter(prometheus.CounterOpts{Name: \"gomt4_rpc_ok\"})\n  mRpcErr = prometheus.NewCounter(prometheus.CounterOpts{Name: \"gomt4_rpc_err\"})\n  mTicks  = prometheus.NewCounter(prometheus.CounterOpts{Name: \"gomt4_ticks_total\"})\n)\nfunc init(){ prometheus.MustRegister(mRpcOK, mRpcErr, mTicks) }\n// http.ListenAndServe(\":2112\", promhttp.Handler())\n</code></pre> <p>Keep sampling in logs even with Prometheus for quick local debugging.</p>"},{"location":"Observability/#sampling-log-volume","title":"\ud83e\uddf5 Sampling &amp; log volume","text":"<ul> <li>Sample hot events (e.g., every 50th tick; or log once per symbol per second).</li> <li>Group repetitive warnings (e.g., backoff bursts) with attempt counters.</li> <li>Bound log file size if redirecting to disk (PowerShell: <code>Start-Transcript</code> or use a rotating writer).</li> </ul>"},{"location":"Observability/#code-map-repo-anchors","title":"\ud83d\udccd Code map (repo anchors)","text":"<ul> <li> <p><code>examples/mt4/MT4_service.go</code> \u2192 replace <code>fmt.Println</code> in:</p> </li> <li> <p><code>StreamQuotes</code>, <code>StreamOpenedOrderProfits</code>, <code>StreamOpenedOrderTickets</code>, <code>StreamTradeUpdates</code></p> </li> <li><code>ShowQuote</code>, <code>ShowQuotesMany</code>, <code>ShowQuoteHistory</code></li> <li><code>ShowOrderSendExample</code>, <code>ShowOrderModifyExample</code>, <code>ShowOrderCloseExample</code></li> <li><code>examples/main.go</code> \u2192 start metrics reporter early and print final summary on exit.</li> </ul>"},{"location":"Observability/#checklist","title":"\u2705 Checklist","text":"<ul> <li>[ ] Log start/end of each stream; sample mid\u2011flow ticks.</li> <li>[ ] Log RPC latency and result (ok/err) with symbol/ticket context.</li> <li>[ ] Keep secrets redacted.</li> <li>[ ] Add 10\u2011second metrics reporter (counters) in <code>main.go</code>.</li> <li>[ ] Backoff logs include reason + delay + attempt.</li> </ul>"},{"location":"Observability/#see-also","title":"See also","text":"<ul> <li>Performance Notes \u2014 hot paths &amp; batching</li> <li>Security &amp; Secrets \u2014 redaction helper</li> <li>Cookbook / Reliability \u2014 <code>HandleReconnect</code>, <code>UnaryRetries</code></li> </ul>"},{"location":"Performance_Notes/","title":"\ud83d\ude80 Performance Notes (GoMT4)","text":"<p>Practical tips to keep GoMT4 fast, stable, and resource\u2011efficient. Focus is on your current codebase (examples/, pb API, MT4 terminal on Windows).</p>"},{"location":"Performance_Notes/#goals","title":"\ud83c\udfaf Goals","text":"<ul> <li>Low latency for quotes/updates.</li> <li>Throughput for bulk reads (history, many symbols).</li> <li>Stability under loss/reconnects.</li> <li>Predictable CPU/RAM usage.</li> </ul>"},{"location":"Performance_Notes/#hot-paths-to-watch","title":"\ud83d\udd25 Hot paths to watch","text":"<ul> <li>Streaming: <code>StreamQuotes</code>, <code>StreamOpenedOrderProfits</code>, <code>StreamTradeUpdates</code>.</li> <li>Batch RPCs: <code>ShowQuotesMany</code>, paged/streamed Orders History (<code>ShowOrdersHistory</code>, <code>StreamOrdersHistoryExample</code>).</li> <li>Symbol metadata: <code>ShowSymbolParams</code>, <code>ShowTickValues</code> used in loops.</li> </ul> <p>Keep these tight: avoid heavy logging, allocations, and repeated RPCs.</p>"},{"location":"Performance_Notes/#batch-dont-loop-rpcs","title":"\ud83d\udce6 Batch, don\u2019t loop RPCs","text":"<ul> <li> <p>Prefer batch APIs over per\u2011symbol calls:</p> </li> <li> <p>\u2705 <code>ShowQuotesMany</code> instead of <code>ShowQuote</code> in a loop.</p> </li> <li> <p>History: use paged/streaming endpoints rather than huge single responses.</p> </li> <li> <p>\u2705 <code>OrdersHistory</code> or <code>StreamOrdersHistoryExample</code>.</p> </li> </ul> <p>Why: fewer round\u2011trips \u2192 lower latency and CPU per message.</p>"},{"location":"Performance_Notes/#streaming-tuning","title":"\ud83d\udce1 Streaming tuning","text":"<ul> <li> <p>Backpressure: use the server\u2019s knobs when available.</p> </li> <li> <p>Example: <code>OpenedOrdersProfitStreamRequest{ buffer_size }</code> \u2014 set buffer high enough to absorb short spikes, but not so high that consumer lags unnoticed.</p> </li> <li>Consumer loop: drain fast, do work in a goroutine pool if processing is heavy.</li> <li>Tick throttling: if you don\u2019t need every tick, aggregate with a <code>time.Ticker</code> (e.g., 100\u2013200ms) before updating UI/logs.</li> <li>Timeouts: long\u2011lived streams should use <code>WithCancel</code>, not short timeouts; add an idle watchdog to reconnect when no data for X seconds.</li> </ul> <pre><code>ctx, cancel := context.WithCancel(parent)\ndefer cancel()\nupdates, errCh := svc.StreamQuotes(ctx, symbols)\nfor {\n    select {\n    case u := &lt;-updates: /* cheap handling */\n    case err := &lt;-errCh: /* reconnect + backoff */\n    case &lt;-idle.C:      /* no data \u2192 ping/refresh */\n    }\n}\n</code></pre>"},{"location":"Performance_Notes/#concurrency-patterns-go","title":"\ud83e\uddf5 Concurrency patterns (Go)","text":"<ul> <li>One gRPC connection per MT4 instance; reuse <code>*grpc.ClientConn</code> (creating many is expensive).</li> <li>Worker pool for CPU\u2011bound post\u2011processing (e.g., statistics on history), not for issuing parallel trade RPCs to the same MT4 terminal.</li> <li>Channel fan\u2011out: if several consumers need the same stream, broadcast from one reader goroutine; don\u2019t open multiple identical streams.</li> </ul>"},{"location":"Performance_Notes/#symbol-metadata-cache","title":"\ud83e\uddf0 Symbol metadata cache","text":"<ul> <li>Cache <code>ShowSymbolParams</code> and <code>ShowTickValues</code> in memory (map by symbol). These values change rarely; re\u2011fetch only on symbol list changes or once per session.</li> <li>Use cached <code>digits/point/lot_step</code> for rounding before any trade call (see Cookbook \u2192 <code>RoundVolumePrice.md</code>).</li> </ul>"},{"location":"Performance_Notes/#history-io","title":"\ud83e\uddee History I/O","text":"<ul> <li>Request time windows in chunks (days/weeks) and merge client\u2011side.</li> <li>Prefer H1/H4/D1 where possible; M1 over long ranges is expensive.</li> <li>For analytics, stream and process as you go instead of storing everything first.</li> </ul>"},{"location":"Performance_Notes/#compression-payloads","title":"\ud83d\udddc\ufe0f Compression &amp; payloads","text":"<ul> <li>gRPC compression helps on large history responses; avoid compressing ultra\u2011short ticks.</li> <li>Avoid logging full payloads in hot paths; log only counts and latency metrics.</li> </ul>"},{"location":"Performance_Notes/#allocations-gc","title":"\ud83e\udde0 Allocations &amp; GC","text":"<ul> <li>Reuse buffers/slices for quote aggregation; pre\u2011allocate with <code>make(..., cap)</code> when size is known.</li> <li>Convert <code>time</code> \u2194 <code>Timestamp</code> carefully in tight loops; avoid repeated parsing/formatting.</li> <li>Use <code>strings.Builder</code> for building CSV/TSV outputs.</li> </ul>"},{"location":"Performance_Notes/#timeouts-retries","title":"\u23f1\ufe0f Timeouts &amp; retries","text":"<ul> <li>Unary calls: <code>context.WithTimeout</code> (100ms\u20133s typical for local terminal). Add idempotency where safe and exponential backoff.</li> <li>Streams: no short deadline; reconnect on error/idle with jittered backoff (see Cookbook \u2192 <code>HandleReconnect.md</code>, <code>UnaryRetries.md</code>).</li> </ul>"},{"location":"Performance_Notes/#windows-mt4-specifics","title":"\ud83d\udda5\ufe0f Windows &amp; MT4 specifics","text":"<ul> <li>Keep MT4 responsive: exclude MT4 data directory from real\u2011time antivirus scanning if safe in your environment.</li> <li>Power plan: use High performance to avoid CPU sleep throttling for low\u2011latency streams.</li> <li>Symbol visibility: ensure symbols are visible before quote/history calls (Cookbook \u2192 <code>EnsureSymbolVisible.md</code>). Pre\u2011subscribe to reduce first\u2011tick latency.</li> </ul>"},{"location":"Performance_Notes/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Add lightweight metrics: per\u2011RPC latency, stream message rate, reconnect counters.</li> <li>Sampled logs (1/N) for hot paths; full debug logs only on demand.</li> </ul>"},{"location":"Performance_Notes/#checklist-tldr","title":"\u2705 Checklist (TL;DR)","text":"<ul> <li>[ ] Use batch requests and paged/streamed history.</li> <li>[ ] Keep one gRPC conn; reuse clients.</li> <li>[ ] Cache SymbolParams / TickValues.</li> <li>[ ] Fast stream consumers; apply throttling/aggregation if UI\u2011facing.</li> <li>[ ] Timeouts for unary; cancel for streams; exponential backoff with jitter.</li> <li>[ ] Minimal logging in hot paths; metrics for rates/latency.</li> <li>[ ] Pre\u2011make symbols visible or subscribe early.</li> <li>[ ] Prefer higher\u2011TF history when possible; chunk long ranges.</li> </ul>"},{"location":"Performance_Notes/#code-map-where-each-tip-lives-in-your-repo","title":"\ud83d\uddfa\ufe0f Code map \u2192 where each tip lives in your repo","text":""},{"location":"Performance_Notes/#1-batch-dont-loop-rpcs","title":"1) Batch, don\u2019t loop RPCs","text":"<ul> <li>Batch quotes \u2192 <code>examples/mt4/MT4_service.go</code> \u2192 <code>func (s *MT4Service) ShowQuotesMany(ctx context.Context, symbols []string)</code> Search: <code>ShowQuotesMany(</code></li> <li>Single quote (avoid loops) \u2192 same file \u2192 <code>ShowQuote(ctx, symbol string)</code> Search: <code>ShowQuote(ctx</code></li> <li>History (paged/stream) \u2192 <code>examples/mt4/MT4_service.go</code> \u2192 <code>StreamOrdersHistoryExample</code>, <code>StreamQuoteHistoryExample</code></li> </ul>"},{"location":"Performance_Notes/#2-streaming-tuning-backpressure","title":"2) Streaming tuning &amp; backpressure","text":"<ul> <li>Quotes stream \u2192 <code>examples/mt4/MT4_service.go</code> \u2192 <code>StreamQuotes</code></li> <li>Opened order profits \u2192 same file \u2192 <code>StreamOpenedOrderProfits</code> (this is the method you pasted earlier with <code>OnOpenedOrdersProfit(ctx, 1000)</code> and the 30s timeout)</li> <li>Trade updates \u2192 same file \u2192 <code>StreamTradeUpdates</code></li> <li>Opened tickets \u2192 same file \u2192 <code>StreamOpenedOrderTickets</code></li> </ul> <p>Tip \u2192 buffer_size: if you expose <code>buffer_size</code> for profits, it is wired at account layer:</p> <ul> <li><code>examples/mt4/MT4Account.go</code> \u2192 look for <code>OnOpenedOrdersProfit(ctx,</code></li> </ul>"},{"location":"Performance_Notes/#3-one-grpc-connection-reuse-clients","title":"3) One gRPC connection, reuse clients","text":"<ul> <li>Connection bootstrap \u2192 <code>examples/main.go</code> \u2192 creation of service &amp; clients   Search: <code>NewMT4Service(</code> / <code>grpc.Dial(</code></li> <li>Account/session holder \u2192 <code>examples/mt4/MT4Account.go</code> Search: <code>type MT4Account struct</code> / <code>connect</code> / <code>login</code></li> </ul>"},{"location":"Performance_Notes/#4-symbol-metadata-cache-paramstick-values","title":"4) Symbol metadata cache (params/tick-values)","text":"<ul> <li>Fetch params \u2192 <code>examples/mt4/MT4_service.go</code> \u2192 <code>ShowSymbolParams</code></li> <li>Fetch tick values \u2192 same file \u2192 <code>ShowTickValues</code></li> <li>Used for rounding \u2192 see order helpers (e.g., <code>ShowOrderSendExample</code>) where <code>Digits</code>, <code>Point</code>, <code>LotStep</code> are applied before send.</li> </ul>"},{"location":"Performance_Notes/#5-rounding-validation-before-trades","title":"5) Rounding &amp; validation before trades","text":"<ul> <li>Volume/price rounding (from Cookbook) is backed by these call sites:   <code>examples/mt4/MT4_service.go</code> \u2192 <code>ShowOrderSendExample</code>, <code>ShowOrderModifyExample</code></li> <li>Ensure stops distance \u2192 check usage of <code>stops_level</code> / <code>freeze_level</code> from <code>ShowSymbolParams</code>.</li> </ul>"},{"location":"Performance_Notes/#6-ensure-symbol-visible-presubscribe","title":"6) Ensure symbol visible / pre\u2011subscribe","text":"<ul> <li>Ensure visible \u2192 <code>examples/mt4/MT4Account.go</code> Search: <code>EnsureSymbolVisible</code> / <code>SymbolSelect</code> / <code>SymbolsGet</code></li> <li>Pre\u2011subscribe quotes (lower first\u2011tick latency) \u2192 <code>examples/mt4/MT4_service.go</code> \u2192 <code>StreamQuotes</code></li> </ul>"},{"location":"Performance_Notes/#7-history-io-in-chunks","title":"7) History I/O in chunks","text":"<ul> <li>Quote history (time windows) \u2192 <code>examples/mt4/MT4_service.go</code> \u2192 <code>ShowQuoteHistory</code></li> <li>Orders history (paged) \u2192 same file \u2192 <code>StreamOrdersHistoryExample</code></li> </ul>"},{"location":"Performance_Notes/#8-timeouts-retries","title":"8) Timeouts &amp; retries","text":"<ul> <li>Unary with timeout \u2192 <code>examples/mt4/MT4_service.go</code> \u2192 places that use <code>context.WithTimeout(...)</code> around quote/symbol calls.</li> <li>Reconnect with backoff \u2192 reliability helpers you documented (Cookbook):   <code>Cookbook/Reliability/HandleReconnect.md</code> and <code>Cookbook/Reliability/UnaryRetries.md</code> correspond to the code in <code>examples/mt4/MT4_service.go</code> (stream loops) and in connection handling in <code>MT4Account.go</code>.</li> </ul>"},{"location":"Performance_Notes/#9-observability-logsmetrics","title":"9) Observability (logs/metrics)","text":"<ul> <li>Light logs around hot paths \u2192 <code>examples/mt4/MT4_service.go</code> stream handlers print <code>Tick/Profit/Trade</code> lines \u2014 replace with counters/rate meters in production.</li> </ul>"},{"location":"ReTimeouts_Reconnects_Backoff/","title":"Reliability: Timeouts, Reconnects, Backoff (GoMT4)","text":"<p>This chapter shows how reliability is implemented in this repo and how to tune it. Everything below references real code locations so you can cross\u2011check quickly.</p>"},{"location":"ReTimeouts_Reconnects_Backoff/#1-backoff-jitter-central-knobs","title":"1) Backoff &amp; Jitter (central knobs)","text":"<p>Defined in <code>examples/mt4/MT4Account.go</code>:</p> <pre><code>// Retry/backoff settings.\nconst (\n    backoffBase = 300 * time.Millisecond // initial backoff\n    backoffMax  = 5 * time.Second        // cap for backoff\n    jitterRange = 200 * time.Millisecond // \u00b1 jitter range\n    maxRetries  = 10                     // attempts before giving up\n)\n</code></pre> <p>And the helpers:</p> <pre><code>// waitWithCtx sleeps for d unless ctx is done.\nfunc waitWithCtx(ctx context.Context, d time.Duration) error { /* ... */ }\n\n// backoffDelay returns exponential backoff with jitter, capped.\nfunc backoffDelay(attempt int) time.Duration { /* base&lt;&lt;attempt, cap, jitter */ }\n</code></pre> <p>Why it matters: all retry loops (unary and streaming) use these values. Increase <code>backoffBase</code> for slower retry cadence; raise <code>backoffMax</code> for noisy networks; widen <code>jitterRange</code> to desync reconnect storms.</p>"},{"location":"ReTimeouts_Reconnects_Backoff/#2-percall-timeouts-unary-rpc","title":"2) Per\u2011call timeouts (unary RPC)","text":"<p>Pattern used across calls: add a short per\u2011call timeout around read\u2011only RPCs. Real example in <code>ConnectByServerName</code> health\u2011check (<code>examples/mt4/MT4Account.go</code>):</p> <pre><code>hctx, cancel := context.WithTimeout(ctx, 3*time.Second)\ndefer cancel()\nif _, err := a.AccountSummary(hctx); err != nil { /* disconnect &amp; error */ }\n</code></pre> <p>Guidelines:</p> <ul> <li>Read\u2011only calls: 2\u20135s.</li> <li>Trading actions: 3\u20138s, depending on broker latency.</li> <li>Always <code>defer cancel()</code> to avoid goroutine leaks.</li> </ul>"},{"location":"ReTimeouts_Reconnects_Backoff/#3-retrying-unary-calls-transport-errors","title":"3) Retrying unary calls (transport errors)","text":"<p>Unary execution uses a retry loop that:</p> <ul> <li>calls the RPC,</li> <li>if error is <code>codes.Unavailable</code> (transient transport), waits <code>backoffDelay(attempt)</code> with <code>waitWithCtx</code>, then retries,</li> <li>aborts on context cancel/deadline.</li> </ul> <p>Pseudo\u2011excerpt (mirrors <code>examples/mt4/MT4Account.go</code> logic):</p> <pre><code>for attempt := 0; attempt &lt; maxRetries; attempt++ {\n    res, err := grpcCall(headers)\n    if err == nil { return res, nil }\n    if s, ok := status.FromError(err); ok &amp;&amp; s.Code() == codes.Unavailable {\n        if err := waitWithCtx(ctx, backoffDelay(attempt)); err != nil { return zero, err }\n        continue\n    }\n    // non\u2011transient error: stop\n    return zero, err\n}\nreturn zero, fmt.Errorf(\"max retries reached: %w\", lastErr)\n</code></pre> <p>Tuning tips:</p> <ul> <li>For LAN/VPS, <code>backoffBase=150ms</code> often feels snappier.</li> <li>For unstable links, keep <code>base=300ms</code>, maybe <code>max=8\u201310s</code>.</li> </ul>"},{"location":"ReTimeouts_Reconnects_Backoff/#4-streaming-with-autoreconnect","title":"4) Streaming with auto\u2011reconnect","text":"<p>Streaming helpers reopen the stream on recoverable errors (<code>io.EOF</code>/<code>codes.Unavailable</code>), using the same backoff+jitter. Used by high\u2011level methods like <code>OnSymbolTick</code> and history/updates streams (<code>examples/mt4/MT4Account.go</code>).</p> <p>Consumer pattern:</p> <pre><code>ctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\n// Start stream\ndataCh, errCh := account.OnSymbolTick(ctx, []string{\"EURUSD\"})\n\nfor {\n    select {\n    case &lt;-ctx.Done():\n        return             // stops stream + cleanup\n    case err := &lt;-errCh:\n        if err != nil {    // non\u2011recoverable error surfaced by helper\n            log.Printf(\"stream stopped: %v\", err)\n            return\n        }\n    case tick := &lt;-dataCh:\n        // process tick here (send to DB, strategy, etc.)\n    }\n}\n</code></pre> <p>Notes:</p> <ul> <li>The helper closes both channels when it gives up (<code>maxRetries</code> reached) or <code>ctx</code> is canceled.</li> <li>You should not call <code>Recv()</code> yourself; consume from <code>dataCh</code>.</li> </ul>"},{"location":"ReTimeouts_Reconnects_Backoff/#5-clean-cancellation-health-checks","title":"5) Clean cancellation &amp; health checks","text":"<ul> <li>Use a single parent <code>ctx</code> per workflow and pass it through; cancel on shutdown.</li> <li>Main example (<code>examples/main.go</code>): the account is closed via <code>defer account.Disconnect()</code>.</li> <li>After connect, the code performs an AccountSummary health\u2011check with a 3s timeout (see \u00a72) to ensure the terminal is ready.</li> </ul> <p>Shutdown checklist:</p> <ul> <li>Cancel contexts of long\u2011living streams first.</li> <li>Wait for goroutines to finish (if you used your own workers), then <code>Disconnect()</code>.</li> </ul>"},{"location":"ReTimeouts_Reconnects_Backoff/#6-choosing-sensible-defaults","title":"6) Choosing sensible defaults","text":"Scenario Suggested timeouts Backoff (base \u2192 max) Read\u2011only (quotes/info) 2\u20133s per call 300ms \u2192 5s (default) Trading actions 3\u20138s per call 300ms \u2192 5\u20138s Unstable/home Wi\u2011Fi 4\u20136s per call 500ms \u2192 8\u201310s, jitter 300\u2013400ms VPS / local LAN 1\u20132s per call 150ms \u2192 3\u20135s <p>All these map to the constants at the top of <code>MT4Account.go</code>. Adjust them in one place to affect all retry loops.</p>"},{"location":"ReTimeouts_Reconnects_Backoff/#7-common-pitfalls-and-fixes","title":"7) Common pitfalls (and fixes)","text":"<ul> <li>Leak: forgot <code>cancel()</code> \u2192 Always <code>defer cancel()</code> after <code>WithTimeout/WithCancel</code>.</li> <li>Hammering retries \u2192 Increase <code>backoffBase</code> or <code>jitterRange</code>.</li> <li>Permanent errors treated as transient \u2192 Only retry on <code>codes.Unavailable</code>/<code>io.EOF</code> (transport). Propagate business errors immediately.</li> <li>Dead app on shutdown \u2192 Ensure your select reads <code>&lt;-ctx.Done()</code> and returns.</li> </ul>"},{"location":"ReTimeouts_Reconnects_Backoff/#8-where-to-look-in-code","title":"8) Where to look in code","text":"<ul> <li>Constants &amp; helpers: <code>examples/mt4/MT4Account.go</code> (retry/backoff, jitter, <code>waitWithCtx</code>).</li> <li>Unary patterns &amp; health\u2011check: <code>examples/mt4/MT4Account.go</code> (<code>context.WithTimeout</code> around calls).</li> <li>Streaming patterns: <code>examples/mt4/MT4Account.go</code> (stream wrapper + <code>OnSymbolTick</code>).</li> <li>Entry point &amp; cleanup: <code>examples/main.go</code> (config load, <code>Disconnect()</code> on exit).</li> </ul>"},{"location":"Security_Secrets/","title":"\ud83d\udd10 Security &amp; Secrets (GoMT4)","text":"<p>This page explains how to handle credentials and protect your setup based on the current GoMT4 codebase (Windows, local MT4 terminal, gRPC on <code>127.0.0.1:50051</code>).</p> <p>TL;DR: keep secrets out of Git, prefer per\u2011machine env vars or Windows Credential Manager, lock down the gRPC port, and redact logs.</p>"},{"location":"Security_Secrets/#scope-threat-model","title":"\ud83e\udded Scope &amp; threat model","text":"<ul> <li>Default setup: gRPC server listens on localhost only \u2192 attacks must come from the same PC.</li> <li>If you expose it to LAN/WAN (not default): you must add TLS and authentication (see \u25b6 Optional hardening).</li> </ul>"},{"location":"Security_Secrets/#secrets-inventory-what-we-actually-store","title":"\ud83d\udddd\ufe0f Secrets inventory (what we actually store)","text":"<ul> <li>MT4 login (account number)</li> <li>MT4 password (investor or trade)</li> <li>MT4 server (e.g., <code>RoboForex-Demo</code>)</li> <li>Optional symbols list / defaults (not sensitive)</li> </ul> <p>In your repo these live in <code>examples/config/config.json</code> (dev) or env vars (recommended).</p>"},{"location":"Security_Secrets/#where-to-store-secrets","title":"\ud83d\udcc1 Where to store secrets","text":""},{"location":"Security_Secrets/#1-development-recommended","title":"1) Development (recommended)","text":"<ul> <li>Create <code>.env</code> in repo root (ignored by Git) and let VS Code inject it (via <code>launch.json</code> \u2192 <code>envFile</code>).</li> <li>Commit only <code>.env.example</code> (placeholder values).</li> </ul> <p><code>.env.example</code></p> <pre><code>MT4_LOGIN=12345678\nMT4_PASSWORD=replace-me\nMT4_SERVER=YourBroker-Server\nDEFAULT_SYMBOL=EURUSD\n</code></pre> <p>.gitignore (fragment)</p> <pre><code># Secrets\n.env\nexamples/config/config.local.json\n</code></pre> <p>Why: the real <code>.env</code> never leaves your machine; teammates create their own.</p>"},{"location":"Security_Secrets/#2-production-headless","title":"2) Production / headless","text":"<ul> <li> <p>Prefer per\u2011machine environment variables (user scope):</p> </li> <li> <p>PowerShell (current user):</p> <p><pre><code>[Environment]::SetEnvironmentVariable(\"MT4_PASSWORD\",\"&lt;secret&gt;\",\"User\")\n</code></pre> * Or use Windows Credential Manager and load at runtime (requires a small helper; see \u25b6 Optional hardening).</p> </li> </ul>"},{"location":"Security_Secrets/#3-json-config","title":"3) JSON config","text":"<ul> <li><code>examples/config/config.json</code> is convenient but do not commit real credentials. Use a local variant (<code>config.local.json</code>) in <code>.gitignore</code>.</li> </ul>"},{"location":"Security_Secrets/#process-file-permissions-windows","title":"\ud83d\udd12 Process &amp; file permissions (Windows)","text":"<ul> <li>Run GoMT4 under a standard user, not Administrator.</li> <li>Keep repo and MT4 data folders in user profile; avoid world\u2011writable paths.</li> <li>NTFS permissions: only your user needs read access to <code>.env</code> and local configs.</li> </ul>"},{"location":"Security_Secrets/#network-exposure","title":"\ud83e\uddf1 Network exposure","text":"<ul> <li>Keep the listener on <code>127.0.0.1:50051</code> for local dev.</li> <li>The firewall rule you created opens the port inbound; limit it to Local subnet or remove it if not required for local\u2011only.</li> <li>If you must listen on <code>0.0.0.0</code> or a LAN IP: enable TLS and some auth (token or mTLS). See below.</li> </ul>"},{"location":"Security_Secrets/#logging-hygiene","title":"\ud83d\udcdd Logging hygiene","text":"<ul> <li>Never log credentials or full requests. Redact sensitive fields.</li> </ul> <p>Redaction helper (Go)</p> <pre><code>func redact(v string) string {\n    if len(v) &lt;= 4 { return \"***\" }\n    return v[:2] + strings.Repeat(\"*\", len(v)-4) + v[len(v)-2:]\n}\n// log.Printf(\"login=%d server=%s pwd=%s\", login, server, redact(password))\n</code></pre> <ul> <li>When printing orders/quotes, it\u2019s fine; avoid dumping entire structs that may include headers/metadata.</li> </ul>"},{"location":"Security_Secrets/#dependencies-supply-chain","title":"\ud83d\udd17 Dependencies &amp; supply chain","text":"<ul> <li>You import pb as a Go module: <code>git.mtapi.io/root/mrpc-proto/mt4/libraries/go</code>.</li> <li>Pin versions: use tags/commits in <code>go.mod</code>, keep <code>go.sum</code> committed. Example:</li> </ul> <p><pre><code>require git.mtapi.io/root/mrpc-proto/mt4/libraries/go v0.1.3\n</code></pre> * For reproducible/offline builds you can <code>go mod vendor</code>; this copies deps into <code>vendor/</code> (bigger repo, but no network at build time).</p>"},{"location":"Security_Secrets/#secrets-in-tests-examples","title":"\ud83e\uddea Secrets in tests &amp; examples","text":"<ul> <li>Don\u2019t embed real credentials in <code>main.go</code> or examples; read from env/config.</li> <li>Add a quick startup guard:</li> </ul> <pre><code>if os.Getenv(\"MT4_PASSWORD\") == \"replace-me\" {\n    log.Fatal(\"Refusing to start with placeholder password \u2014 set MT4_PASSWORD\")\n}\n</code></pre>"},{"location":"Security_Secrets/#checklist-quick","title":"\u2705 Checklist (quick)","text":"<ul> <li>[ ] <code>.env</code> exists locally; <code>.env.example</code> in Git; real <code>.env</code> is ignored.</li> <li>[ ] No real secrets in <code>config.json</code> committed.</li> <li>[ ] Logs redact passwords/tokens.</li> <li>[ ] gRPC bound to 127.0.0.1 unless TLS+auth is configured.</li> <li>[ ] <code>go.mod</code> pins pb module; <code>go.sum</code> committed.</li> </ul>"},{"location":"Security_Secrets/#optional-hardening-when-exposing-beyond-localhost","title":"\u25b6 Optional hardening (when exposing beyond localhost)","text":""},{"location":"Security_Secrets/#tls-for-grpc","title":"TLS for gRPC","text":"<p>Not enabled by default in examples. Enable if you bind to non\u2011localhost.</p> <ul> <li> <p>Generate a server cert (self\u2011signed for lab):</p> </li> <li> <p>PowerShell:</p> <p><pre><code>New-SelfSignedCertificate -DnsName \"gomt4.local\" -CertStoreLocation Cert:\\LocalMachine\\My\n</code></pre>   * Export PFX/CRT/KEY and configure your server to use it. * In Go server, add:</p> </li> </ul> <pre><code>creds := credentials.NewTLS(&amp;tls.Config{ /* MinVersion: tls.VersionTLS12, Certificates: [...] */ })\ns := grpc.NewServer(grpc.Creds(creds))\n</code></pre> <ul> <li>In client, trust the CA or use <code>RootCAs</code> with the server cert.</li> </ul>"},{"location":"Security_Secrets/#simple-token-auth-metadata-header","title":"Simple token auth (metadata header)","text":"<p>Not present in your current examples. Add only if you need LAN/WAN.</p> <ul> <li>Client adds header:</li> </ul> <pre><code>md := metadata.Pairs(\"x-api-key\", os.Getenv(\"GOMT4_API_KEY\"))\nctx := metadata.NewOutgoingContext(ctx, md)\n</code></pre> <ul> <li>Server interceptor checks it:</li> </ul> <pre><code>func apiKeyUnary(next grpc.UnaryHandler) grpc.UnaryServerInterceptor {\n  return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n    if md, ok := metadata.FromIncomingContext(ctx); ok {\n      if keys := md.Get(\"x-api-key\"); len(keys) == 1 &amp;&amp; keys[0] == os.Getenv(\"GOMT4_API_KEY\") {\n        return handler(ctx, req)\n      }\n    }\n    return nil, status.Error(codes.Unauthenticated, \"invalid api key\")\n  }\n}\n</code></pre>"},{"location":"Security_Secrets/#windows-credential-manager","title":"Windows Credential Manager","text":"<p>Optional replacement for <code>.env</code> in production.</p> <ul> <li>Store a Generic Credential (name <code>GoMT4/MT4_PASSWORD</code>).</li> <li>Load via a small helper lib (e.g., <code>github.com/danieljoos/wincred</code>).</li> </ul>"},{"location":"Security_Secrets/#quick-selfaudit-before-push","title":"\ud83d\udd0d Quick self\u2011audit before push","text":"<ul> <li>Grep for forbidden strings:</li> </ul> <p><pre><code>Select-String -Path . -Pattern \"Password=\", \"MT4_PASSWORD\", \"x-api-key\" -NotMatch \"\\.env$\" -Recurse\n</code></pre> * Double\u2011check <code>.gitignore</code> catches <code>.env</code> and any <code>*.local.json</code>.</p>"},{"location":"Security_Secrets/#references","title":"\ud83d\udcce References","text":"<ul> <li>Cookbook \u2192 <code>ConfigExample.md</code> (how to structure dev configs)</li> <li>Setup \u2192 <code>setup.md</code> (launch.json with <code>envFile</code>)</li> <li>Performance Notes \u2192 logging hints (hot paths)</li> </ul>"},{"location":"Troubleshooting_FAQ/","title":"Troubleshooting &amp; FAQ (GoMT4)","text":"<p>Short, practical answers. Each item points to real code paths where relevant.</p>"},{"location":"Troubleshooting_FAQ/#1-no-quotes-symbol-not-found-eurusd","title":"1) \u201cNo quotes / symbol not found (EURUSD)\u201d","text":"<p>Symptoms: <code>symbol not found</code>, empty quotes, or RPC returns OK but payload is empty.</p> <p>Likely causes:</p> <ul> <li>Broker uses a suffix (e.g., <code>EURUSD.m</code>, <code>EURUSD.pro</code>).</li> <li>Symbol is hidden in MT4 Market Watch.</li> </ul> <p>Fix:</p> <ul> <li>Open MT4 \u2192 Market Watch \u2192 Show All \u2192 note the exact symbol name and put it into <code>examples/config/config.json</code> \u2192 <code>DefaultSymbol</code>.</li> <li>If your code has an <code>EnsureSymbolVisible(symbol)</code> helper, call it before requests; otherwise, add one. (Typical place: <code>examples/mt4/MT4Account.go</code>.)</li> </ul> <p>Tip: print <code>Digits</code>, <code>Point</code>, <code>LotStep</code> in logs when selecting a symbol\u2014this quickly reveals mismatches.</p>"},{"location":"Troubleshooting_FAQ/#2-timeout-context-deadline-exceeded-on-simple-reads","title":"2) \u201cTimeout / context deadline exceeded\u201d on simple reads","text":"<p>Symptoms: <code>context deadline exceeded</code> on read\u2011only calls (quotes, account summary).</p> <p>Causes:</p> <ul> <li>MT4 not fully connected to broker or just launched.</li> <li>Network latency spikes.</li> </ul> <p>Fix:</p> <ul> <li>Start MT4 manually once and wait for connected state.</li> <li>Use a short per\u2011call timeout (2\u20135s) and retry only transport errors (see \u00a73 in <code>Docs/reliability (en)</code>).</li> <li>Code reference: a 3s health\u2011check with <code>AccountSummary</code> in <code>examples/mt4/MT4Account.go</code>.</li> </ul>"},{"location":"Troubleshooting_FAQ/#3-max-retries-reached-frequent-reconnects-in-streams","title":"3) \u201cMax retries reached\u201d / frequent reconnects in streams","text":"<p>Symptoms: stream stops with an error after several reconnect attempts; logs mention <code>io.EOF</code> or <code>codes.Unavailable</code>.</p> <p>Causes:</p> <ul> <li>Unstable connection; too aggressive backoff; context canceled early.</li> </ul> <p>Fix:</p> <ul> <li>Increase <code>backoffMax</code> or <code>backoffBase</code> in retry settings (see <code>examples/mt4/MT4Account.go</code>).</li> <li>Ensure the parent <code>ctx</code> is not canceled by your app prematurely.</li> <li>Consumer pattern: always select on <code>dataCh</code>, <code>errCh</code>, and <code>&lt;-ctx.Done()</code>; exit cleanly when channels close.</li> </ul>"},{"location":"Troubleshooting_FAQ/#4-cant-connect-to-grpc-connection-refused","title":"4) \u201cCan\u2019t connect to gRPC: connection refused\u201d","text":"<p>Symptoms: client can\u2019t dial the server; <code>connection refused</code> or hangs.</p> <p>Checklist:</p> <ul> <li>Is server running? (<code>go run ./examples/main.go</code>)</li> <li>Is it listening on the expected address? (<code>127.0.0.1:50051</code> by default)</li> <li><code>netstat -ano | findstr LISTENING | findstr :50051</code> \u2014 do you see a listener?</li> <li>Windows Firewall: if you bind to <code>0.0.0.0</code> or external IP, allow the port:</li> </ul> <pre><code>New-NetFirewallRule -DisplayName \"GoMT4 gRPC\" -Direction Inbound -Protocol TCP -LocalPort 50051 -Action Allow\n</code></pre>"},{"location":"Troubleshooting_FAQ/#5-invalid-volume-invalid-price-when-sending-orders","title":"5) \u201cInvalid volume / invalid price\u201d when sending orders","text":"<p>Symptoms: <code>invalid volume</code>, <code>invalid price</code>, or broker rejects the order.</p> <p>Causes:</p> <ul> <li>Volume not aligned to <code>LotStep</code>.</li> <li>Price/SL/TP not aligned to <code>Digits</code>/<code>Point</code> / too close to the market.</li> </ul> <p>Fix:</p> <ul> <li> <p>Query symbol params first, then round:</p> </li> <li> <p>volume \u2192 to <code>LotStep</code> (clamp to <code>MinLot</code>\u2026<code>MaxLot</code>).</p> </li> <li>prices \u2192 to <code>Digits</code> using <code>Point</code> (or 10^Digits helper).</li> <li>In logs, print the calculated price, <code>Digits</code>, <code>Point</code>, <code>LotStep</code>.</li> <li>Put the rounding into a small helper in <code>examples/mt4/MT4Account.go</code> (or your order module) and reuse it.</li> </ul>"},{"location":"Troubleshooting_FAQ/#6-quotes-freeze-after-a-while","title":"6) \u201cQuotes freeze after a while\u201d","text":"<p>Symptoms: stream was active but stopped emitting data; no errors printed.</p> <p>Causes:</p> <ul> <li>Consumer stopped reading from <code>dataCh</code> (blocked).</li> <li><code>ctx</code> canceled elsewhere.</li> </ul> <p>Fix:</p> <ul> <li>Ensure your consumer loop never blocks (use a bounded queue or backpressure strategy).</li> <li>Always monitor <code>errCh</code> and <code>&lt;-ctx.Done()&gt;</code> and exit cleanly. The helper closes channels on terminal errors.</li> </ul>"},{"location":"Troubleshooting_FAQ/#7-module-not-found-checksum-mismatch-go-modules","title":"7) \u201cmodule \u2026 not found / checksum mismatch\u201d (Go modules)","text":"<p>Symptoms: during <code>go mod tidy</code> or build.</p> <p>Fix:</p> <ul> <li>Make sure the pb import path matches the module path (no <code>.git</code> suffix):</li> </ul> <p><pre><code>import pb \"git.mtapi.io/root/mrpc-proto/mt4/libraries/go\"\n</code></pre> * Update or pin the module:</p> <p><pre><code>go get -u git.mtapi.io/root/mrpc-proto/mt4/libraries/go@latest\ngo mod tidy\n</code></pre> * If CI needs offline builds: <code>go mod vendor</code> and build with <code>-mod=vendor</code>.</p>"},{"location":"Troubleshooting_FAQ/#8-tls-handshake-certificate-issues","title":"8) \u201cTLS handshake / certificate\u201d issues","text":"<p>Symptoms: errors around TLS when using secure channels.</p> <p>Fix:</p> <ul> <li>For local dev, prefer plaintext on <code>127.0.0.1</code> (no TLS) unless you explicitly configured creds.</li> <li>If using TLS, verify you pass <code>grpc.WithTransportCredentials(credentials.NewTLS(&amp;tls.Config{ /* \u2026 */ }))</code> consistently on both sides and that CN/SAN match the host you dial.</li> </ul>"},{"location":"Troubleshooting_FAQ/#9-no-history-partial-history-returned","title":"9) \u201cNo history / partial history returned\u201d","text":"<p>Symptoms: history calls return fewer records than expected.</p> <p>Causes:</p> <ul> <li>MT4 hasn\u2019t downloaded that range yet.</li> <li>Too big range in a single request.</li> </ul> <p>Fix:</p> <ul> <li>Open the symbol chart in MT4 once to let it preload more history.</li> <li>Use paging/batching for long ranges (day\u2011by\u2011day or month\u2011by\u2011month) instead of one massive call.</li> </ul>"},{"location":"Troubleshooting_FAQ/#10-high-cpu-goroutine-leak","title":"10) \u201cHigh CPU / goroutine leak\u201d","text":"<p>Symptoms: CPU climbs or goroutines accumulate.</p> <p>Causes:</p> <ul> <li>Missing <code>defer cancel()</code>; streams not canceled; consumer loop busy\u2011spins.</li> </ul> <p>Fix:</p> <ul> <li>After every <code>WithTimeout/WithCancel</code>, add <code>defer cancel()</code>.</li> <li>On shutdown: cancel parent <code>ctx</code> first, then wait for goroutines to exit, then <code>Disconnect()</code>.</li> </ul>"},{"location":"Troubleshooting_FAQ/#11-quick-reference-commands","title":"11) Quick reference (commands)","text":"<ul> <li>Verify port listener:</li> </ul> <p><pre><code>netstat -ano | findstr LISTENING | findstr :50051\nTest-NetConnection -ComputerName 127.0.0.1 -Port 50051\n</code></pre> * Refresh deps:</p> <p><pre><code>go mod tidy\ngo get -u git.mtapi.io/root/mrpc-proto/mt4/libraries/go@latest\n</code></pre> * Vendor for offline builds:</p> <pre><code>go mod vendor\ngo build -mod=vendor ./...\n</code></pre>"},{"location":"Troubleshooting_FAQ/#12-where-in-code","title":"12) Where in code","text":"<ul> <li>Retry/backoff &amp; helpers: <code>examples/mt4/MT4Account.go</code></li> <li>Streaming wrappers (ticks/orders/history): <code>examples/mt4/MT4Account.go</code></li> <li>Entrypoint &amp; cleanup: <code>examples/main.go</code></li> <li>Config shape: <code>examples/config/config.json</code></li> </ul>"},{"location":"Your_Easy_Start/","title":"\ud83d\udee1\ufe0f Safe-by-Default Examples &amp; Feature Toggles","text":"<p>Run the examples safely by default. Turn on the powerful (but potentially dangerous) trading calls only when you explicitly decide to.</p>"},{"location":"Your_Easy_Start/#requirements","title":"\ud83e\udeaa Requirements","text":"<ul> <li><code>config/config.json</code> filled with login, password, server, and a default symbol.</li> <li>Standard build/run works: <code>go build ./...</code> or <code>go run .</code>.</li> <li>You do not need to call <code>MT4Account</code> directly; use the <code>MT4Service</code> methods exposed in examples.</li> </ul>"},{"location":"Your_Easy_Start/#quick-start-safe-mode","title":"Quick Start (Safe Mode)","text":"<ol> <li>Fill <code>config/config.json</code>.</li> <li>Run the example app (<code>main.go</code>) as-is \u2014 only read-only calls and safe streams will run.</li> <li>When you\u2019re ready to try trading (open/modify/close orders), enable it via Feature Toggles below.</li> </ol>"},{"location":"Your_Easy_Start/#feature-toggles-safe-by-default","title":"\u2728 Feature Toggles (Safe by Default)","text":"<p>Place these three flags near the top of your <code>main.go</code> (after loading config and creating the account):</p> <pre><code>// ===== Feature toggles (safe by default) =====\nenableTradingExamples := false   // \u26a0\ufe0f Real trading calls (OrderSend/Modify/Close...)\nenableStreams         := true    // Read-only streaming: quotes/profits/tickets/trades\nenableHistoryStreams  := true    // New: history streams (pagination/time-chunks)\n</code></pre>"},{"location":"Your_Easy_Start/#what-each-toggle-does","title":"\ud83d\udd27 What each toggle does","text":"<ul> <li> <p><code>enableTradingExamples</code></p> </li> <li> <p><code>false</code> (recommended default): trading methods are not executed.</p> </li> <li><code>true</code>: allows examples that open/modify/close orders.</li> <li> <p><code>enableStreams</code></p> </li> <li> <p>Enables read\u2011only streaming examples (quotes, opened\u2011orders profit/tickets, trade updates).</p> </li> <li> <p><code>enableHistoryStreams</code></p> </li> <li> <p>Enables new read\u2011only history streaming examples:</p> <ul> <li>paginated order history (last 30 days),</li> <li>chunked quote history (last 90 days, weekly chunks).</li> </ul> </li> </ul>"},{"location":"Your_Easy_Start/#example-layout-in-maingo","title":"Example Layout in <code>main.go</code>","text":"<p>Keep <code>main</code> readable and declarative. The toggles control the \u201cdangerous\u201d parts.</p> <pre><code>// --- \ud83d\udcc2 Account Info ---\nsvc.ShowAccountSummary(ctx)\n\n// --- \ud83d\udcc2 Order Operations (read-only) ---\nsvc.ShowOpenedOrders(ctx)\nsvc.ShowOpenedOrderTickets(ctx)\nsvc.ShowOrdersHistory(ctx)\n\n// --- \u26a0\ufe0f Trading (dangerous): turn on consciously ---\nif enableTradingExamples {\n    // Will open a real order (demo or real \u2014 depends on your login)\n    svc.ShowOrderSendExample(ctx, cfg.DefaultSymbol)\n\n    // Require valid tickets:\n    svc.ShowOrderModifyExample(ctx, 12345678)\n    svc.ShowOrderCloseExample(ctx, 12345678)\n    svc.ShowOrderCloseByExample(ctx, 12345678, 12345679)\n\n    // Deletes ONLY pending orders\n    svc.ShowOrderDeleteExample(ctx, 12345678)\n}\n\n// --- \ud83d\udcc2 Market Info / Symbol Info ---\nsvc.ShowQuote(ctx, cfg.DefaultSymbol)\nsvc.ShowQuotesMany(ctx, []string{\"EURUSD\", \"GBPUSD\", \"USDJPY\"})\nsvc.ShowQuoteHistory(ctx, cfg.DefaultSymbol)\nsvc.ShowAllSymbols(ctx)\nsvc.ShowSymbolParams(ctx, cfg.DefaultSymbol)\nsvc.ShowTickValues(ctx, []string{\"EURUSD\", \"GBPUSD\", \"USDJPY\"})\n\n// --- \ud83d\udcc2 Streaming / Subscriptions (read-only) ---\nif enableStreams {\n    svc.StreamQuotes(ctx)\n    svc.StreamOpenedOrderProfits(ctx)\n    svc.StreamOpenedOrderTickets(ctx)\n    svc.StreamTradeUpdates(ctx)\n}\n\n// --- \ud83e\uddfe New history streams (read-only) ---\nif enableHistoryStreams {\n    svc.StreamOrdersHistoryExample(ctx)                      // last 30 days, paginated\n    svc.StreamQuoteHistoryExample(ctx, cfg.DefaultSymbol)   // last 90 days, chunked\n}\n</code></pre> <p>Tip: If you still have an old commented \"demo\" block at the bottom of <code>main.go</code>, remove it. The list above is the single source of truth now.</p>"},{"location":"Your_Easy_Start/#whats-dangerous-vs-safe","title":"What\u2019s \u201cdangerous\u201d vs \u201csafe\u201d","text":"<p>Dangerous (disabled by default):</p> <ul> <li><code>ShowOrderSendExample</code> \u2014 opens a trade (market or pending).</li> <li><code>ShowOrderModifyExample</code> \u2014 changes SL/TP.</li> <li><code>ShowOrderCloseExample</code> \u2014 closes an order by ticket.</li> <li><code>ShowOrderCloseByExample</code> \u2014 closes using an opposite order.</li> <li><code>ShowOrderDeleteExample</code> \u2014 deletes only pending orders.</li> </ul> <p>Safe (read\u2011only):</p> <ul> <li>All other <code>Show*</code> info calls and <code>Stream*</code> subscriptions (quotes, profits, tickets, trades, history).</li> </ul>"},{"location":"Your_Easy_Start/#how-to-use-feature-toggles-step-by-step","title":"How to Use Feature Toggles (Step by Step)","text":"<ol> <li>Open <code>main.go</code>.</li> <li>Find the Feature toggles block:</li> </ol> <p><pre><code>enableTradingExamples := false\nenableStreams := true\nenableHistoryStreams := true\n</code></pre> 3. To run only safe examples \u2192 keep <code>enableTradingExamples = false</code>. 4. When you\u2019re ready to try trading:</p> <ul> <li>Set <code>enableTradingExamples = true</code>.</li> <li>Put real, valid tickets into modify/close/close\u2011by/delete calls.</li> <li>Prefer DEMO first.</li> <li>Run normally (<code>go run .</code> or <code>go build &amp;&amp; ./your-binary</code>).</li> </ul>"},{"location":"Your_Easy_Start/#safety-checklist-before-enabling-trading","title":"\ud83c\udfd7\ufe0f Safety Checklist (before enabling trading)","text":"<ul> <li>\u2705 You\u2019re on a DEMO account (strongly recommended for first runs).</li> <li>\u2705 <code>ShowAccountSummary</code> looks sane; you understand <code>Equity</code> and <code>FreeMargin</code>.</li> <li>\u2705 Symbol, volume, SL/TP comply with your broker\u2019s rules.</li> <li>\u2705 Tickets are real, e.g., from <code>ShowOpenedOrders</code>.</li> </ul>"},{"location":"Your_Easy_Start/#faq","title":"\ud83e\udd16 FAQ","text":"<p>Do I need to call <code>MT4Account</code> directly? No. Use <code>MT4Service</code> methods (<code>svc.Show...</code>, <code>svc.Stream...</code>). <code>MT4Account</code> is managed under the hood.</p> <p>Where can I change date ranges for history?</p> <ul> <li><code>StreamOrdersHistoryExample</code> \u2014 last 30 days by default.</li> <li><code>StreamQuoteHistoryExample</code> \u2014 last 90 days (weekly chunks).   Fork those wrappers or add parameters if you need custom ranges.</li> </ul> <p>How do I prevent accidental trades in a team repo? Keep <code>enableTradingExamples = false</code> in committed code, add a big comment banner above the toggle. Flip it locally for tests.</p>"},{"location":"Your_Easy_Start/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>\u201cNothing happens in trading examples\u201d \u2192 You likely still have <code>enableTradingExamples = false</code>.</li> <li>\u201cOrder modify/close fails\u201d \u2192 The ticket is invalid or not applicable (e.g., trying to delete a market order).</li> <li>\u201cStreams stop too soon\u201d \u2192 Example wrappers include a safety timeout. Adjust/remove <code>time.After(...)</code> in wrapper methods if you need long-running streams.</li> </ul> <p>That\u2019s it \u2014 clean <code>main</code>, safe defaults, and powerful features behind a single switch. When you\u2019re ready, flip the toggle and proceed step by step.</p>"},{"location":"cli_usage/","title":"\ud83e\uddf0 Using GoMT4 via CLI (No GUI)","text":"<p>This section demonstrates how to use GoMT4 directly from the terminal, without any graphical user interface (GUI). Ideal for developers, DevOps, and command-line enthusiasts who prefer full control.</p>"},{"location":"cli_usage/#requirements","title":"\ud83d\udd27 Requirements","text":"Tool Purpose Go 1.20+ For building and running the project MetaTrader 4 Terminal with gRPC plugin enabled <code>config.json</code> Login credentials and default symbol Terminal All operations are executed via command-line"},{"location":"cli_usage/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>GoMT4/\n\u251c\u2500\u2500 examples/                      # Example usage and main executable code\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 config.go              # Loads configuration from a JSON file\n\u2502   \u2502   \u2514\u2500\u2500 config.json            # Connection settings: login, password, server, etc.\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 mt4/\n\u2502   \u2502   \u251c\u2500\u2500 MT4Account.go          # Handles MT4 connection and account-level operations\n\u2502   \u2502   \u2514\u2500\u2500 MT4_service.go         # Provides service methods for orders, streaming, etc.\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 go.mod                     # Go module definition for the examples package\n\u2502   \u251c\u2500\u2500 go.sum                     # Dependency checksums\n\u2502   \u2514\u2500\u2500 main.go                    # Entry point demonstrating MT4Service usage\n\u2502\n\u2502\n\u251c\u2500\u2500 .gitignore                     # Files/folders to be excluded from Git\n\u2514\u2500\u2500 mkdocs.yml                     # Documentation config file (for mkdocs or similar tools)\n</code></pre>"},{"location":"cli_usage/#example-configjson","title":"\ud83e\udde9 Example <code>config.json</code>","text":"<pre><code>{\n  \"Login\": 501401178,\n  \"Password\": \"v8gctta\",\n  \"Server\": \"RoboForex-Demo\",\n  \"DefaultSymbol\": \"EURUSD\"\n}\n</code></pre>"},{"location":"cli_usage/#running-the-app","title":"\ud83d\ude80 Running the App","text":"<pre><code>go run main.go\n</code></pre> <p>If all goes well, you\u2019ll see: <code>\u2705 Connected to MT4 server</code> and other output depending on the enabled functions.</p>"},{"location":"cli_usage/#available-functions","title":"\ud83e\uddea Available Functions","text":""},{"location":"cli_usage/#account-information","title":"\ud83e\uddfe Account Information","text":"Function Description <code>ShowAccountSummary</code> Print balance, equity, and currency <code>ShowOpenedOrders</code> List current open orders <code>ShowOrdersHistory</code> View closed trades from last 7 days <code>ShowOpenedOrderTickets</code> Print open order ticket numbers"},{"location":"cli_usage/#order-operations","title":"\ud83d\udce6 Order Operations","text":"Function Description <code>ShowOrderSendExample(\"EURUSD\")</code> Submit a sample Buy order <code>ShowOrderModifyExample(ticket)</code> Modify SL/TP for a ticket <code>ShowOrderCloseExample(ticket)</code> Close an order by ticket <code>ShowOrderDeleteExample(ticket)</code> Delete a pending order <code>ShowOrderCloseByExample(t1, t2)</code> Close one order with its opposite <p>\u26a0\ufe0f Real order execution (even on demo) \u2014 use carefully.</p>"},{"location":"cli_usage/#market-info-symbols","title":"\ud83d\udcc8 Market Info &amp; Symbols","text":"Function Description <code>ShowQuote(\"EURUSD\")</code> Get live bid/ask quote <code>ShowQuotesMany([...])</code> Get quotes for multiple symbols <code>ShowQuoteHistory(\"EURUSD\")</code> Get last 5 days of OHLC candles <code>ShowAllSymbols()</code> List all available trading instruments <code>ShowSymbolParams(\"EURUSD\")</code> Get full symbol metadata <code>ShowTickValues([...])</code> Get tick/contract values for symbols"},{"location":"cli_usage/#streaming-subscriptions","title":"\ud83d\udd04 Streaming / Subscriptions","text":"Function Description <code>StreamQuotes()</code> Subscribe to live tick updates <code>StreamOpenedOrderProfits()</code> Real-time profit updates per open order <code>StreamOpenedOrderTickets()</code> Monitor currently open order tickets <code>StreamTradeUpdates()</code> Subscribe to all trading events <code>StreamOrdersHistoryExample()</code> Page-by-page stream of order history (demo; last 30 days, close-time DESC) <code>StreamQuoteHistoryExample()</code> Time-chunked OHLC history stream (demo; H1, last 90 days, weekly chunks) <p>Example output:</p> <pre><code>[Tick] EURUSD | Bid: 1.09876 | Ask: 1.09889 | Time: 2025-07-29 18:00:01\n</code></pre>"},{"location":"cli_usage/#how-to-enable-a-function","title":"\ud83e\uddd1\u200d\ud83d\udcbb How to Enable a Function","text":"<p>In <code>main.go</code>, uncomment the desired method:</p> <pre><code>svc.ShowQuote(ctx, \"EURUSD\")\nsvc.StreamQuotes(ctx)\n</code></pre> <p>You can call multiple methods one after another \u2014 for example, open an order and immediately monitor it.</p>"},{"location":"cli_usage/#tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Use <code>context.WithTimeout(...)</code> to limit long operations.</li> <li>Stop the MT4 terminal gracefully to avoid lingering gRPC connections.</li> <li>Even on demo, actions like sending orders are real.</li> </ul>"},{"location":"cli_usage/#quick-example","title":"\ud83d\udcce Quick Example","text":"<pre><code>svc.ShowAccountSummary(ctx)\nsvc.ShowQuote(ctx, \"EURUSD\")\nsvc.ShowOrderSendExample(ctx, \"EURUSD\")\nsvc.ShowOpenedOrders(ctx)\nsvc.StreamQuotes(ctx)\n</code></pre> <p>This is your terminal-powered trading dashboard \u2014 minimal, fast, and fully controlled by code.</p>"},{"location":"setup/","title":"Setup &amp; Environment (Windows, GoMT4 Project)","text":"<p>Audience: beginner-friendly. Comments in code are English only.</p>"},{"location":"setup/#1-prerequisites","title":"1) Prerequisites","text":"<ul> <li>Windows 10/11 recommended (Windows 7/8 may work but not tested)</li> <li>Git (https://git-scm.com/download/win)</li> <li>Go \u2265 1.21 (https://go.dev/dl/)</li> <li>VS Code + Go extension (by Google)</li> </ul> <p>Why: Go builds and runs the project; VS Code is the recommended IDE.</p>"},{"location":"setup/#2-where-the-pb-files-live","title":"2) Where the pb files live","text":"<ul> <li>The generated protobuf stubs are published as a Go module:</li> </ul> <p><pre><code>git.mtapi.io/root/mrpc-proto/mt4/libraries/go\n</code></pre> * Your code imports it like this (no <code>.git</code> suffix):</p> <p><pre><code>import pb \"git.mtapi.io/root/mrpc-proto/mt4/libraries/go\"\n</code></pre> * Because this is a Go module and it is public, you do not need to clone another repository. Go will automatically fetch it on the first build.</p>"},{"location":"setup/#3-how-go-manages-pb-files","title":"3) How Go manages pb files","text":"<ul> <li> <p>Running <code>go mod tidy</code> will:</p> </li> <li> <p>Download any missing modules (including the pb module).</p> </li> <li>Update <code>go.sum</code> with checksums.</li> <li>It does not overwrite your local code; it only ensures dependencies in <code>go.mod</code> are present.</li> <li>If the pb module is already downloaded, <code>go mod tidy</code> just verifies it. If a new version is requested (<code>go get -u</code>), then Go will update it.</li> </ul>"},{"location":"setup/#4-working-offline-go-mod-vendor","title":"4) Working offline: <code>go mod vendor</code>","text":"<ul> <li><code>go mod vendor</code> copies all dependencies (including pb stubs) into a local <code>vendor/</code> folder.</li> <li>After running it, the project can be built offline because Go will use the <code>vendor/</code> folder instead of the internet.</li> <li>This is optional; useful for CI builds without internet access.</li> </ul>"},{"location":"setup/#5-configuration-with-configjson","title":"5) Configuration with <code>config.json</code>","text":"<p>The project reads account and server settings from a JSON config file:</p> <pre><code>examples/config/config.json\n</code></pre> <p>Example config:</p> <pre><code>{\n  \"Login\": 501401178,\n  \"Password\": \"v8gctta\",\n  \"Server\": \"RoboForex-Demo\",\n  \"DefaultSymbol\": \"EURUSD\"\n}\n</code></pre> <p>Adjust these values for your broker before running the project. Prefer using investor (read\u2011only) password for safety unless you need trading operations.</p>"},{"location":"setup/#6-project-checkout-first-run","title":"6) Project checkout &amp; first run","text":"<pre><code># Clone ONLY your GoMT4 repo\ncd C:\\Users\\malin\ngit clone &lt;YOUR-GoMT4-REPO-URL&gt; GoMT4\ncd GoMT4\n\n# Install deps (fetches pb module too)\ngo mod tidy\n\n# Run the example (entrypoint lives in examples/main.go)\ngo run ./examples/main.go\n</code></pre> <p>You should see logs and the first RPC interactions.</p>"},{"location":"setup/#7-vs-code-debug-configuration","title":"7) VS Code debug configuration","text":"<p>The file <code>.vscode/launch.json</code> tells VS Code how to run and debug your program.</p> <ul> <li><code>program</code>: which Go file to launch (<code>examples/main.go</code>).</li> <li><code>cwd</code>: current working directory when running.</li> </ul> <p>.vscode/launch.json</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Go: Run main example\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"debug\",\n      \"program\": \"${workspaceFolder}/examples/main.go\",\n      \"cwd\": \"${workspaceFolder}\"\n    }\n  ]\n}\n</code></pre> <p>.vscode/settings.json</p> <pre><code>{\n  \"go.toolsManagement.autoUpdate\": true,\n  \"go.useLanguageServer\": true,\n  \"gopls\": {\n    \"ui.semanticTokens\": true\n  },\n  \"editor.formatOnSave\": true\n}\n</code></pre>"},{"location":"setup/#8-first-run-checklist","title":"8) First run checklist","text":"<ol> <li>Start MT4 terminal once manually (to initialize its data folders).</li> <li>Ensure firewall allows <code>RPC_LISTEN_ADDR</code> port (e.g. 50051) if you plan to connect from outside your machine. For local use on <code>127.0.0.1</code>, this is usually not required.</li> <li>Run the example:</li> </ol> <p><pre><code>cd C:\\Users\\malin\\GoMT4\ngo run ./examples/main.go\n</code></pre> 4. You should see logs like <code>listening on 127.0.0.1:50051</code> and first RPC interactions.</p>"},{"location":"setup/#9-common-pitfalls","title":"9) Common pitfalls","text":"<ul> <li>Timeouts / no connection \u2192 Check <code>config.json</code> values, firewall, MT4 terminal connectivity.</li> <li>Symbol not found (<code>EURUSD</code>) \u2192 Broker may add suffix (e.g. <code>EURUSD.m</code>). Ensure symbol is visible in MT4.</li> <li>Volume or price rejected \u2192 Always round with <code>Digits</code> and <code>LotStep</code> values.</li> </ul>"},{"location":"API%20Reference/Enums/","title":"\ud83c\udf9b\ufe0f API Reference \u2014 Enums (GoMT4)","text":"<p>This page documents all enumerations used by GoMT4. Names and values match <code>.proto</code>. For readability we show the shorter alias in parentheses.</p>"},{"location":"API%20Reference/Enums/#orders","title":"\ud83d\udcca Orders","text":""},{"location":"API%20Reference/Enums/#mt4ordertype-ordertype","title":"Mt4OrderType (OrderType)","text":"Name Value Meaning <code>OP_BUY</code> 0 Market Buy <code>OP_SELL</code> 1 Market Sell <code>OP_BUYLIMIT</code> 2 Pending Buy Limit <code>OP_SELLLIMIT</code> 3 Pending Sell Limit <code>OP_BUYSTOP</code> 4 Pending Buy Stop <code>OP_SELLSTOP</code> 5 Pending Sell Stop"},{"location":"API%20Reference/Enums/#mt4ordersendoperationtype-ordersendop","title":"Mt4OrderSendOperationType (OrderSendOp)","text":"<p>Same values/meaning as <code>OrderType</code>, but used in <code>OrderSendRequest.operation</code>.</p>"},{"location":"API%20Reference/Enums/#mt4orderresultcode-orderresultcode","title":"Mt4OrderResultCode (OrderResultCode)","text":"Name Value Meaning <code>MT4_ORDER_OK</code> 0 Order executed OK <code>MT4_ORDER_REJECTED</code> 1 Broker rejected order <code>MT4_ORDER_PARTIAL</code> 2 Partially filled"},{"location":"API%20Reference/Enums/#mt4orderaction-orderaction","title":"Mt4OrderAction (OrderAction)","text":"Name Value Meaning <code>MT4_ORDER_ACTION_CLOSE</code> 0 Close market order <code>MT4_ORDER_ACTION_DELETE</code> 1 Delete pending order <code>MT4_ORDER_ACTION_MODIFY</code> 2 Modify SL/TP or price"},{"location":"API%20Reference/Enums/#history-filters","title":"\ud83d\udcc8 History &amp; Filters","text":""},{"location":"API%20Reference/Enums/#mt4historysort-historysort","title":"Mt4HistorySort (HistorySort)","text":"Name Value Meaning <code>OPEN_TIME_ASC</code> 0 Sort by open time ascending <code>OPEN_TIME_DESC</code> 1 Sort by open time descending <code>CLOSE_TIME_ASC</code> 2 Sort by close time ascending <code>CLOSE_TIME_DESC</code> 3 Sort by close time descending"},{"location":"API%20Reference/Enums/#mt4ordersfilter-ordersfilter","title":"Mt4OrdersFilter (OrdersFilter)","text":"Name Value Meaning <code>ALL</code> 0 All orders <code>ONLY_MARKET</code> 1 Only market orders <code>ONLY_PENDING</code> 2 Only pending orders"},{"location":"API%20Reference/Enums/#quotes-charts","title":"\ud83d\udcb9 Quotes &amp; Charts","text":""},{"location":"API%20Reference/Enums/#mt4chartperiod-chartperiod","title":"Mt4ChartPeriod (ChartPeriod)","text":"Name Value Interval <code>PERIOD_M1</code> 0 1 minute <code>PERIOD_M5</code> 1 5 minutes <code>PERIOD_M15</code> 2 15 minutes <code>PERIOD_M30</code> 3 30 minutes <code>PERIOD_H1</code> 4 1 hour <code>PERIOD_H4</code> 5 4 hours <code>PERIOD_D1</code> 6 1 day <code>PERIOD_W1</code> 7 1 week <code>PERIOD_MN1</code> 8 1 month"},{"location":"API%20Reference/Enums/#mt4chartstreammode-chartstreammode","title":"Mt4ChartStreamMode (ChartStreamMode)","text":"Name Value Meaning <code>BARS</code> 0 Stream OHLC bars <code>TICKS</code> 1 Stream ticks"},{"location":"API%20Reference/Enums/#mt4chartaggregation-chartagg","title":"Mt4ChartAggregation (ChartAgg)","text":"Name Value Meaning <code>NONE</code> 0 Raw data <code>OHLC</code> 1 Aggregate to OHLC"},{"location":"API%20Reference/Enums/#connection","title":"\ud83d\udd0c Connection","text":""},{"location":"API%20Reference/Enums/#mt4connectionstatereason-connstatereason","title":"Mt4ConnectionStateReason (ConnStateReason)","text":"Name Value Meaning <code>UNKNOWN</code> 0 Unknown state <code>DISCONNECTED</code> 1 Disconnected <code>CONNECTED</code> 2 Connected"},{"location":"API%20Reference/Enums/#mt4disconnectreason-disconnectreason","title":"Mt4DisconnectReason (DisconnectReason)","text":"Name Value Meaning <code>UNKNOWN</code> 0 Unknown reason <code>USER</code> 1 User-requested <code>TIMEOUT</code> 2 Timeout"},{"location":"API%20Reference/Enums/#profits-streams","title":"\ud83e\uddee Profits &amp; Streams","text":""},{"location":"API%20Reference/Enums/#mt4profitstreammode-profitstreammode","title":"Mt4ProfitStreamMode (ProfitStreamMode)","text":"Name Value Meaning <code>UPDATES</code> 0 Send only updates <code>SNAPSHOTS</code> 1 Send periodic snapshots"},{"location":"API%20Reference/Enums/#mt4tradeupdatestate-tradeupdatestate","title":"Mt4TradeUpdateState (TradeUpdateState)","text":"Name Value Meaning <code>OPENED</code> 0 Order opened <code>MODIFIED</code> 1 Order modified <code>CLOSED</code> 2 Order closed"},{"location":"API%20Reference/Enums/#errors","title":"\u26a0\ufe0f Errors","text":""},{"location":"API%20Reference/Enums/#mrpcerrorcode-errorcode","title":"MrpcErrorCode (ErrorCode)","text":"Name Value Meaning <code>NONE</code> 0 No error <code>UNKNOWN</code> 1 Unknown error <code>TIMEOUT</code> 2 Timeout occurred <code>CONNECTION</code> 3 Connection lost <code>UNAVAILABLE</code> 4 Service unavailable"},{"location":"API%20Reference/Enums/#mt4ordererrorreason-ordererrorreason","title":"Mt4OrderErrorReason (OrderErrorReason)","text":"Name Value Meaning <code>NONE</code> 0 No error <code>INVALID_VOLUME</code> 1 Wrong lot size <code>INVALID_PRICE</code> 2 Wrong price <code>MARKET_CLOSED</code> 3 Market closed <code>SERVER_BUSY</code> 4 Trade server busy"},{"location":"API%20Reference/Enums/#mt4streamerrorreason-streamerrorreason","title":"Mt4StreamErrorReason (StreamErrorReason)","text":"Name Value Meaning <code>NONE</code> 0 No error <code>EOF</code> 1 End of stream <code>UNAVAILABLE</code> 2 Stream unavailable"},{"location":"API%20Reference/Enums/#misc","title":"\ud83d\udcca Misc","text":""},{"location":"API%20Reference/Enums/#mt4marketinfoerror-marketinfoerror","title":"Mt4MarketInfoError (MarketInfoError)","text":"Name Value Meaning <code>NONE</code> 0 No error"},{"location":"API%20Reference/Enums/#mt4tradeerror-tradeerror","title":"Mt4TradeError (TradeError)","text":"Name Value Meaning <code>NONE</code> 0 No error <code>TRADE_DISABLED</code> 1 Trading disabled"},{"location":"API%20Reference/Enums/#mt4tradeactionerror-tradeactionerror","title":"Mt4TradeActionError (TradeActionError)","text":"Name Value Meaning <code>NONE</code> 0 No error <code>INVALID_ACTION</code> 1 Action not allowed"},{"location":"API%20Reference/Enums/#mt4internalchartmode-internalchartmode","title":"Mt4InternalChartMode (InternalChartMode)","text":"Name Value Meaning <code>LINEAR</code> 0 Linear mode <code>STEP</code> 1 Step mode"},{"location":"API%20Reference/Enums/#mt4subscriptionerror-subscriptionerror","title":"Mt4SubscriptionError (SubscriptionError)","text":"Name Value Meaning <code>NONE</code> 0 No error <code>ALREADY_SUBSCRIBED</code> 1 Already subscribed <p>\ud83d\udccc Tip: Enums are used in requests and responses. Always check which enum a field expects (<code>OrderType</code>, <code>ChartPeriod</code>, etc.). Wrong values will cause broker errors or ignored requests.</p>"},{"location":"API%20Reference/Messages/","title":"\ud83d\udcd8 API Reference \u2014 Messages (GoMT4)","text":"<p>This page documents message types used by GoMT4 (from your <code>.proto</code>). Numbers, names and field order match the source. Enums are on a separate page.</p>"},{"location":"API%20Reference/Messages/#conventions","title":"\ud83d\udd16 Conventions","text":"<ul> <li><code>google.protobuf.Timestamp</code> \u2192 \u23f0 UTC time; format with <code>time.RFC3339</code> for logs.</li> <li><code>google.protobuf.{Double,String,Int32}Value</code> \u2192 \ud83c\udf9b optional fields with presence (omit if not set).</li> <li>Prices &amp; volumes \u2192 \ud83d\udcb9 respect <code>SymbolParams</code> (<code>digits</code>, <code>point</code>, <code>lot_step</code>, <code>lot_min/max</code>).</li> <li>Currency \u2192 \ud83d\udcb5 monetary fields are in account currency (see <code>AccountSummary.currency</code>).</li> </ul>"},{"location":"API%20Reference/Messages/#account-orders","title":"\ud83e\uddfe Account &amp; Orders","text":""},{"location":"API%20Reference/Messages/#mt4accountsummary-accountsummary","title":"\ud83d\udcca Mt4AccountSummary (AccountSummary)","text":"# Field Type 1 <code>login</code> int64 2 <code>name</code> string 3 <code>server</code> string 4 <code>currency</code> string 5 <code>balance</code> double 6 <code>equity</code> double 7 <code>margin</code> double 8 <code>margin_free</code> double 9 <code>margin_level</code> double 10 <code>leverage</code> int32 11 <code>profit</code> double Notes: snapshot for health/risk checks. <code>margin_level</code> in percent."},{"location":"API%20Reference/Messages/#mt4openedorder-openedorder","title":"\ud83d\udccc Mt4OpenedOrder (OpenedOrder)","text":"# Field Type 1 <code>ticket</code> int64 2 <code>symbol</code> string 3 <code>type</code> <code>OrderType</code> 4 <code>volume</code> double 5 <code>open_price</code> double 6 <code>sl</code> double 7 <code>tp</code> double 8 <code>open_time</code> Timestamp 9 <code>commission</code> double 10 <code>swap</code> double 11 <code>magic</code> int32 12 <code>comment</code> string Notes: live positions; use with <code>OpenedOrders</code>/streams."},{"location":"API%20Reference/Messages/#mt4orderhistory-orderhistory","title":"\ud83d\udcdc Mt4OrderHistory (OrderHistory)","text":"# Field Type 1 <code>ticket</code> int64 2 <code>symbol</code> string 3 <code>type</code> <code>OrderType</code> 4 <code>volume</code> double 5 <code>open_price</code> double 6 <code>close_price</code> double 7 <code>sl</code> double 8 <code>tp</code> double 9 <code>open_time</code> Timestamp 10 <code>close_time</code> Timestamp 11 <code>commission</code> double 12 <code>swap</code> double 13 <code>profit</code> double 14 <code>magic</code> int32 15 <code>comment</code> string Notes: closed deals; combine with history APIs."},{"location":"API%20Reference/Messages/#mt4ordersendrequest-ordersendrequest","title":"\ud83d\udce8 Mt4OrderSendRequest (OrderSendRequest)","text":"# Field Type Optional 1 <code>symbol</code> string 2 <code>operation</code> <code>OrderSendOperationType</code> 3 <code>volume</code> double 4 <code>price</code> DoubleValue \u2713 5 <code>slippage</code> int32 6 <code>sl</code> DoubleValue \u2713 7 <code>tp</code> DoubleValue \u2713 8 <code>comment</code> StringValue \u2713 9 <code>magic</code> Int32Value \u2713 10 <code>expiration</code> Timestamp \u2713 Notes: <ul> <li>Market orders: <code>price</code> usually omitted (server uses current Bid/Ask, with <code>slippage</code>).</li> <li>Pending orders: set <code>price</code> and (optionally) <code>expiration</code>.</li> </ul>"},{"location":"API%20Reference/Messages/#mt4ordersendresult-ordersendresult","title":"\ud83d\udcec Mt4OrderSendResult (OrderSendResult)","text":"# Field Type 1 <code>ticket</code> int64 2 <code>price</code> double 3 <code>open_time</code> Timestamp 4 <code>error</code> <code>OrderError</code> Notes: <code>error</code> filled on broker-side rejection."},{"location":"API%20Reference/Messages/#mt4ordermodifyrequest-ordermodifyrequest","title":"\u270f\ufe0f Mt4OrderModifyRequest (OrderModifyRequest)","text":"# Field Type Optional 1 <code>ticket</code> int64 2 <code>price</code> DoubleValue \u2713 3 <code>sl</code> DoubleValue \u2713 4 <code>tp</code> DoubleValue \u2713 5 <code>expiration</code> Timestamp \u2713"},{"location":"API%20Reference/Messages/#mt4ordercloserequest-ordercloserequest","title":"\u274c Mt4OrderCloseRequest (OrderCloseRequest)","text":"# Field Type Optional 1 <code>ticket</code> int64 2 <code>volume</code> double 3 <code>price</code> DoubleValue \u2713 4 <code>slippage</code> int32"},{"location":"API%20Reference/Messages/#mt4orderdeleterequest-orderdeleterequest","title":"\ud83d\uddd1\ufe0f Mt4OrderDeleteRequest (OrderDeleteRequest)","text":"# Field Type 1 <code>ticket</code> int64 2 <code>slippage</code> int32"},{"location":"API%20Reference/Messages/#mt4orderclosebyrequest-orderclosebyrequest","title":"\ud83d\udd04 Mt4OrderCloseByRequest (OrderCloseByRequest)","text":"# Field Type 1 <code>ticket_src</code> int64 2 <code>ticket_dst</code> int64 3 <code>slippage</code> int32"},{"location":"API%20Reference/Messages/#mt4orderactionresult-orderactionresult","title":"\ud83d\udcd1 Mt4OrderActionResult (OrderActionResult)","text":"# Field Type 1 <code>ticket</code> int64 2 <code>price</code> double 3 <code>time</code> Timestamp 4 <code>error</code> <code>OrderError</code>"},{"location":"API%20Reference/Messages/#quotes-market-info","title":"\ud83d\udcb9 Quotes &amp; Market Info","text":""},{"location":"API%20Reference/Messages/#mt4quote-quote","title":"\ud83d\udcb1 Mt4Quote (Quote)","text":"# Field Type 1 <code>symbol</code> string 2 <code>bid</code> double 3 <code>ask</code> double 4 <code>point</code> double 5 <code>digits</code> int32 6 <code>time</code> Timestamp Notes: compute spread in points: <code>(ask - bid) / point</code>."},{"location":"API%20Reference/Messages/#mt4symbolparams-symbolparams","title":"\ud83d\udcca Mt4SymbolParams (SymbolParams)","text":"# Field Type 1 <code>symbol</code> string 2 <code>digits</code> int32 3 <code>point</code> double 4 <code>lot_step</code> double 5 <code>lot_min</code> double 6 <code>lot_max</code> double 7 <code>stops_level</code> int32 8 <code>freeze_level</code> int32 9 <code>contract_size</code> double Notes: use for rounding, SL/TP distance checks and lot validation."},{"location":"API%20Reference/Messages/#connection-health","title":"\ud83d\udd0c Connection &amp; Health","text":""},{"location":"API%20Reference/Messages/#mt4connectrequest-mt4connectresponse-connect","title":"\ud83d\udd10 Mt4ConnectRequest / Mt4ConnectResponse (Connect)","text":"<ul> <li>Request: <code>login,password,server</code></li> <li>Response: <code>ok,error</code>.</li> </ul>"},{"location":"API%20Reference/Messages/#mt4connectionstate-connectionstate","title":"\ud83d\udce1 Mt4ConnectionState (ConnectionState)","text":"<ul> <li>Fields: <code>connected,login,server</code>.</li> </ul>"},{"location":"API%20Reference/Messages/#mt4pingrequest-mt4pingresponse-ping","title":"\ud83c\udfd3 Mt4PingRequest / Mt4PingResponse (Ping)","text":"<ul> <li>Echo <code>payload</code>.</li> </ul>"},{"location":"API%20Reference/Messages/#mt4serverinfo-serverinfo","title":"\ud83d\udda5\ufe0f Mt4ServerInfo (ServerInfo)","text":"<ul> <li>Fields: <code>name,address,timezone</code>.</li> </ul>"},{"location":"API%20Reference/Messages/#mt4healthsummary-mt4healthcheck-healthcheck","title":"\u2764\ufe0f Mt4HealthSummary / Mt4HealthCheck (HealthCheck)","text":"<ul> <li>Summary: <code>ok,error</code>. Used to quickly verify connection stability.</li> </ul>"},{"location":"API%20Reference/Messages/#streaming-payload-helpers-overview","title":"\ud83d\udce1 Streaming payload helpers (overview)","text":"<p>Detailed stream methods &amp; chunk types are documented on the Streaming page.</p> <ul> <li>Quotes: <code>QuoteUpdate</code>, <code>QuoteStream{Request,Chunk}</code>.</li> <li>Orders history (paged/stream): <code>OrdersHistoryPaged{Request,Chunk}</code>.</li> <li>Trade updates: <code>TradeUpdate</code>, <code>TradeUpdateStream{Request,Chunk}</code>.</li> <li>Opened order tickets: <code>OpenedOrdersTicketStream{Request,Chunk}</code>.</li> <li>Opened order profits: <code>OpenedOrdersProfit{StreamRequest,Snapshot,StreamChunk}</code>.</li> <li>Chart streams: <code>Chart{StreamRequest,StreamChunk}</code>, <code>ChartHistoryStreamRequest</code>.</li> <li>Internal charts: <code>InternalChart{StreamRequest,StreamChunk,HistoryStreamRequest}</code>.</li> </ul>"},{"location":"API%20Reference/Messages/#errors-messages-only","title":"\u26a0\ufe0f Errors (messages only)","text":"<ul> <li>MrpcError: <code>code:int32, message, details</code>.</li> <li>OrderError: <code>ticket:int64, reason:int32, text</code>.</li> <li>BatchOrderError: <code>errors[]</code> of <code>MrpcError</code>.</li> </ul> <p>See also: the Enums page for error/enum value tables.</p>"},{"location":"API%20Reference/Overview/","title":"\ud83d\udcda API Reference \u2014 Overview (GoMT4)","text":"<p>Short, navigable entry point to the API reference. Use this page to jump to the right place and understand naming rules &amp; conventions.</p>"},{"location":"API%20Reference/Overview/#whats-inside","title":"\ud83d\uddfa\ufe0f What\u2019s inside","text":"<ul> <li>Messages \u2014 payload structures (requests, responses, snapshots) with field notes.</li> <li>Enums \u2014 all enumerations with human meanings.</li> <li>Streaming \u2014 long\u2011lived gRPC streams and their chunk types.</li> </ul> <p>Looking for usage? See Cookbook recipes next to this section (e.g. Orders/PlaceMarketOrder, MarketInfo/GetQuote, Streaming/StreamQuotes).</p>"},{"location":"API%20Reference/Overview/#naming-readability","title":"\ud83c\udff7\ufe0f Naming &amp; readability","text":"<ul> <li>Original proto names are prefixed with <code>Mt4</code> (e.g., <code>Mt4AccountSummary</code>).</li> <li>In headings we show both: full name and a short alias in parentheses \u2014 e.g. Mt4AccountSummary (AccountSummary).</li> <li>Inside tables and notes we use short names for easier reading.</li> </ul> <p>Why <code>Mt4</code>? It scopes types (MT4 vs MT5) and avoids name collisions across modules/languages.</p>"},{"location":"API%20Reference/Overview/#common-type-legend","title":"\ud83e\udde9 Common type legend","text":"<ul> <li><code>Timestamp</code> \u23f0 \u2014 UTC time. Log in RFC3339.</li> <li><code>DoubleValue</code> / <code>StringValue</code> / <code>Int32Value</code> \ud83c\udf9b \u2014 optional fields with presence (omit \u2192 not set).</li> <li>Money &amp; PnL \ud83d\udcb5 \u2014 in account currency (<code>AccountSummary.currency</code>).</li> <li>Prices &amp; volumes \ud83d\udcb9 \u2014 obey <code>SymbolParams</code> (<code>digits</code>, <code>point</code>, <code>lot_step</code>, <code>lot_min/max</code>).</li> </ul>"},{"location":"API%20Reference/Overview/#api-families-where-to-read","title":"\ud83d\udd0c API families \u2192 where to read","text":"Area Start here Connection &amp; Health <code>Connect/Disconnect</code>, <code>ConnectionState</code>, <code>Ping</code>, <code>ServerInfo</code>, <code>Time</code>, HealthCheck \u2192 see Messages \u2192 Connection &amp; Health Orders (sync) <code>OrderSendRequest/Result</code>, <code>OrderModify/Close/Delete/CloseBy</code>, <code>OrderActionResult</code> \u2192 Messages \u2192 Account &amp; Orders Orders (history) <code>OrderHistory</code>, paged/streaming history \u2192 Streaming \u2192 Orders History Streaming Market info &amp; quotes <code>Quote</code>, <code>SymbolParams</code>, tick values, quote history \u2192 Messages \u2192 Quotes &amp; Market Info Streaming Quotes, trade updates, opened tickets, PnL snapshots, charts \u2192 Streaming"},{"location":"API%20Reference/Overview/#source-of-truth","title":"\ud83d\udd17 Source of truth","text":"<p>This reference is generated from your <code>.proto</code> files (mrpc\u2011proto). When proto changes, Messages/Enums/Streaming are updated to match field order and enum values exactly.</p>"},{"location":"API%20Reference/Overview/#stability-notes","title":"\ud83d\udea6 Stability notes","text":"<ul> <li>Fields marked optional (wrapper types) may be omitted by the server when not applicable.</li> <li>New enum values can appear in the future \u2014 handle unknown values defensively on the client side.</li> <li>Streaming: always process <code>is_last = true</code> and surface transport errors to your retry logic.</li> </ul>"},{"location":"API%20Reference/Overview/#quick-task-where-to-go","title":"\ud83e\udded Quick task \u2192 where to go","text":"<ul> <li>\u201cPlace a market order with SL/TP\u201d \u2192 Cookbook \u2192 Orders \u2192 PlaceMarketOrder.md</li> <li>\u201cGet quotes for 5 symbols\u201d \u2192 Cookbook \u2192 MarketInfo \u2192 GetMultipleQuotes.md</li> <li>\u201cStream PnL per opened order\u201d \u2192 Cookbook \u2192 Streaming \u2192 StreamAccountProfits.md</li> <li>\u201cReconnect with backoff on errors\u201d \u2192 Cookbook \u2192 Reliability \u2192 HandleReconnect.md</li> </ul> <p>Happy building! \u2728</p>"},{"location":"API%20Reference/Streaming/","title":"\ud83d\udce1 API Reference \u2014 Streaming (GoMT4)","text":"<p>This page documents streaming messages &amp; chunks used in GoMT4. Streaming APIs are long-lived gRPC calls that continuously send updates.</p>"},{"location":"API%20Reference/Streaming/#quotes-streaming","title":"\ud83d\udd14 Quotes Streaming","text":""},{"location":"API%20Reference/Streaming/#mt4quoteupdate-quoteupdate","title":"Mt4QuoteUpdate (QuoteUpdate)","text":"Field Type <code>symbol</code> string <code>bid</code> double <code>ask</code> double <code>point</code> double <code>digits</code> int32 <code>time</code> Timestamp Notes: one tick. Compute spread: <code>(ask - bid)/point</code>."},{"location":"API%20Reference/Streaming/#mt4quotestreamrequest-quotestreamrequest","title":"Mt4QuoteStreamRequest (QuoteStreamRequest)","text":"<ul> <li>Fields: <code>symbols[]</code> (list of symbols to subscribe).</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4quotestreamchunk-quotestreamchunk","title":"Mt4QuoteStreamChunk (QuoteStreamChunk)","text":"<ul> <li>Fields: <code>update: QuoteUpdate</code>, <code>is_last: bool</code>.</li> <li><code>is_last = true</code> marks stream termination.</li> </ul>"},{"location":"API%20Reference/Streaming/#orders-history-streaming","title":"\ud83d\udcd1 Orders History Streaming","text":""},{"location":"API%20Reference/Streaming/#mt4ordershistorypagedrequest-ordershistorypagedrequest","title":"Mt4OrdersHistoryPagedRequest (OrdersHistoryPagedRequest)","text":"<ul> <li>Fields: <code>from</code>, <code>to</code>, optional <code>symbol</code>, <code>page_size</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4ordershistorypagedchunk-ordershistorypagedchunk","title":"Mt4OrdersHistoryPagedChunk (OrdersHistoryPagedChunk)","text":"Field Type <code>orders[]</code> OrderHistory <code>next_page_token</code> string <code>is_last</code> bool Notes: chunked history pages. Use token to request next page."},{"location":"API%20Reference/Streaming/#trade-updates","title":"\ud83d\udd04 Trade Updates","text":""},{"location":"API%20Reference/Streaming/#mt4tradeupdate-tradeupdate","title":"Mt4TradeUpdate (TradeUpdate)","text":"Field Type <code>ticket</code> int64 <code>symbol</code> string <code>type</code> OrderType <code>volume</code> double <code>price</code> double <code>sl</code> double <code>tp</code> double <code>time</code> Timestamp <code>state</code> TradeUpdateState"},{"location":"API%20Reference/Streaming/#mt4tradeupdatestreamrequest-tradeupdatestreamrequest","title":"Mt4TradeUpdateStreamRequest (TradeUpdateStreamRequest)","text":"<ul> <li>Fields: <code>symbols[]</code> (subscribe per symbol).</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4tradeupdatestreamchunk-tradeupdatestreamchunk","title":"Mt4TradeUpdateStreamChunk (TradeUpdateStreamChunk)","text":"<ul> <li>Fields: <code>update: TradeUpdate</code>, <code>is_last: bool</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#opened-orders-tickets","title":"\ud83c\udf9f\ufe0f Opened Orders Tickets","text":""},{"location":"API%20Reference/Streaming/#mt4openedordersticketstreamrequest-openedordersticketstreamrequest","title":"Mt4OpenedOrdersTicketStreamRequest (OpenedOrdersTicketStreamRequest)","text":"<ul> <li>Fields: <code>symbols[]</code> (subscribe tickets by symbol).</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4openedordersticketstreamchunk-openedordersticketstreamchunk","title":"Mt4OpenedOrdersTicketStreamChunk (OpenedOrdersTicketStreamChunk)","text":"Field Type <code>tickets[]</code> OpenedOrdersTicket <code>is_last</code> bool"},{"location":"API%20Reference/Streaming/#opened-orders-profit-stream","title":"\ud83d\udcb0 Opened Orders Profit Stream","text":""},{"location":"API%20Reference/Streaming/#mt4openedordersprofitorderinfo-profitorderinfo","title":"Mt4OpenedOrdersProfitOrderInfo (ProfitOrderInfo)","text":"Field Type <code>ticket</code> int64 <code>symbol</code> string <code>order_profit</code> double <code>swap</code> double <code>commission</code> double"},{"location":"API%20Reference/Streaming/#mt4openedordersprofitsnapshot-profitsnapshot","title":"Mt4OpenedOrdersProfitSnapshot (ProfitSnapshot)","text":"<ul> <li>Fields: <code>opened_orders_with_profit_updated[]: ProfitOrderInfo</code>, <code>time: Timestamp</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4openedordersprofitstreamrequest-profitstreamrequest","title":"Mt4OpenedOrdersProfitStreamRequest (ProfitStreamRequest)","text":"<ul> <li>Field: <code>buffer_size: int32</code> (controls channel buffer).</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4openedordersprofitstreamchunk-profitstreamchunk","title":"Mt4OpenedOrdersProfitStreamChunk (ProfitStreamChunk)","text":"<ul> <li>Fields: <code>snapshot: ProfitSnapshot</code>, <code>is_last: bool</code>.</li> </ul> <p>Notes: updates real-time PnL per order.</p>"},{"location":"API%20Reference/Streaming/#quote-history-streaming","title":"\ud83d\udd52 Quote History Streaming","text":""},{"location":"API%20Reference/Streaming/#mt4quotehistorypoint-quotehistorypoint","title":"Mt4QuoteHistoryPoint (QuoteHistoryPoint)","text":"<ul> <li>Fields: <code>time, bid, ask</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4quotehistorychunk-quotehistorychunk","title":"Mt4QuoteHistoryChunk (QuoteHistoryChunk)","text":"<ul> <li>Fields: <code>point: QuoteHistoryPoint</code>, <code>is_last: bool</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#chart-streaming","title":"\ud83d\udcca Chart Streaming","text":""},{"location":"API%20Reference/Streaming/#mt4chartstreamrequest-chartstreamrequest","title":"Mt4ChartStreamRequest (ChartStreamRequest)","text":"<ul> <li>Fields: <code>symbol, period</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4chartstreamchunk-chartstreamchunk","title":"Mt4ChartStreamChunk (ChartStreamChunk)","text":"<ul> <li>Fields: <code>bar: ChartBar</code>, <code>is_last: bool</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4charthistorystreamrequest-charthistorystreamrequest","title":"Mt4ChartHistoryStreamRequest (ChartHistoryStreamRequest)","text":"<ul> <li>Fields: <code>symbol, period, chunks: ChartTimeChunks</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4charttimechunks-charttimechunks","title":"Mt4ChartTimeChunks (ChartTimeChunks)","text":"<ul> <li>Array of <code>from/to</code> ranges.</li> </ul>"},{"location":"API%20Reference/Streaming/#internal-chart-streaming","title":"\ud83d\udcc8 Internal Chart Streaming","text":""},{"location":"API%20Reference/Streaming/#mt4internalchartstreamrequest-internalchartstreamrequest","title":"Mt4InternalChartStreamRequest (InternalChartStreamRequest)","text":"<ul> <li>Field: <code>symbol</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4internalchartstreamchunk-internalchartstreamchunk","title":"Mt4InternalChartStreamChunk (InternalChartStreamChunk)","text":"<ul> <li>Fields: <code>point: InternalChartPoint</code>, <code>is_last: bool</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4internalcharthistorystreamrequest-internalcharthistorystreamrequest","title":"Mt4InternalChartHistoryStreamRequest (InternalChartHistoryStreamRequest)","text":"<ul> <li>Fields: <code>symbol</code>, <code>chunks: InternalChartTimeChunks</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#mt4internalcharthistoryresponse-internalcharthistoryresponse","title":"Mt4InternalChartHistoryResponse (InternalChartHistoryResponse)","text":"<ul> <li>Fields: <code>series[]: InternalChartSeries</code>.</li> </ul>"},{"location":"API%20Reference/Streaming/#stream-errors","title":"\u26a0\ufe0f Stream Errors","text":""},{"location":"API%20Reference/Streaming/#mt4streamerrorreason-streamerrorreason","title":"Mt4StreamErrorReason (StreamErrorReason)","text":"Name Value Meaning <code>NONE</code> 0 No error <code>EOF</code> 1 End of stream <code>UNAVAILABLE</code> 2 Stream unavailable <p>\ud83d\udccc Tip:</p> <ul> <li>Use <code>context.WithTimeout</code> or <code>WithCancel</code> to control stream lifetime.</li> <li>Always handle <code>is_last = true</code> and error channels in client code.</li> <li>Streaming is ideal for real-time dashboards (quotes, PnL, trades).</li> </ul>"},{"location":"Account/ShowAccountSummary/","title":"Getting an Account Summary","text":"<p>Request: full account summary (<code>*pb.AccountSummaryData</code>) from MT4 Fetch all core account metrics in a single call.</p>"},{"location":"Account/ShowAccountSummary/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints balance/equity/currency inside the method.\nsvc.ShowAccountSummary(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is connected via ConnectByServerName/ConnectByHostPort.\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second) // keep short; bump if your terminal is slow\ndefer cancel()\n\nsummary, err := account.AccountSummary(ctx)\nif err != nil {\n    log.Printf(\"\u274c AccountSummary error: %v\", err)\n    return\n}\n\nfmt.Printf(\"Account Summary: Balance=%.2f, Equity=%.2f, Currency=%s\\n\",\n    summary.GetAccountBalance(),\n    summary.GetAccountEquity(),\n    summary.GetAccountCurrency(),\n)\n</code></pre>"},{"location":"Account/ShowAccountSummary/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowAccountSummary(ctx context.Context)\n</code></pre>"},{"location":"Account/ShowAccountSummary/#input","title":"\ud83d\udd3dInput","text":"<p>No required input parameters.</p> Parameter Type Description <code>ctx</code> <code>context.Context</code> Context for timeout or cancellation control."},{"location":"Account/ShowAccountSummary/#output","title":"\u2b06\ufe0fOutput","text":"<p>Prints selected fields from <code>*pb.AccountSummaryData</code> to console:</p> Field Type Description <code>AccountBalance</code> <code>double</code> Balance excluding open positions. <code>AccountEquity</code> <code>double</code> Equity \u2014 balance including floating P/L. <code>AccountMargin</code> <code>double</code> Currently used margin. <code>AccountFreeMargin</code> <code>double</code> Free margin available for opening new trades. <code>AccountCurrency</code> <code>string</code> Deposit currency (e.g. <code>\"USD\"</code>, <code>\"EUR\"</code>). <code>AccountLeverage</code> <code>int64</code> Leverage applied to the account. <code>AccountUserName</code> <code>string</code> Account holder's name. <code>AccountLogin</code> <code>int64</code> Account login ID. <code>AccountCompanyName</code> <code>string</code> Broker's name or company."},{"location":"Account/ShowAccountSummary/#purpose","title":"\ud83c\udfafPurpose","text":"<p>Retrieve and display key real-time account information. Typical uses:</p> <ul> <li>Showing account status in dashboards or CLI output</li> <li>Checking available margin and equity before placing trades</li> <li>Monitoring general account health and exposure</li> </ul>"},{"location":"Account/ShowAccountSummary/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Bounded context: Your implementation sets a 3s timeout if none is provided \u2014 keep it; bump to 5s on slow terminals.</li> <li>Connection required: Returns <code>\"not connected\"</code> if neither <code>Host</code> nor <code>ServerName</code> is set. Call <code>ConnectByHostPort</code>/<code>ConnectByServerName</code> first.</li> <li>Reconnect behavior: <code>ExecuteWithReconnect</code> retries on <code>codes.Unavailable</code> and <code>TERMINAL_INSTANCE_NOT_FOUND</code> with \\~500ms backoff + jitter \u2014 short pauses are expected during restarts.</li> <li>Currency vs P/L base: <code>AccountCurrency</code> is the deposit currency; P/L can be in the quote currency of instruments \u2014 don\u2019t mix in calculations.</li> <li>Equity is a snapshot: Re-query right before risk checks or order placement.</li> <li>Leverage source of truth: Use <code>AccountLeverage</code> from summary for margin math; avoid hardcoded broker values.</li> <li>Formatting: Round for display only; keep raw doubles for math.</li> </ul>"},{"location":"Account/ShowAccountSummary/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Stale terminal: With a disconnected terminal, values may be old without a hard error. Log connection state along with numbers.</li> <li>Roll-over effects: Swaps/commissions at roll-over can cause brief equity/balance divergences.</li> <li>Type drift: Match pb types exactly (<code>int64</code> for leverage/login). Mixing <code>int32</code>/<code>uint64</code> can bite later.</li> </ul>"},{"location":"Account/ShowAccountSummary/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Happy path: Values are non-negative; equity \u2248 balance on flat accounts.</li> <li>Edge cases: With open positions, equity \u2260 balance; currency non-empty.</li> <li>Failure path: Simulate terminal down; expect error logged and no panic.</li> </ul>"},{"location":"Cookbook/","title":"\ud83d\udcda Cookbook","text":"<p>Ready-made recipes by section:</p>"},{"location":"Cookbook/#account","title":"Account","text":"<ul> <li>Show Account Summary</li> <li>Stream Opened Order Profits</li> </ul>"},{"location":"Cookbook/#market-info","title":"Market Info","text":"<ul> <li>Get Quote</li> <li>Get Multiple Quotes</li> <li>Stream Quotes</li> <li>Symbol Params</li> </ul>"},{"location":"Cookbook/#orders","title":"Orders","text":"<ul> <li>Place Market Order</li> <li>Place Pending Order</li> <li>Modify Order</li> <li>Close Order</li> <li>Close By Orders</li> <li>Delete Pending</li> <li>History Orders</li> </ul>"},{"location":"Cookbook/#reliability-connection","title":"Reliability &amp; Connection","text":"<ul> <li>Handle Reconnect</li> <li>Unary Retries</li> <li>Health Check</li> </ul>"},{"location":"Cookbook/#utils-helpers","title":"Utils &amp; Helpers","text":"<ul> <li>Ensure Symbol Visible</li> <li>Round Volume / Price</li> <li>Config Example</li> </ul>"},{"location":"Cookbook/Account/AccountSummary/","title":"\ud83d\udcd2 AccountSummary (GoMT4)","text":"<p>Goal: fetch account summary (balance, equity, margin, free margin, leverage, currency) and use it for basic checks.</p> <p>Real code refs:</p> <ul> <li>Account: <code>examples/mt4/MT4Account.go</code> (<code>AccountSummary</code>)</li> <li>Demo: <code>examples/mt4/MT4_service.go</code> (<code>ShowAccountSummary</code>)</li> </ul>"},{"location":"Cookbook/Account/AccountSummary/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>MT4 terminal is running &amp; connected to broker.</li> <li>Valid credentials in <code>examples/config/config.json</code>.</li> </ul>"},{"location":"Cookbook/Account/AccountSummary/#2-request-summary-with-short-timeout","title":"\ud83d\udcdd 2) Request summary (with short timeout)","text":"<pre><code>ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\nsum, err := account.AccountSummary(ctx)\nif err != nil {\n    return fmt.Errorf(\"account summary failed: %w\", err)\n}\n\nfmt.Printf(\"Login=%d Currency=%s Leverage=1:%d\\n\",\n    sum.GetLogin(), sum.GetCurrency(), sum.GetLeverage())\nfmt.Printf(\"Balance=%.2f Equity=%.2f Margin=%.2f FreeMargin=%.2f\\n\",\n    sum.GetBalance(), sum.GetEquity(), sum.GetMargin(), sum.GetMarginFree())\n</code></pre>"},{"location":"Cookbook/Account/AccountSummary/#3-inspect-fields","title":"\ud83d\udd0d 3) Inspect fields","text":"<p>Common fields on <code>pb.AccountSummary</code>:</p> <ul> <li><code>Login</code>, <code>Name</code>, <code>Server</code>, <code>Currency</code></li> <li><code>Balance</code>, <code>Equity</code>, <code>Margin</code>, <code>MarginFree</code>, <code>MarginLevel</code></li> <li><code>Leverage</code> (1\\:x)</li> <li><code>Profit</code> (floating P/L)</li> </ul> <p>Use <code>MarginLevel</code> to trigger risk warnings; below broker thresholds, position operations may be limited.</p>"},{"location":"Cookbook/Account/AccountSummary/#4-simple-healthrisk-checks","title":"\ud83e\uddea 4) Simple health/risk checks","text":"<pre><code>// 1) Terminal healthy?\nif sum.GetBalance() &lt;= 0 &amp;&amp; sum.GetEquity() &lt;= 0 {\n    return fmt.Errorf(\"account looks inactive (balance/equity &lt;= 0)\")\n}\n\n// 2) Risk guard: margin level warning\nif ml := sum.GetMarginLevel(); ml &gt; 0 &amp;&amp; ml &lt; 100.0 {\n    log.Printf(\"\u26a0\ufe0f Low margin level: %.1f%%\", ml)\n}\n</code></pre>"},{"location":"Cookbook/Account/AccountSummary/#5-periodic-polling-no-stream","title":"\ud83d\udd04 5) Periodic polling (no stream)","text":"<p>If you need periodic updates without streaming:</p> <pre><code>ticker := time.NewTicker(2 * time.Second)\ndefer ticker.Stop()\nfor {\n    select {\n    case &lt;-ctx.Done():\n        return\n    case &lt;-ticker.C:\n        s, err := account.AccountSummary(ctx)\n        if err != nil { log.Printf(\"summary err: %v\", err); continue }\n        log.Printf(\"Equity=%.2f MarginFree=%.2f\", s.GetEquity(), s.GetMarginFree())\n    }\n}\n</code></pre>"},{"location":"Cookbook/Account/AccountSummary/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Fresh login \u2192 just after connect, give MT4 a second to initialize.</li> <li>Timeouts \u2192 use 2\u20135s per call; retry only transport errors (see Reliability).</li> <li>Currency conversion \u2192 values are in account currency; convert before comparing across accounts.</li> </ul>"},{"location":"Cookbook/Account/AccountSummary/#see-also","title":"\ud83d\udcce See also","text":"<ul> <li><code>StreamAccountProfits.md</code> \u2014 live profit updates for open orders.</li> <li><code>HistoryOrders.md</code> \u2014 check closed orders against balance changes.</li> <li><code>Reliability (en)</code> \u2014 per-call timeouts &amp; retries.</li> </ul>"},{"location":"Cookbook/Account/StreamOpenedOrderProfits/","title":"\ud83d\udcc8 StreamOpenedOrderProfits (GoMT4)","text":"<p>Goal: subscribe to live profit updates for currently opened orders with auto\u2011reconnect and clean shutdown.</p> <p>Real code refs you already ship:</p> <ul> <li>Streaming helper: <code>examples/mt4/MT4Account.go</code> (<code>OnOpenedOrdersProfit</code>)</li> <li>Service method: <code>examples/mt4/MT4_service.go</code> (<code>StreamOpenedOrderProfits</code>)</li> <li>Docs: <code>docs/Streaming/StreamOpenedOrderProfits.md</code></li> </ul>"},{"location":"Cookbook/Account/StreamOpenedOrderProfits/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>MT4 terminal is running &amp; connected.</li> <li>There are open positions; otherwise, the stream will be mostly silent.</li> </ul>"},{"location":"Cookbook/Account/StreamOpenedOrderProfits/#2-service-method-example","title":"\u25b6\ufe0f 2) Service method example","text":"<pre><code>func (s *MT4Service) StreamOpenedOrderProfits(ctx context.Context) {\n    ctx, cancel := context.WithCancel(ctx)\n    defer cancel()\n\n    // Second argument = buffer size for channel\n    profitCh, errCh := s.account.OnOpenedOrdersProfit(ctx, 1000)\n\n    fmt.Println(\"\ud83d\udd04 Streaming order profits...\")\n\n    for {\n        select {\n        case profit, ok := &lt;-profitCh:\n            if !ok {\n                fmt.Println(\"\u2705 Profit stream ended.\")\n                return\n            }\n            // profit.OpenedOrdersWithProfitUpdated is []*OnOpenedOrdersProfitOrderInfo\n            for _, info := range profit.OpenedOrdersWithProfitUpdated {\n                fmt.Printf(\"[Profit] Ticket: %d | Symbol: %s | Profit: %.2f\\n\",\n                    info.Ticket, info.Symbol, info.OrderProfit)\n            }\n\n        case err := &lt;-errCh:\n            log.Printf(\"\u274c Stream error: %v\", err)\n            return\n\n        case &lt;-time.After(30 * time.Second):\n            fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n            return\n        }\n    }\n}\n</code></pre>"},{"location":"Cookbook/Account/StreamOpenedOrderProfits/#3-backoff-health-checks","title":"\ud83e\udded 3) Backoff &amp; health checks","text":"<ul> <li>Under the hood, <code>OnOpenedOrdersProfit</code> auto\u2011reconnects on transient errors (<code>io.EOF</code>, <code>codes.Unavailable</code>).</li> <li>Reconnect delays are controlled by constants in <code>MT4Account.go</code> (backoff+jitter).</li> </ul>"},{"location":"Cookbook/Account/StreamOpenedOrderProfits/#4-processing-tips","title":"\ud83e\uddf0 4) Processing tips","text":"<ul> <li>Keep the loop non\u2011blocking \u2014 heavy work (DB, reporting) should go to a worker via buffered channel.</li> <li>Aggregate by ticket to compute running P/L per position.</li> <li>Combine with <code>StreamQuotes</code> for unrealized P/L analysis.</li> </ul>"},{"location":"Cookbook/Account/StreamOpenedOrderProfits/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>No positions \u2192 stream may emit nothing; normal if no orders open.</li> <li>Context canceled \u2192 stream ends; always handle <code>&lt;-ctx.Done()&gt;</code>.</li> <li>Backpressure \u2192 if you stop reading <code>profitCh</code>, the stream can stall.</li> <li>Timeout \u2192 in this demo, <code>time.After(30s)</code> closes the loop; in production use context deadlines.</li> </ul>"},{"location":"Cookbook/Account/StreamOpenedOrderProfits/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>AccountSummary.md</code> \u2014 snapshot of balance/equity/margins.</li> <li><code>StreamQuotes.md</code> \u2014 combine with quotes to analyze P/L dynamics.</li> <li><code>Reliability (en)</code> \u2014 timeouts, reconnects &amp; backoff patterns.</li> </ul>"},{"location":"Cookbook/Market_Info/GetMultipleQuotes/","title":"\ud83d\udcda GetMultipleQuotes (GoMT4)","text":"<p>Goal: fetch quotes for many symbols efficiently.</p> <p>Real code refs:</p> <ul> <li>Single quote: <code>examples/mt4/MT4Account.go</code> (<code>Quote</code>)</li> <li>Demo: <code>examples/mt4/MT4_service.go</code> (see <code>ShowQuotesMany</code> flow)</li> </ul>"},{"location":"Cookbook/Market_Info/GetMultipleQuotes/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>All symbols exist and are visible in MT4 (Market Watch \u2192 Show All).</li> <li><code>config.json</code> has at least one known symbol to start with.</li> </ul>"},{"location":"Cookbook/Market_Info/GetMultipleQuotes/#2-fast-path-a-batch-rpc-if-available-in-your-build","title":"\ud83d\ude80 2) Fast path A \u2014 Batch RPC (if available in your build)","text":"<p>Some builds expose a batch RPC (e.g., <code>QuotesMany(ctx, symbols)</code>), mirroring the <code>ShowQuotesMany</code> example. If you have it, use it:</p> <pre><code>symbols := []string{\"EURUSD\", \"GBPUSD\", \"USDJPY\"}\nqs, err := account.QuotesMany(ctx, symbols)\nif err != nil { return err }\nfor _, q := range qs.GetQuotes() {\n    fmt.Printf(\"%s Bid=%.5f Ask=%.5f Spread=%.1f pips\\n\",\n        q.GetSymbol(), q.GetBid(), q.GetAsk(), (q.GetAsk()-q.GetBid())/q.GetPoint())\n}\n</code></pre> <p>If your current API does not expose this convenience call, use fan\u2011out concurrency (next section).</p>"},{"location":"Cookbook/Market_Info/GetMultipleQuotes/#3-fast-path-b-fanout-with-goroutines-always-works","title":"\ud83e\uddf5 3) Fast path B \u2014 Fan\u2011out with goroutines (always works)","text":"<p>Run <code>Quote</code> requests in parallel and collect results.</p> <pre><code>func GetQuotesParallel(ctx context.Context, a *MT4Account, syms []string) ([]*pb.Quote, error) {\n    type item struct { q *pb.Quote; err error }\n    out := make([]*pb.Quote, 0, len(syms))\n    ch  := make(chan item, len(syms))\n    var wg sync.WaitGroup\n\n    // limit concurrency to avoid hammering the terminal\n    sem := make(chan struct{}, 8) // 8 concurrent calls\n\n    for _, s := range syms {\n        s := s\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            sem &lt;- struct{}{}\n            defer func(){ &lt;-sem }()\n\n            q, err := a.Quote(ctx, s)\n            ch &lt;- item{q, err}\n        }()\n    }\n    wg.Wait()\n    close(ch)\n\n    for it := range ch {\n        if it.err != nil { return nil, it.err }\n        out = append(out, it.q)\n    }\n    return out, nil\n}\n</code></pre> <p>Usage:</p> <pre><code>qs, err := GetQuotesParallel(ctx, account, []string{\"EURUSD\",\"GBPUSD\",\"USDJPY\"})\nif err != nil { log.Fatal(err) }\nfor _, q := range qs {\n    fmt.Printf(\"%s %.5f/%.5f @ %s\\n\", q.GetSymbol(), q.GetBid(), q.GetAsk(), q.GetTime().AsTime().Format(time.RFC3339))\n}\n</code></pre>"},{"location":"Cookbook/Market_Info/GetMultipleQuotes/#4-validation-fallbacks","title":"\ud83e\uddea 4) Validation &amp; fallbacks","text":"<ul> <li>If a symbol fails (hidden or has a suffix), log it and continue.</li> <li>Optionally, map missing symbols to their broker\u2011specific names (<code>EURUSD</code> \u2192 <code>EURUSD.m</code>).</li> </ul> <pre><code>for _, s := range syms {\n    q, err := a.Quote(ctx, s)\n    if err != nil {\n        log.Printf(\"skip %s: %v\", s, err)\n        continue\n    }\n    // ...\n}\n</code></pre>"},{"location":"Cookbook/Market_Info/GetMultipleQuotes/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Storming MT4: keep concurrency reasonable (4\u20138) to avoid timeouts.</li> <li>Suffixes: <code>EURUSD</code> vs <code>EURUSD.m</code> \u2014 normalize names or take from Market Watch.</li> <li>Timeouts: wrap each call with a short timeout (2\u20133s) and retry only transport errors.</li> </ul>"},{"location":"Cookbook/Market_Info/GetMultipleQuotes/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>GetQuote.md</code> \u2014 single symbol quote.</li> <li><code>StreamQuotes.md</code> \u2014 live stream for continuous updates.</li> <li><code>SymbolParams.md</code> \u2014 get <code>Digits</code>, <code>Point</code>, <code>LotStep</code> for rounding &amp; display.</li> </ul>"},{"location":"Cookbook/Market_Info/GetQuote/","title":"\ud83d\udcb1 GetQuote (GoMT4)","text":"<p>Goal: fetch the latest quote (Bid/Ask/Spread) for a symbol.</p> <p>Real code refs:</p> <ul> <li>Account methods: <code>examples/mt4/MT4Account.go</code> (<code>Quote</code>)</li> <li>Example: <code>examples/mt4/MT4_service.go</code> (<code>ShowQuote</code>)</li> </ul>"},{"location":"Cookbook/Market_Info/GetQuote/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>Symbol exists and is visible in MT4 (Market Watch \u2192 Show All).</li> <li><code>config.json</code> has a valid <code>DefaultSymbol</code> or you specify a symbol manually.</li> </ul>"},{"location":"Cookbook/Market_Info/GetQuote/#2-request-one-quote","title":"\ud83d\udcdd 2) Request one quote","text":"<pre><code>q, err := account.Quote(ctx, symbol)\nif err != nil { return err }\n\nfmt.Printf(\"%s: Bid=%.5f Ask=%.5f Spread=%.1f pips Time=%s\\n\",\n    symbol,\n    q.GetBid(),\n    q.GetAsk(),\n    (q.GetAsk()-q.GetBid())/q.GetPoint(),\n    q.GetTime().AsTime().Format(time.RFC3339))\n</code></pre>"},{"location":"Cookbook/Market_Info/GetQuote/#3-inspect-fields","title":"\ud83d\udd0d 3) Inspect fields","text":"<p><code>q</code> (<code>*pb.Quote</code>) contains:</p> <ul> <li><code>Bid</code> \u2014 broker\u2019s buy price.</li> <li><code>Ask</code> \u2014 broker\u2019s sell price.</li> <li><code>Point</code> \u2014 10^-Digits (used to compute spread in points/pips).</li> <li><code>Digits</code> \u2014 precision for price rounding.</li> <li><code>Time</code> \u2014 server timestamp.</li> </ul>"},{"location":"Cookbook/Market_Info/GetQuote/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>symbol not found \u2192 check suffix (<code>EURUSD.m</code>, etc.) or ensure visible in MT4.</li> <li>timeout \u2192 wrap in <code>context.WithTimeout</code> (2\u20133s) and retry on transient errors only.</li> <li>spread mismatch \u2192 some brokers quote in fractional pips; always divide <code>(Ask-Bid)</code> by <code>Point</code>.</li> </ul>"},{"location":"Cookbook/Market_Info/GetQuote/#variations","title":"\ud83d\udd04 Variations","text":"<ul> <li>Default symbol from config:</li> </ul> <pre><code>sym := cfg.DefaultSymbol\nq, _ := account.Quote(ctx, sym)\n</code></pre> <ul> <li>Loop for multiple quotes: see <code>GetMultipleQuotes.md</code> recipe.</li> <li>Subscribe stream: see <code>StreamQuotes.md</code> recipe.</li> </ul>"},{"location":"Cookbook/Market_Info/GetQuote/#see-also","title":"\ud83d\udcce See also","text":"<ul> <li><code>GetMultipleQuotes.md</code> \u2014 batch query for multiple symbols.</li> <li><code>StreamQuotes.md</code> \u2014 live stream of quotes.</li> <li><code>SymbolParams.md</code> \u2014 detailed info about Digits/LotStep/MinLot.</li> </ul>"},{"location":"Cookbook/Market_Info/QuoteHistory/","title":"\ud83d\udd70\ufe0f QuoteHistory (GoMT4)","text":"<p>Goal: load historical quotes (Bid/Ask with timestamps) for a symbol in a given time range \u2014 with safe batching for long periods.</p> <p>Real code refs in this repo:</p> <ul> <li>Market info demo: <code>examples/mt4/MT4_service.go</code> (see ShowQuoteHistory flow)</li> <li>Account layer: <code>examples/mt4/MT4Account.go</code> (history wrapper &amp; helpers)</li> </ul>"},{"location":"Cookbook/Market_Info/QuoteHistory/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>MT4 terminal is connected and the symbol is visible in Market Watch.</li> <li><code>config.json</code> contains a valid <code>DefaultSymbol</code> or you pass a symbol explicitly.</li> </ul>"},{"location":"Cookbook/Market_Info/QuoteHistory/#2-basic-request-last-n-days","title":"\ud83d\uddd3\ufe0f 2) Basic request (last N days)","text":"<pre><code>sym  := \"EURUSD\"\nfrom := timestamppb.New(time.Now().AddDate(0, 0, -7))\nto   := timestamppb.New(time.Now())\n\nhist, err := account.ShowQuoteHistory(ctx, sym, from, to)\nif err != nil { return err }\n\nfor _, q := range hist.GetQuotes() {\n    t := q.GetTime().AsTime().Format(time.RFC3339)\n    fmt.Printf(\"%s %s Bid=%.5f Ask=%.5f\\n\", sym, t, q.GetBid(), q.GetAsk())\n}\n</code></pre> <p>Mirrors the ShowQuoteHistory example flow in <code>MT4_service.go</code>.</p>"},{"location":"Cookbook/Market_Info/QuoteHistory/#3-batch-long-ranges-day-by-day","title":"\ud83d\udce6 3) Batch long ranges (day-by-day)","text":"<p>Large ranges can be heavy. Split by days (or hours) and append.</p> <pre><code>func LoadQuoteHistoryBatched(ctx context.Context, a *MT4Account, sym string, days int) ([]*pb.Quote, error) {\n    var out []*pb.Quote\n    end := time.Now()\n    start := end.AddDate(0, 0, -days)\n\n    for cur := start; cur.Before(end); cur = cur.AddDate(0, 0, 1) {\n        from := timestamppb.New(cur)\n        to   := timestamppb.New(cur.AddDate(0, 0, 1))\n        h, err := a.ShowQuoteHistory(ctx, sym, from, to)\n        if err != nil { return nil, err }\n        out = append(out, h.GetQuotes()...)\n        // Be gentle with terminal\n        if err := waitWithCtx(ctx, 150*time.Millisecond); err != nil { return nil, err }\n    }\n    return out, nil\n}\n</code></pre>"},{"location":"Cookbook/Market_Info/QuoteHistory/#4-validate-compute-spread-pips","title":"\ud83e\uddea 4) Validate &amp; compute spread (pips)","text":"<pre><code>for _, q := range quotes {\n    if q.GetAsk() &lt;= 0 || q.GetBid() &lt;= 0 { continue }\n    spreadPips := (q.GetAsk() - q.GetBid()) / q.GetPoint()\n    if spreadPips &gt; 50 { // sanity check\n        log.Printf(\"wide spread @ %s: %.1f pips\", q.GetTime().AsTime(), spreadPips)\n    }\n}\n</code></pre>"},{"location":"Cookbook/Market_Info/QuoteHistory/#5-export-to-csv","title":"\ud83d\udce4 5) Export to CSV","text":"<pre><code>func SaveQuotesCSV(path, symbol string, quotes []*pb.Quote) error {\n    f, err := os.Create(path)\n    if err != nil { return err }\n    defer f.Close()\n    w := csv.NewWriter(f)\n    defer w.Flush()\n\n    _ = w.Write([]string{\"time\",\"symbol\",\"bid\",\"ask\",\"spread_pips\"})\n    for _, q := range quotes {\n        spread := (q.GetAsk() - q.GetBid()) / q.GetPoint()\n        _ = w.Write([]string{\n            q.GetTime().AsTime().Format(time.RFC3339),\n            symbol,\n            fmt.Sprintf(\"%.5f\", q.GetBid()),\n            fmt.Sprintf(\"%.5f\", q.GetAsk()),\n            fmt.Sprintf(\"%.1f\", spread),\n        })\n    }\n    return w.Error()\n}\n</code></pre>"},{"location":"Cookbook/Market_Info/QuoteHistory/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Empty result \u2192 MT4 hasn\u2019t downloaded that range yet; open the symbol chart to force data load.</li> <li>Timezones \u2192 MT4 server time may differ from local; always log with <code>time.RFC3339</code>.</li> <li>Too big queries \u2192 prefer batching; add tiny sleeps between requests.</li> <li>Context &amp; retries \u2192 wrap with short timeout (3\u20136s) and retry only transport errors (see Reliability).</li> </ul>"},{"location":"Cookbook/Market_Info/QuoteHistory/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>GetQuote.md</code> \u2014 one\u2011shot live quote.</li> <li><code>StreamQuotes.md</code> \u2014 continuous updates.</li> <li><code>HistoryOrders.md</code> \u2014 account history records.</li> </ul>"},{"location":"Cookbook/Market_Info/StreamQuotes/","title":"\ud83d\udce1 StreamQuotes (GoMT4)","text":"<p>Goal: subscribe to live quotes for one or many symbols with auto\u2011reconnect and clean cancellation.</p> <p>Real code refs:</p> <ul> <li>Streaming helpers: <code>examples/mt4/MT4Account.go</code> (e.g., <code>OnSymbolTick</code> / stream wrapper)</li> <li>Demo usage: <code>examples/mt4/MT4_service.go</code> (see <code>StreamQuotes</code> flow)</li> </ul>"},{"location":"Cookbook/Market_Info/StreamQuotes/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>MT4 terminal is connected and symbols are visible in Market Watch.</li> <li>You have a parent <code>ctx</code> to control lifetime.</li> </ul>"},{"location":"Cookbook/Market_Info/StreamQuotes/#2-subscribe-to-symbols","title":"\u25b6\ufe0f 2) Subscribe to symbols","text":"<pre><code>ctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nsymbols := []string{\"EURUSD\", \"GBPUSD\"}\n\n// Helper starts a stream and returns two channels:\n//   dataCh: ticks\n//   errCh : terminal errors (non\u2011recoverable)\ndataCh, errCh := account.OnSymbolTick(ctx, symbols)\n\nfor {\n    select {\n    case &lt;-ctx.Done():\n        return // stop gracefully\n    case err := &lt;-errCh:\n        if err != nil {\n            log.Printf(\"stream stopped: %v\", err)\n            return\n        }\n    case t := &lt;-dataCh:\n        fmt.Printf(\"%s Bid=%.5f Ask=%.5f @ %s\\n\",\n            t.GetSymbol(), t.GetBid(), t.GetAsk(), t.GetTime().AsTime().Format(time.RFC3339))\n    }\n}\n</code></pre> <p>Under the hood the helper auto\u2011reconnects on <code>io.EOF</code> / <code>codes.Unavailable</code> using backoff+jitter from <code>MT4Account.go</code>.</p>"},{"location":"Cookbook/Market_Info/StreamQuotes/#3-backoff-health-checks","title":"\ud83e\udded 3) Backoff &amp; health checks","text":"<ul> <li>Reconnects use exponential backoff with jitter (see constants in <code>MT4Account.go</code>).</li> <li>A short health\u2011check (e.g., <code>AccountSummary</code> with 3s timeout) can be run after initial connect to ensure MT4 is ready.</li> </ul>"},{"location":"Cookbook/Market_Info/StreamQuotes/#4-processing-tips","title":"\ud83e\uddf0 4) Processing tips","text":"<ul> <li>Keep the loop non\u2011blocking: if you do heavy work (DB, strategy), hand off ticks into a buffered channel/worker.</li> <li>Log spread in pips: <code>(Ask-Bid)/Point</code> to catch broker anomalies.</li> <li>If you need OHLC bars, aggregate incoming ticks by timeframe on your side.</li> </ul>"},{"location":"Cookbook/Market_Info/StreamQuotes/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>No reads \u2192 if you stop reading <code>dataCh</code>, producer back\u2011pressure can stall the stream.</li> <li>Hidden symbol \u2192 ensure symbol is visible; suffixes like <code>EURUSD.m</code> are different instruments.</li> <li>Context canceled \u2192 stream ends; always watch <code>&lt;-ctx.Done()&gt;</code>.</li> <li>Network flaps \u2192 tune <code>backoffBase</code>/<code>backoffMax</code> (Reliability chapter).</li> </ul>"},{"location":"Cookbook/Market_Info/StreamQuotes/#variations","title":"\ud83d\udd04 Variations","text":"<ul> <li>Single symbol: pass <code>[]string{\"EURUSD\"}</code>.</li> <li>Dynamic subscribe: keep a registry and restart the stream with a new symbol set when needed.</li> <li>Parallel consumers: fan\u2011out ticks to multiple goroutines via a broadcast channel.</li> </ul>"},{"location":"Cookbook/Market_Info/StreamQuotes/#see-also","title":"\ud83d\udcce See also","text":"<ul> <li><code>GetQuote.md</code> \u2014 one\u2011shot quote.</li> <li><code>GetMultipleQuotes.md</code> \u2014 batch fetch.</li> <li><code>Reliability (en)</code> \u2014 timeouts, reconnects, backoff.</li> </ul>"},{"location":"Cookbook/Market_Info/SymbolParams/","title":"\ud83e\udde9 SymbolParams (GoMT4)","text":"<p>Goal: read symbol parameters (Digits, Point, LotStep, Min/Max lot, Stops/Freeze levels, etc.) and use them for rounding &amp; validations.</p> <p>Real code refs:</p> <ul> <li>Account: <code>examples/mt4/MT4Account.go</code> (<code>SymbolParams</code>)</li> <li>Demo: <code>examples/mt4/MT4_service.go</code> (see ShowSymbolParams flow)</li> </ul>"},{"location":"Cookbook/Market_Info/SymbolParams/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>Symbol exists and is visible in MT4 (Market Watch \u2192 Show All).</li> <li><code>config.json</code> has a known default symbol or you pass one explicitly.</li> </ul>"},{"location":"Cookbook/Market_Info/SymbolParams/#2-read-params","title":"\ud83d\udd0e 2) Read params","text":"<pre><code>p, err := account.SymbolParams(ctx, symbol)\nif err != nil { return err }\n\nfmt.Printf(\"%s: Digits=%d Point=%.10f LotStep=%.2f MinLot=%.2f MaxLot=%.2f\\n\",\n    symbol,\n    p.GetDigits(),\n    p.GetPoint(),\n    p.GetVolumeStep(),\n    p.GetVolumeMin(),\n    p.GetVolumeMax(),\n)\nfmt.Printf(\"StopsLevel=%d FreezeLevel=%d ContractSize=%.2f\\n\",\n    p.GetStopsLevel(), p.GetFreezeLevel(), p.GetContractSize(),\n)\n</code></pre> <p>Common fields:</p> <ul> <li><code>Digits</code> \u2014the number of decimal places in the price.</li> <li><code>Point</code> \u2014 the tick value (usually `10^-Digits').</li> <li><code>VolumeStep</code> \u2014 the volume step in lots.</li> <li><code>VolumeMin</code>/<code>VolumeMax</code> \u2014 acceptable volume range.</li> <li><code>StopsLevel</code> \u2014 minimum distance (in points) for SL/TP/postponement from the current price.</li> <li><code>FreezeLevel</code> \u2014 the area around the current price, where modification/removal of the ban may be limited.</li> <li><code>ContractSize</code> \u2014 the size of the contract (for calculating the cost of the item).</li> </ul>"},{"location":"Cookbook/Market_Info/SymbolParams/#3-helpers-rounding-by-params","title":"\ud83e\uddee 3) Helpers: rounding by params","text":"<pre><code>func alignVolume(v, step, min, max float64) float64 {\n    if step &lt;= 0 { return v }\n    v = math.Floor(v/step+0.5) * step\n    if v &lt; min { v = min }\n    if v &gt; max { v = max }\n    return v\n}\n\nfunc roundPrice(p float64, digits int) float64 {\n    mul := math.Pow10(digits)\n    return math.Round(p*mul) / mul\n}\n</code></pre> <p>Usage:</p> <pre><code>vol := alignVolume(0.13, p.GetVolumeStep(), p.GetVolumeMin(), p.GetVolumeMax())\nprice := roundPrice(1.092345, int(p.GetDigits()))\n</code></pre>"},{"location":"Cookbook/Market_Info/SymbolParams/#4-validate-sltp-and-pending-price","title":"\ud83d\udee1\ufe0f 4) Validate SL/TP and pending price","text":"<pre><code>// Distance in points from current price (Bid for SELL, Ask for BUY)\nq, _ := account.Quote(ctx, symbol)\n\nentry := q.GetAsk() // for BUY; use Bid for SELL\npoint := p.GetPoint()\n\n// Desired SL/TP distances (points)\nslDist := 20.0\ntpDist := 40.0\n\nsl := roundPrice(entry - slDist*point, int(p.GetDigits()))\ntp := roundPrice(entry + tpDist*point, int(p.GetDigits()))\n\n// Respect StopsLevel\nif slDist &lt; float64(p.GetStopsLevel()) || tpDist &lt; float64(p.GetStopsLevel()) {\n    return fmt.Errorf(\"SL/TP too close: StopsLevel=%d\", p.GetStopsLevel())\n}\n</code></pre> <p>For pending orders:</p> <pre><code>pendingPrice := roundPrice(entry - 10*point, int(p.GetDigits())) // e.g., Buy Limit\nif math.Abs((entry - pendingPrice)/point) &lt; float64(p.GetStopsLevel()) {\n    return fmt.Errorf(\"pending too close to market: StopsLevel=%d\", p.GetStopsLevel())\n}\n</code></pre>"},{"location":"Cookbook/Market_Info/SymbolParams/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Wrong precision \u2192 always round prices to <code>Digits</code> and volumes to <code>VolumeStep</code>.</li> <li>Too close SL/TP \u2192 compare distances in points with <code>StopsLevel</code>.</li> <li>FreezeLevel \u2192 The broker may prohibit modifications close to the price; try a little further from the market.</li> <li>Suffix mismatch \u2192 <code>EURUSD</code> vs <code>EURUSD.m</code> \u2014 different tools.</li> </ul>"},{"location":"Cookbook/Market_Info/SymbolParams/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>RoundVolumePrice.md</code> \u2014 rendered helpers for rounding.</li> <li><code>PlaceMarketOrder.md</code> / <code>PlacePendingOrder.md</code> \u2014 using Digits/LotStep/StopsLevel in orders.</li> <li><code>GetQuote.md</code> \u2014 get the current price for calculations.</li> </ul>"},{"location":"Cookbook/Orders/CloseByOrders/","title":"\ud83d\udd01 CloseByOrders (GoMT4)","text":"<p>Goal: close two opposite positions of the same symbol against each other (MT4 \"Close By\").</p> <p>Real code refs (by convention in this repo):</p> <ul> <li>Account methods: <code>examples/mt4/MT4Account.go</code> (e.g., <code>OrderCloseBy</code>)</li> <li>Example: <code>examples/mt4/MT4_service.go</code> (<code>ShowOrderCloseByExample</code>)</li> </ul>"},{"location":"Cookbook/Orders/CloseByOrders/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>Both orders are open and belong to the same symbol (e.g., <code>EURUSD</code>).</li> <li>Orders are of opposite types: one BUY, one SELL.</li> <li>Broker allows hedging (MT4 usually does; on netting accounts this may be unavailable).</li> </ul> <p>Notes about volume:</p> <ul> <li>If volumes equal \u2192 both positions are fully closed.</li> <li>If volumes differ \u2192 the smaller volume is closed out; the remainder stays open with reduced volume.</li> </ul>"},{"location":"Cookbook/Orders/CloseByOrders/#2-find-a-pair-to-close-by","title":"\ud83d\udd0d 2) Find a pair to close-by","text":"<pre><code>// Find an opposite order for the same symbol.\nfunc pickCloseByPair(ctx context.Context, a *MT4Account, sym string) (buy, sell *pb.Order, err error) {\n    opened, err := a.ShowOpenedOrders(ctx)\n    if err != nil { return nil, nil, err }\n    for _, o := range opened.GetOrders() {\n        if o.GetSymbol() != sym { continue }\n        switch o.GetType() {\n        case pb.OrderType_OP_BUY:\n            if buy == nil { buy = o }\n        case pb.OrderType_OP_SELL:\n            if sell == nil { sell = o }\n        }\n        if buy != nil &amp;&amp; sell != nil { break }\n    }\n    if buy == nil || sell == nil {\n        return nil, nil, fmt.Errorf(\"no opposite pair for %s\", sym)\n    }\n    return buy, sell, nil\n}\n</code></pre> <p>You can refine selection by <code>MagicNumber</code>, <code>Comment</code>, or minimal slippage tolerance.</p>"},{"location":"Cookbook/Orders/CloseByOrders/#3-prepare-params","title":"\u2699\ufe0f 3) Prepare params","text":"<pre><code>buy, sell, err := pickCloseByPair(ctx, account, symbol)\nif err != nil { return err }\n\n// Optional: choose which ticket goes first (source vs. target)\nsrc := buy.GetTicket()  // any order can be src\ndst := sell.GetTicket() // the other one is dst\n\nslippage := int32(5) // points (broker-dependent)\n</code></pre>"},{"location":"Cookbook/Orders/CloseByOrders/#4-call-ordercloseby","title":"\ud83d\udcdd 4) Call <code>OrderCloseBy</code>","text":"<pre><code>resp, err := account.OrderCloseBy(\n    ctx,\n    src,\n    dst,\n    &amp;slippage,\n)\nif err != nil {\n    return fmt.Errorf(\"close-by failed: %w\", err)\n}\nfmt.Printf(\"\u2705 CloseBy done: src=%d dst=%d result=%s time=%s\\n\",\n    src, dst, resp.GetResult().String(), time.Now().Format(time.RFC3339))\n</code></pre> <p>If lots differ, the smaller lot is matched and closed; the remainder of the larger position stays open (volume reduced). Handle that in your post\u2011logic if you want to loop and fully flatten.</p>"},{"location":"Cookbook/Orders/CloseByOrders/#5-full-flatten-loop-if-volumes-differ","title":"\ud83d\udd04 5) Full flatten loop (if volumes differ)","text":"<pre><code>func closeByAll(ctx context.Context, a *MT4Account, sym string, slip int32) error {\n    for {\n        buy, sell, err := pickCloseByPair(ctx, a, sym)\n        if err != nil { return nil } // nothing more to pair\n        _, err = a.OrderCloseBy(ctx, buy.GetTicket(), sell.GetTicket(), &amp;slip)\n        if err != nil { return err }\n        // loop continues until no opposite pair remains\n    }\n}\n</code></pre>"},{"location":"Cookbook/Orders/CloseByOrders/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Different symbols/suffixes \u2192 <code>EURUSD</code> vs <code>EURUSD.m</code> are not the same.</li> <li>Same direction \u2192 Buy+Buy or Sell+Sell cannot be closed by.</li> <li>Netting account \u2192 feature may be unavailable; use <code>OrderClose</code> instead.</li> <li>Freeze/Stops level \u2192 some brokers restrict actions near price; CloseBy usually ignores price, but slippage rules may still apply.</li> <li>Timeouts \u2192 wrap in <code>context.WithTimeout</code> (3\u20138s) and retry only transport errors.</li> </ul>"},{"location":"Cookbook/Orders/CloseByOrders/#see-also","title":"\ud83d\udcce See also","text":"<ul> <li><code>CloseOrder.md</code> \u2014 standard market close.</li> <li><code>ModifyOrder.md</code> \u2014 adjust SL/TP.</li> <li><code>HistoryOrders.md</code> \u2014 verify results in account history.</li> </ul>"},{"location":"Cookbook/Orders/CloseOrder/","title":"\u274c CloseOrder (GoMT4)","text":"<p>Goal: correctly close an open market order (BUY/SELL) with retry logic and proper rounding.</p> <p>Real code refs:</p> <ul> <li>Account methods: <code>examples/mt4/MT4Account.go</code> (<code>OrderClose</code>)</li> <li>Example: <code>examples/mt4/MT4_service.go</code> (<code>ShowOrderCloseExample</code>)</li> </ul>"},{"location":"Cookbook/Orders/CloseOrder/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>You know the ticket of the order you want to close.</li> <li>The order is open (check via <code>ShowOpenedOrders</code> or similar).</li> <li>MT4 terminal is running &amp; connected.</li> </ul>"},{"location":"Cookbook/Orders/CloseOrder/#2-get-order-quote","title":"\ud83d\udd0d 2) Get order &amp; quote","text":"<pre><code>ord, err := account.OrderByTicket(ctx, ticket)\nif err != nil { return err }\n\nq, err := account.Quote(ctx, ord.GetSymbol())\nif err != nil { return err }\n</code></pre>"},{"location":"Cookbook/Orders/CloseOrder/#3-prepare-close-params","title":"\u2699\ufe0f 3) Prepare close params","text":"<ul> <li>Use Bid to close a BUY.</li> <li>Use Ask to close a SELL.</li> <li>Round price to <code>Digits</code>.</li> </ul> <pre><code>info, _ := account.SymbolParams(ctx, ord.GetSymbol())\ndigits := int(info.GetDigits())\n\nvar closePrice float64\nif ord.GetType() == pb.OrderType_OP_BUY {\n    closePrice = roundPrice(q.GetBid(), digits)\n} else if ord.GetType() == pb.OrderType_OP_SELL {\n    closePrice = roundPrice(q.GetAsk(), digits)\n}\n\nslippage := int32(5)\n</code></pre>"},{"location":"Cookbook/Orders/CloseOrder/#4-call-orderclose","title":"\ud83d\udcdd 4) Call <code>OrderClose</code>","text":"<pre><code>resp, err := account.OrderClose(\n    ctx,\n    ticket,\n    ord.GetVolume(),\n    &amp;closePrice,\n    &amp;slippage,\n)\nif err != nil {\n    return fmt.Errorf(\"close failed: %w\", err)\n}\nfmt.Printf(\"\u2705 Closed ticket=%d at price=%.5f time=%s\\n\",\n    ticket, resp.GetPrice(), resp.GetCloseTime().AsTime())\n</code></pre>"},{"location":"Cookbook/Orders/CloseOrder/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Invalid price \u2192 always round to <code>Digits</code>.</li> <li>Wrong side \u2192 BUY closes at Bid, SELL closes at Ask.</li> <li>Partial close \u2192 adjust <code>volume</code> parameter if closing partially.</li> <li>Timeout \u2192 wrap in <code>context.WithTimeout(ctx, 5*time.Second)</code>.</li> <li>Retries \u2192 transport errors auto\u2011retried inside helper.</li> </ul>"},{"location":"Cookbook/Orders/CloseOrder/#variations","title":"\ud83d\udd04 Variations","text":"<ul> <li>Partial close: send smaller volume than <code>ord.GetVolume()</code>.</li> <li>Loop over all open orders: call <code>ShowOpenedOrders</code> \u2192 close each.</li> <li>Close by order: see <code>CloseByOrders.md</code> recipe.</li> </ul>"},{"location":"Cookbook/Orders/CloseOrder/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>ModifyOrder.md</code> \u2014 adjust SL/TP instead of closing.</li> <li><code>DeletePending.md</code> \u2014 remove a pending order.</li> <li><code>HistoryOrders.md</code> \u2014 verify closed orders in history.</li> </ul>"},{"location":"Cookbook/Orders/DeletePending/","title":"\ud83d\uddd1\ufe0f DeletePending (GoMT4)","text":"<p>Goal: safely delete a pending order (Buy/Sell Limit/Stop) by ticket, with small sanity checks.</p> <p>Real code refs:</p> <ul> <li>Account methods: <code>examples/mt4/MT4Account.go</code> (e.g., <code>OrderDelete</code>, <code>OrderByTicket</code>, <code>ShowOpenedOrders</code>)</li> <li>Example: <code>examples/mt4/MT4_service.go</code> (<code>ShowOrderDeleteExample</code>)</li> </ul>"},{"location":"Cookbook/Orders/DeletePending/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>You have the ticket of a pending order (not a market position).</li> <li>MT4 terminal is running &amp; connected.</li> <li>Symbol is visible in MT4 (helps avoid \u201csymbol not found\u201d edge cases).</li> </ul>"},{"location":"Cookbook/Orders/DeletePending/#2-locate-and-verify-the-order-optional-but-safer","title":"\ud83d\udd0e 2) Locate and verify the order (optional but safer)","text":"<pre><code>ord, err := account.OrderByTicket(ctx, ticket)\nif err != nil { return err }\n\nswitch ord.GetType() {\ncase pb.OrderType_OP_BUYLIMIT, pb.OrderType_OP_SELLLIMIT,\n     pb.OrderType_OP_BUYSTOP,  pb.OrderType_OP_SELLSTOP:\n    // ok, this is a pending order\ndefault:\n    return fmt.Errorf(\"ticket %d is not a pending order (type=%s)\", ticket, ord.GetType())\n}\n</code></pre>"},{"location":"Cookbook/Orders/DeletePending/#3-prepare-params","title":"\ud83e\uddf0 3) Prepare params","text":"<p>Some brokers still check slippage field (points) even for delete; keep a small value for consistency.</p> <pre><code>slippage := int32(5) // points\n</code></pre>"},{"location":"Cookbook/Orders/DeletePending/#4-call-orderdelete","title":"\ud83d\uddd1\ufe0f 4) Call <code>OrderDelete</code>","text":"<pre><code>resp, err := account.OrderDelete(\n    ctx,\n    ticket,\n    &amp;slippage, // optional; broker-dependent\n)\nif err != nil {\n    return fmt.Errorf(\"delete pending failed: %w\", err)\n}\nfmt.Printf(\"\u2705 Pending deleted: ticket=%d symbol=%s time=%s\\n\",\n    ticket, ord.GetSymbol(), time.Now().Format(time.RFC3339))\n</code></pre> <p>Internally, the account helper wraps retries on transient transport errors (<code>codes.Unavailable</code>).</p>"},{"location":"Cookbook/Orders/DeletePending/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Not a pending \u2192 <code>OrderDelete</code> works only for pending orders; for market positions use <code>OrderClose</code>.</li> <li>Ticket not found \u2192 it may have been executed or canceled already; refresh open orders and history.</li> <li>Freeze level \u2192 some brokers restrict actions near market price; try again later or move price (modify) before delete.</li> <li>Timeouts \u2192 wrap in <code>context.WithTimeout</code> (3\u20136s) and retry only transport errors.</li> </ul>"},{"location":"Cookbook/Orders/DeletePending/#variations","title":"\ud83d\udd04 Variations","text":"<ul> <li>Bulk delete all pendings on a symbol:</li> </ul> <pre><code>opened, err := account.ShowOpenedOrders(ctx)\nif err != nil { return err }\nfor _, o := range opened.GetOrders() {\n    if o.GetSymbol() != symbol { continue }\n    switch o.GetType() {\n    case pb.OrderType_OP_BUYLIMIT, pb.OrderType_OP_SELLLIMIT,\n         pb.OrderType_OP_BUYSTOP,  pb.OrderType_OP_SELLSTOP:\n        if _, err := account.OrderDelete(ctx, o.GetTicket(), &amp;slippage); err != nil {\n            log.Printf(\"delete %d failed: %v\", o.GetTicket(), err)\n        }\n    }\n}\n</code></pre> <ul> <li>Conditional cleanup (good\u2011till\u2011time): if <code>ord.GetExpiration().AsTime().Before(time.Now())</code> \u2192 delete.</li> </ul>"},{"location":"Cookbook/Orders/DeletePending/#see-also","title":"\ud83d\udcce See also","text":"<ul> <li><code>PlacePendingOrder.md</code> \u2014 how to place a pending with correct price/expiry.</li> <li><code>ModifyOrder.md</code> \u2014 change pending price/expiration instead of deleting.</li> <li><code>CloseOrder.md</code> \u2014 for market positions.</li> </ul>"},{"location":"Cookbook/Orders/HistoryOrders/","title":"\ud83d\uddc2\ufe0f HistoryOrders (GoMT4)","text":"<p>Goal: load orders history for a time range (optionally filtered by symbol), with practical batching and export examples.</p> <p>Real code refs in this repo:</p> <ul> <li>Account methods: <code>examples/mt4/MT4Account.go</code> (e.g., <code>ShowOrdersHistory</code>, <code>OrdersHistoryRange</code>/similar)</li> <li>Example: <code>examples/mt4/MT4_service.go</code> (<code>ShowOrdersHistory</code> demo)</li> </ul>"},{"location":"Cookbook/Orders/HistoryOrders/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>MT4 terminal is connected and has the history for requested dates.</li> <li><code>config.json</code> is valid and <code>DefaultSymbol</code> exists.</li> </ul>"},{"location":"Cookbook/Orders/HistoryOrders/#2-basic-range-query-last-7-days","title":"\ud83d\uddd3\ufe0f 2) Basic range query (last 7 days)","text":"<pre><code>from := timestamppb.New(time.Now().AddDate(0, 0, -7))\nto   := timestamppb.New(time.Now())\n\nhist, err := account.ShowOrdersHistory(ctx, from, to, nil) // nil = all symbols\nif err != nil { return err }\n\nfor _, o := range hist.GetOrders() {\n    fmt.Printf(\"%s ticket=%d symbol=%s lots=%.2f profit=%.2f open=%s close=%s\\n\",\n        o.GetType().String(), o.GetTicket(), o.GetSymbol(), o.GetVolume(), o.GetProfit(),\n        o.GetOpenTime().AsTime().Format(time.RFC3339),\n        o.GetCloseTime().AsTime().Format(time.RFC3339))\n}\n</code></pre> <p>Most brokers keep limited local history by default. If you see too few rows, open the symbol chart in MT4 to force a deeper history download.</p>"},{"location":"Cookbook/Orders/HistoryOrders/#3-filter-by-symbol","title":"\ud83c\udfaf 3) Filter by symbol","text":"<pre><code>sym := ptr.String(\"EURUSD\")\nfrom := timestamppb.New(time.Now().AddDate(0, 0, -30))\nto   := timestamppb.New(time.Now())\n\nhist, err := account.ShowOrdersHistory(ctx, from, to, sym)\nif err != nil { return err }\n\nfmt.Printf(\"%d history orders for %s\\n\", len(hist.GetOrders()), *sym)\n</code></pre>"},{"location":"Cookbook/Orders/HistoryOrders/#4-batch-by-days-for-long-ranges","title":"\ud83d\udce6 4) Batch by days (for long ranges)","text":"<p>Long queries can be heavy and slow. Batch by day/week and append results.</p> <pre><code>func loadHistoryBatched(ctx context.Context, a *MT4Account, sym *string, days int) ([]*pb.Order, error) {\n    var out []*pb.Order\n    end := time.Now()\n    start := end.AddDate(0, 0, -days)\n\n    for cur := start; cur.Before(end); cur = cur.AddDate(0, 0, 1) {\n        from := timestamppb.New(cur)\n        to   := timestamppb.New(cur.AddDate(0, 0, 1))\n        h, err := a.ShowOrdersHistory(ctx, from, to, sym)\n        if err != nil { return nil, err }\n        out = append(out, h.GetOrders()...)\n        // small pause to be gentle with terminal\n        if err := waitWithCtx(ctx, 150*time.Millisecond); err != nil { return nil, err }\n    }\n    return out, nil\n}\n</code></pre>"},{"location":"Cookbook/Orders/HistoryOrders/#5-export-to-csv-quick-n-dirty","title":"\ud83d\udce4 5) Export to CSV (quick \u2018n\u2019 dirty)","text":"<pre><code>func saveCSV(path string, orders []*pb.Order) error {\n    f, err := os.Create(path)\n    if err != nil { return err }\n    defer f.Close()\n    w := csv.NewWriter(f)\n    defer w.Flush()\n\n    _ = w.Write([]string{\"ticket\",\"symbol\",\"type\",\"lots\",\"profit\",\"open\",\"close\"})\n    for _, o := range orders {\n        _ = w.Write([]string{\n            strconv.FormatInt(o.GetTicket(), 10),\n            o.GetSymbol(),\n            o.GetType().String(),\n            fmt.Sprintf(\"%.2f\", o.GetVolume()),\n            fmt.Sprintf(\"%.2f\", o.GetProfit()),\n            o.GetOpenTime().AsTime().Format(time.RFC3339),\n            o.GetCloseTime().AsTime().Format(time.RFC3339),\n        })\n    }\n    return w.Error()\n}\n</code></pre>"},{"location":"Cookbook/Orders/HistoryOrders/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Too few results \u2192 MT4 hasn\u2019t downloaded that range yet. Open the symbol chart or split the range into smaller chunks.</li> <li>Timezones \u2192 server time vs local time may differ; use <code>time.RFC3339</code> to avoid confusion.</li> <li>Performance \u2192 prefer batching for 30+ days ranges; add tiny sleeps between requests.</li> <li>Context \u2192 wrap calls with <code>context.WithTimeout</code> (3\u20136s) and retry only transport errors (see Reliability).</li> </ul>"},{"location":"Cookbook/Orders/HistoryOrders/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>CloseOrder.md</code> \u2014 verify closed positions appear in history.</li> <li><code>ModifyOrder.md</code> \u2014 changes in SL/TP reflected in history records.</li> <li><code>Reliability (en)</code> \u2014 timeouts, reconnects &amp; backoff patterns.</li> </ul>"},{"location":"Cookbook/Orders/ModifyOrder/","title":"\u270f\ufe0f ModifyOrder (GoMT4)","text":"<p>Goal: change SL/TP for market orders or price/expiration for pending orders \u2014 with proper rounding and validation.</p> <p>Real code references:</p> <ul> <li>Account methods: <code>examples/mt4/MT4Account.go</code> (e.g., <code>OrderModify</code>, <code>SymbolParams</code>)</li> <li>Example: <code>examples/mt4/MT4_service.go</code> (<code>ShowOrderModifyExample</code>)</li> </ul>"},{"location":"Cookbook/Orders/ModifyOrder/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>You know the ticket of the order you want to modify.</li> <li>Symbol is visible and parameters are known (Digits/LotStep/Frozen levels if applicable).</li> <li>For market orders: you can modify SL/TP only.</li> <li>For pending orders: you can modify price and expiration (and SL/TP too).</li> </ul>"},{"location":"Cookbook/Orders/ModifyOrder/#2-get-current-order-symbol-parameters","title":"\ud83d\udd0d 2) Get current order &amp; symbol parameters","text":"<pre><code>// 1) Read symbol params (for rounding)\ninfo, err := account.SymbolParams(ctx, symbol)\nif err != nil { return err }\ndigits := int(info.GetDigits())\npoint  := math.Pow10(-digits)\n\n// 2) (Optional) Read current order data to decide new SL/TP\nord, err := account.OrderByTicket(ctx, ticket)\nif err != nil { return err }\nside := ord.GetType() // BUY/SELL or pending types\n</code></pre>"},{"location":"Cookbook/Orders/ModifyOrder/#3-helpers-reuse","title":"\ud83e\uddee 3) Helpers (reuse)","text":"<pre><code>func roundPrice(p float64, digits int) float64 {\n    mul := math.Pow10(digits)\n    return math.Round(p*mul) / mul\n}\n</code></pre>"},{"location":"Cookbook/Orders/ModifyOrder/#4-modify-sltp-for-market-order","title":"\ud83d\udcdd 4) Modify SL/TP for market order","text":"<ul> <li>Compute SL/TP relative to current market price (Bid for SELL, Ask for BUY).</li> <li>Round to symbol <code>Digits</code>.</li> </ul> <pre><code>q, err := account.Quote(ctx, symbol)\nif err != nil { return err }\nvar sl, tp *float64\n\nswitch ord.GetType() {\ncase pb.OrderType_OP_BUY:\n    entry := q.GetAsk()\n    s := roundPrice(entry - 20*point, digits)\n    t := roundPrice(entry + 40*point, digits)\n    sl, tp = &amp;s, &amp;t\ncase pb.OrderType_OP_SELL:\n    entry := q.GetBid()\n    s := roundPrice(entry + 20*point, digits)\n    t := roundPrice(entry - 40*point, digits)\n    sl, tp = &amp;s, &amp;t\n}\n\nresp, err := account.OrderModify(\n    ctx,\n    ticket,\n    nil,      // price stays the same for market order\n    sl, tp,   // new SL/TP\n    nil,      // expiration (not used for market)\n)\nif err != nil {\n    return fmt.Errorf(\"modify failed: %w\", err)\n}\nfmt.Printf(\"\u2705 Modified SL/TP for ticket %d at %s\\n\", ticket, time.Now().Format(time.RFC3339))\n</code></pre>"},{"location":"Cookbook/Orders/ModifyOrder/#5-modify-pending-price-and-expiration","title":"\u23f0 5) Modify pending: price and expiration","text":"<ul> <li>For pendings, you can change the entry price and expiration.</li> <li>Ensure price is on the correct side of the market (e.g., Buy Limit &lt; Ask, Buy Stop &gt; Ask).</li> </ul> <pre><code>// New pending price\ndesired := 1.09500\nprice   := roundPrice(desired, digits)\n\n// Move expiry +12 hours\nexpiry := timestamppb.New(time.Now().Add(12 * time.Hour))\n\nresp, err := account.OrderModify(\n    ctx,\n    ticket,\n    &amp;price, // \u2b05\ufe0f new pending price\n    nil, nil,\n    expiry, // \u2b05\ufe0f new expiration\n)\nif err != nil {\n    return fmt.Errorf(\"modify pending failed: %w\", err)\n}\nfmt.Printf(\"\u2705 Pending modified! Ticket=%d NewPrice=%.5f NewExpiry=%s\\n\",\n    ticket, price, expiry.AsTime().Format(\"2006-01-02 15:04:05\"))\n</code></pre>"},{"location":"Cookbook/Orders/ModifyOrder/#pitfalls-checks","title":"\u26a0\ufe0f Pitfalls &amp; checks","text":"<ul> <li>Rounding: always round to <code>Digits</code> (SL/TP/price).</li> <li> <p>Side rules:</p> </li> <li> <p>Buy Limit &lt; current Ask, Sell Limit &gt; current Bid.</p> </li> <li>Buy Stop  &gt; current Ask, Sell Stop  &lt; current Bid.</li> <li>Freeze level: some brokers restrict how close to price you can modify. If you hit freeze, increase distance.</li> <li>Context timeouts: wrap modify calls with short timeout (3\u20138s). Retry only transport errors.</li> </ul>"},{"location":"Cookbook/Orders/ModifyOrder/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>CloseOrder.md</code> \u2014 how to close market orders safely.</li> <li><code>PlacePendingOrder.md</code> \u2014 how to place pending with correct price/expiry.</li> <li><code>RoundVolumePrice.md</code> \u2014 helpers for volume/price alignment.</li> </ul>"},{"location":"Cookbook/Orders/PlaceMarketOrder/","title":"PlaceMarketOrder (GoMT4)","text":"<p>Goal: open a market order safely (BUY/SELL) with proper rounding for volume and prices.</p> <p>This recipe references real code in this repo:</p> <ul> <li>Account methods: <code>examples/mt4/MT4Account.go</code> (<code>OrderSend</code>, <code>SymbolParams</code>)</li> <li>Service example: <code>examples/mt4/MT4_service.go</code> (<code>ShowOrderSendExample</code>)</li> <li>Config: <code>examples/config/config.json</code></li> </ul>"},{"location":"Cookbook/Orders/PlaceMarketOrder/#1-preconditions","title":"1) Preconditions","text":"<ul> <li>MT4 terminal is connected to the broker.</li> <li><code>examples/config/config.json</code> contains valid credentials and <code>DefaultSymbol</code>.</li> <li>Symbol is visible in MT4 Market Watch (or call your own <code>EnsureSymbolVisible</code>).</li> </ul>"},{"location":"Cookbook/Orders/PlaceMarketOrder/#2-read-symbol-parameters-digits-volume-limits","title":"2) Read symbol parameters (Digits, Volume limits)","text":"<pre><code>info, err := account.SymbolParams(ctx, symbol)\nif err != nil { return err }\n\ndigits    := int(info.GetDigits())\nvolMin    := info.GetVolumeMin()\nvolMax    := info.GetVolumeMax()\nvolStep   := info.GetVolumeStep()\npointSize := math.Pow10(-digits) // 10^-Digits\n</code></pre> <p>Why: exchanges/brokers require amount and price aligned to the symbol settings.</p>"},{"location":"Cookbook/Orders/PlaceMarketOrder/#3-helpers-align-volume-round-prices","title":"3) Helpers: align volume &amp; round prices","text":"<p>Put these small helpers next to your order code (or reuse existing ones).</p> <pre><code>func alignVolume(v, step, min, max float64) float64 {\n    if step &lt;= 0 { return v }\n    v = math.Floor(v/step+0.5) * step\n    if v &lt; min { v = min }\n    if v &gt; max { v = max }\n    return v\n}\n\nfunc roundPrice(p float64, digits int) float64 {\n    mul := math.Pow10(digits)\n    return math.Round(p*mul) / mul\n}\n</code></pre>"},{"location":"Cookbook/Orders/PlaceMarketOrder/#4-build-inputs-market-order","title":"4) Build inputs (market order)","text":"<ul> <li>For a market order, pass <code>price=nil</code> and set a small <code>slippage</code> (in points).</li> <li>Optionally pre\u2011compute SL/TP relative to current price.</li> </ul> <pre><code>side := pb.OrderSendOperationType_OC_OP_BUY // or OC_OP_SELL\nrawVolume := 0.10\nvolume    := alignVolume(rawVolume, volStep, volMin, volMax)\n\nvar price *float64 = nil\nslippage := int32(5) // 5 points\n\n// Optional SL/TP (rounded to Digits)\nvar sl, tp *float64\nif wantSLTP {\n    bidAsk, _ := account.Quote(ctx, symbol)\n    entry := bidAsk.GetAsk() // for BUY; for SELL use Bid\n    stop  := roundPrice(entry-20*pointSize, digits)\n    take  := roundPrice(entry+40*pointSize, digits)\n    sl, tp = &amp;stop, &amp;take\n}\n\ncomment     := \"Go order test\"\nmagicNumber := int32(123456)\n</code></pre>"},{"location":"Cookbook/Orders/PlaceMarketOrder/#5-send-the-order-with-retries-handled-inside","title":"5) Send the order (with retries handled inside)","text":"<p><code>OrderSend</code> already wraps gRPC with reconnect/retry (see <code>ExecuteWithReconnect</code>). You only supply clean inputs.</p> <pre><code>resp, err := account.OrderSend(\n    ctx,\n    symbol,\n    side,\n    volume,\n    price,             // nil for market\n    &amp;slippage,         // points\n    sl, tp,            // can be nil\n    &amp;comment,\n    &amp;magicNumber,\n    nil,               // expiration (for pending only)\n)\nif err != nil {\n    return fmt.Errorf(\"OrderSend failed: %w\", err)\n}\nfmt.Printf(\"\u2705 Order opened! Ticket=%d Price=%.5f Time=%s\\n\",\n    resp.GetTicket(), resp.GetPrice(), resp.GetOpenTime().AsTime().Format(\"2006-01-02 15:04:05\"))\n</code></pre> <p>See a minimal working example in <code>examples/mt4/MT4_service.go</code> \u2192 <code>ShowOrderSendExample</code> (uses small pointer helpers <code>ptrInt32</code>, <code>ptrString</code>).</p>"},{"location":"Cookbook/Orders/PlaceMarketOrder/#6-common-pitfalls","title":"6) Common pitfalls","text":"<ul> <li>Invalid volume/price \u2192 make sure to align volume to <code>VolumeStep</code> and round prices to <code>Digits</code>.</li> <li><code>symbol not found</code> / empty quotes \u2192 symbol hidden or broker suffix (e.g., <code>EURUSD.m</code>). Show all symbols in MT4.</li> <li><code>context deadline exceeded</code> \u2192 MT4 not ready; use short per\u2011call timeout and retry transport errors only (see Reliability chapter).</li> </ul>"},{"location":"Cookbook/Orders/PlaceMarketOrder/#7-variations","title":"7) Variations","text":"<ul> <li>SELL: use <code>pb.OrderSendOperationType_OC_OP_SELL</code> and entry price = <code>Bid</code> when computing SL/TP.</li> <li>Immediate TP/SL omitted: pass <code>nil</code> and modify later via <code>OrderModify</code>.</li> <li>Pending order: use the same call with <code>price!=nil</code> and <code>expiration!=nil</code> (see <code>PlacePendingOrder.md</code>).</li> </ul>"},{"location":"Cookbook/Orders/PlacePendingOrder/","title":"\ud83d\udccc PlacePendingOrder (GoMT4)","text":"<p>Goal: open a pending order (Buy Limit, Sell Limit, Buy Stop, Sell Stop) with proper rounding and expiration.</p> <p>Uses real code from this repo:</p> <ul> <li>Account: <code>examples/mt4/MT4Account.go</code> (<code>OrderSend</code>)</li> <li>Example: <code>examples/mt4/MT4_service.go</code> (<code>ShowOrderSendExample</code>)</li> </ul>"},{"location":"Cookbook/Orders/PlacePendingOrder/#1-preconditions","title":"\u2705 1) Preconditions","text":"<ul> <li>MT4 terminal is running &amp; connected to broker.</li> <li><code>config.json</code> filled with valid login/server/symbol.</li> <li>Symbol visible in MT4 Market Watch.</li> </ul>"},{"location":"Cookbook/Orders/PlacePendingOrder/#2-read-symbol-parameters","title":"\ud83d\udd0d 2) Read symbol parameters","text":"<pre><code>info, err := account.SymbolParams(ctx, symbol)\nif err != nil { return err }\n\ndigits    := int(info.GetDigits())\nvolStep   := info.GetVolumeStep()\nvolMin    := info.GetVolumeMin()\nvolMax    := info.GetVolumeMax()\npointSize := math.Pow10(-digits)\n</code></pre>"},{"location":"Cookbook/Orders/PlacePendingOrder/#3-align-helpers-same-as-market-order","title":"\u2699\ufe0f 3) Align helpers (same as market order)","text":"<pre><code>volume := alignVolume(rawVolume, volStep, volMin, volMax)\nprice  := roundPrice(desiredPrice, digits)\n</code></pre>"},{"location":"Cookbook/Orders/PlacePendingOrder/#4-build-inputs-example-buy-limit","title":"\ud83d\udcdd 4) Build inputs (example: Buy Limit)","text":"<pre><code>side    := pb.OrderSendOperationType_OC_OP_BUYLIMIT\nvolume  := alignVolume(0.10, volStep, volMin, volMax)\nprice   := roundPrice(1.09500, digits) // target entry price\n\nslippage := int32(5) // still required but ignored for pending\n\n// Optional SL/TP\noffset := 20 * pointSize\nstop   := roundPrice(price-offset, digits)\ntake   := roundPrice(price+2*offset, digits)\n\n// Expiration (good for 1 day)\nexpiry := timestamppb.New(time.Now().Add(24 * time.Hour))\n\ncomment     := \"Go pending order\"\nmagicNumber := int32(123456)\n\nresp, err := account.OrderSend(\n    ctx,\n    symbol,\n    side,\n    volume,\n    &amp;price,          // required for pending\n    &amp;slippage,\n    &amp;stop, &amp;take,    // can be nil\n    &amp;comment,\n    &amp;magicNumber,\n    expiry,          // \u2b05\ufe0f required for pending expiration\n)\n</code></pre>"},{"location":"Cookbook/Orders/PlacePendingOrder/#5-result","title":"\ud83d\udcca 5) Result","text":"<pre><code>fmt.Printf(\"\u2705 Pending order placed! Ticket=%d Type=%s Price=%.5f Expires=%s\\n\",\n    resp.GetTicket(), resp.GetType().String(), resp.GetPrice(), resp.GetExpiration().AsTime())\n</code></pre>"},{"location":"Cookbook/Orders/PlacePendingOrder/#common-pitfalls","title":"\u26a0\ufe0f Common pitfalls","text":"<ul> <li>No expiration \u2192 broker may reject if you omit expiry for pending.</li> <li>Invalid price \u2192 must be correctly rounded and on the correct side (e.g., Buy Limit &lt; current Ask).</li> <li>Suffix mismatch \u2192 always check actual symbol name in MT4.</li> </ul>"},{"location":"Cookbook/Orders/PlacePendingOrder/#variations","title":"\ud83d\udd04 Variations","text":"<ul> <li><code>OC_OP_SELLLIMIT</code>, <code>OC_OP_BUYSTOP</code>, <code>OC_OP_SELLSTOP</code> \u2192 change <code>side</code>.</li> <li><code>expiry=nil</code> \u2192 pending order is good\u2011till\u2011cancelled (if broker allows).</li> <li>Place multiple pendings in loop (just vary <code>price</code> and <code>comment</code>).</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/","title":"\ud83d\udd01 HandleReconnect (GoMT4)","text":"<p>Goal: robust reconnects for unary and streaming RPCs using the helpers already present in this repo.</p> <p>Real code refs:</p> <ul> <li>Backoff &amp; helpers: <code>examples/mt4/MT4Account.go</code> (<code>backoffDelay</code>, <code>waitWithCtx</code>, <code>maxRetries</code>, etc.)</li> <li>Unary pattern: <code>examples/mt4/MT4Account.go</code> (retry on <code>codes.Unavailable</code>)</li> <li>Streams: <code>OnSymbolTick</code>, <code>OnOpenedOrdersProfit</code> wrappers</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/#1-principles","title":"\u2705 1) Principles","text":"<ul> <li>Retry only transient transport errors: <code>codes.Unavailable</code>, <code>io.EOF</code>.</li> <li>Respect context (timeouts/cancel) to avoid leaks.</li> <li>Use exponential backoff + jitter (central constants in <code>MT4Account.go</code>).</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/#2-unary-rpc-with-built-in-retry-pattern","title":"\ud83d\udd39 2) Unary RPC with built-in retry (pattern)","text":"<p>Most account methods already follow this template: try \u2192 on <code>Unavailable</code> wait <code>backoffDelay(attempt)</code> \u2192 retry.</p> <pre><code>func (a *MT4Account) callWithRetry(ctx context.Context, fn func(context.Context) error) error {\n    var last error\n    for attempt := 0; attempt &lt; maxRetries; attempt++ {\n        if err := fn(ctx); err != nil {\n            st, ok := status.FromError(err)\n            if ok &amp;&amp; st.Code() == codes.Unavailable {\n                // transient transport \u2192 backoff, then retry\n                if err := waitWithCtx(ctx, backoffDelay(attempt)); err != nil { return err }\n                last = err\n                continue\n            }\n            return err // non-transient \u2192 bubble up\n        }\n        return nil // success\n    }\n    return fmt.Errorf(\"max retries reached: %w\", last)\n}\n</code></pre> <p>Usage (example: health-check AccountSummary):</p> <pre><code>hctx, cancel := context.WithTimeout(ctx, 3*time.Second)\ndefer cancel()\nerr := a.callWithRetry(hctx, func(c context.Context) error {\n    _, err := a.AccountSummary(c)\n    return err\n})\nif err != nil { return err }\n</code></pre> <p>The same pattern is used internally by methods like <code>OrderSend</code>, <code>Quote</code>, etc., in your account layer.</p>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/#3-streaming-reconnect-loop-structure","title":"\ud83d\udd38 3) Streaming reconnect loop (structure)","text":"<p>Your stream helpers (<code>OnSymbolTick</code>, <code>OnOpenedOrdersProfit</code>) already encapsulate the reconnect loop. The core logic looks like this:</p> <pre><code>func (a *MT4Account) runStreamWithReconnect(ctx context.Context, start func(context.Context) (recv func() (*pb.Tick, error), close func() error, err error),\n) (&lt;-chan *pb.Tick, &lt;-chan error) {\n    dataCh := make(chan *pb.Tick, 1024)\n    errCh  := make(chan error, 1)\n\n    go func() {\n        defer close(dataCh)\n        defer close(errCh)\n\n        for attempt := 0; attempt &lt; maxRetries; attempt++ {\n            // (re)open stream\n            recv, closeFn, err := start(ctx)\n            if err != nil {\n                // cannot open \u2192 transient?\n                if st, ok := status.FromError(err); ok &amp;&amp; st.Code() == codes.Unavailable {\n                    if err := waitWithCtx(ctx, backoffDelay(attempt)); err != nil { errCh &lt;- err; return }\n                    continue\n                }\n                errCh &lt;- err; return\n            }\n\n            // receive loop\n            for {\n                msg, err := recv()\n                if err == nil {\n                    select {\n                    case dataCh &lt;- msg:\n                    case &lt;-ctx.Done(): _ = closeFn(); return\n                    }\n                    continue\n                }\n                // stream error \u2192 decide if reconnect\n                if err == io.EOF {\n                    // server closed \u2192 reconnect with backoff\n                } else if st, ok := status.FromError(err); ok &amp;&amp; st.Code() == codes.Unavailable {\n                    // transient transport \u2192 reconnect\n                } else {\n                    // permanent\n                    _ = closeFn(); errCh &lt;- err; return\n                }\n                _ = closeFn()\n                if err := waitWithCtx(ctx, backoffDelay(attempt)); err != nil { errCh &lt;- err; return }\n                break // out to reopen\n            }\n        }\n        errCh &lt;- fmt.Errorf(\"max stream retries reached\")\n    }()\n\n    return dataCh, errCh\n}\n</code></pre> <p>In your repo, this logic is packaged in concrete helpers: <code>OnSymbolTick(ctx, symbols)</code>, <code>OnOpenedOrdersProfit(ctx, bufSize)</code>.</p>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/#4-consumer-pattern-dont-block","title":"\u25b6\ufe0f 4) Consumer pattern (don\u2019t block!)","text":"<pre><code>ctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\n// Example: quotes stream\ndataCh, errCh := account.OnSymbolTick(ctx, []string{\"EURUSD\",\"GBPUSD\"})\n\nfor {\n    select {\n    case &lt;-ctx.Done():\n        return // graceful stop\n    case err := &lt;-errCh:\n        if err != nil { log.Printf(\"stream stopped: %v\", err); return }\n    case t := &lt;-dataCh:\n        // offload heavy work\n        processAsync(t)\n    }\n}\n</code></pre> <ul> <li>Heavy work \u2192 send to the worker via a buffered channel.</li> <li>Don't forget <code>ctx.Done()</code> for a clean finish.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/#5-tuning-backoff-central-knobs","title":"\ud83e\udded 5) Tuning backoff (central knobs)","text":"<p>Constants found in <code>examples/mt4/MT4Account.go</code>:</p> <pre><code>const (\n    backoffBase = 300 * time.Millisecond\n    backoffMax  = 5 * time.Second\n    jitterRange = 200 * time.Millisecond\n    maxRetries  = 10\n)\n</code></pre> <ul> <li>Home Wi\u2011Fi / unstable \u2192 try <code>backoffMax=8\u201310s</code>, <code>jitterRange=300\u2013400ms</code>.</li> <li>VPS / LAN \u2192 <code>backoffBase=150ms</code>, <code>backoffMax=3\u20135s</code>.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Retrain business errors \u2192 not allowed. We only use transport options (<code>Unavailable</code>, <code>EOF</code>).</li> <li>Forgot to cancel the context \u2192 goroutin leaks. Always `defer cancel()'.</li> <li>Blocking dataCh \u2192 the stream will stop. Either a buffer or a fast reception.</li> <li>Endless retreats \u2192 limit `MaxRetries', log the final error.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HandleReconnect/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>Reliability (en)</code> \u2014 timeouts, reconnects &amp; backoff summary.</li> <li><code>StreamQuotes.md</code>, <code>StreamOpenedOrderProfits.md</code> \u2014 ready-made wrappers.</li> <li><code>UnaryRetries.md</code> \u2014 point examples for individual methods.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/","title":"\ud83e\ude7a HealthCheck (GoMT4)","text":"<p>Goal: perform a fast terminal health check right after connect \u2014 using the same calls and patterns that exist in this repo.</p> <p>Real code refs:</p> <ul> <li>Account: <code>examples/mt4/MT4Account.go</code> (<code>AccountSummary</code>, <code>Quote</code>, retry/backoff helpers)</li> <li>Service demo: <code>examples/mt4/MT4_service.go</code> (summary/quote examples)</li> <li>Config: <code>examples/config/config.json</code></li> </ul>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#what-we-consider-healthy","title":"\u2705 What we consider \"healthy\"","text":"<ul> <li>MT4 terminal is running and connected to broker.</li> <li><code>AccountSummary</code> returns within a short timeout (\u22483s).</li> <li>Optionally: a <code>Quote(symbol)</code> succeeds for your <code>DefaultSymbol</code> from <code>config.json</code>.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#quick-summary-based-check-3s-timeout-retry-on-transport","title":"\u23f1\ufe0f Quick summary-based check (3s timeout + retry on transport)","text":"<pre><code>func HealthCheck(ctx context.Context, a *MT4Account) error {\n    // Short deadline: we want a quick yes/no\n    hctx, cancel := context.WithTimeout(ctx, 3*time.Second)\n    defer cancel()\n\n    // Retry only transient transport errors (codes.Unavailable)\n    return a.callWithRetry(hctx, func(c context.Context) error {\n        _, err := a.AccountSummary(c)\n        return err\n    })\n}\n</code></pre> <p>Why this works: <code>AccountSummary</code> is lightweight and exercises the session; your <code>callWithRetry</code> already implements exponential backoff + jitter and respects context.</p>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#optional-include-a-quote-probe-for-defaultsymbol","title":"\ud83d\udcb1 Optional: include a quote probe for DefaultSymbol","text":"<pre><code>func HealthCheckWithQuote(ctx context.Context, a *MT4Account, symbol string) error {\n    if err := HealthCheck(ctx, a); err != nil { return err }\n\n    qctx, cancel := context.WithTimeout(ctx, 2*time.Second)\n    defer cancel()\n\n    return a.callWithRetry(qctx, func(c context.Context) error {\n        _, err := a.Quote(c, symbol)\n        return err\n    })\n}\n</code></pre> <p>Use the <code>DefaultSymbol</code> from <code>examples/config/config.json</code>, making sure the symbol is visible in Market Watch (suffixes like <code>EURUSD.m</code> are broker\u2011specific).</p>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#interpreting-results","title":"\ud83e\uddea Interpreting results","text":"<ul> <li>OK: both calls return under the deadlines.</li> <li>Timeout (<code>context deadline exceeded</code>): terminal is not ready or network stalls \u2014 wait a bit and retry; consider higher <code>backoffMax</code>.</li> <li>Business error: bubble it up (do not retry): fix login/server/symbol.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#where-the-knobs-live-no-magic-numbers","title":"\ud83e\udded Where the knobs live (no magic numbers)","text":"<p>Backoff/jitter/retry limits are centralized in <code>examples/mt4/MT4Account.go</code>:</p> <pre><code>const (\n    backoffBase = 300 * time.Millisecond\n    backoffMax  = 5 * time.Second\n    jitterRange = 200 * time.Millisecond\n    maxRetries  = 10\n)\n</code></pre> <p>Tune them for your environment (home Wi\u2011Fi vs VPS/LAN). Timeouts in the health\u2011check are per\u2011call and independent from backoff caps.</p>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#usage-example-service-layer","title":"\ud83e\uddf0 Usage example (service layer)","text":"<p>\u26a0\ufe0f Note: Your base project does not include a method named <code>EnsureHealthy</code>. This section is shown only as a convenience wrapper idea \u2014 a way to combine the health\u2011check calls (<code>AccountSummary</code> + <code>Quote</code>) into one place. You may add such a method if you want a single entry point to verify that MT4 is ready.</p> <p>Why useful?</p> <ul> <li>Before running strategies or bots, you can call <code>EnsureHealthy</code> to quickly confirm the terminal is connected and symbols are available.</li> <li>It saves copy\u2011pasting the same two checks (<code>AccountSummary</code> + <code>Quote</code>) everywhere.</li> <li>If something is wrong (wrong server, hidden symbol, no connection) you fail fast with a clear error.</li> </ul> <p>Example implementation:</p> <pre><code>func (s *MT4Service) EnsureHealthy(ctx context.Context) error {\n    // 1) Summary probe\n    if err := HealthCheck(ctx, s.account); err != nil {\n        return fmt.Errorf(\"health summary failed: %w\", err)\")\n    }\n\n    // 2) Quote probe for default symbol\n    sym := s.cfg.DefaultSymbol\n    if sym != \"\" {\n        if err := HealthCheckWithQuote(ctx, s.account, sym); err != nil {\n            return fmt.Errorf(\"health quote failed for %s: %w\", sym, err)\n        }\n    }\n\n    log.Println(\"\u2705 MT4 is healthy and ready\")\n    return nil\n}\n</code></pre>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Hidden symbol / suffix mismatch \u2192 <code>EURUSD</code> vs <code>EURUSD.m</code>; fix config or show all symbols in MT4.</li> <li>No cancel \u2192 always <code>defer cancel()</code> after <code>WithTimeout</code> to avoid leaks.</li> <li>Retrying business errors \u2192 don\u2019t; adjust credentials/server/symbol.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/HealthCheck/#see-also","title":"\ud83d\udcce See also","text":"<ul> <li><code>UnaryRetries.md</code> \u2014 per\u2011call retry wrapper used above.</li> <li><code>AccountSummary.md</code> \u2014 details on fields and risk checks.</li> <li><code>GetQuote.md</code> \u2014 one\u2011shot quote used in the probe.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/","title":"\ud83d\udd02 UnaryRetries (GoMT4)","text":"<p>Goal: apply a consistent retry pattern for unary RPC calls (quotes, account, orders) using helpers already present in this repo.</p> <p>Real code refs:</p> <ul> <li>Backoff &amp; helpers: <code>examples/mt4/MT4Account.go</code> (<code>waitWithCtx</code>, <code>backoffDelay</code>, <code>maxRetries</code>)</li> <li>Typical calls: <code>Quote</code>, <code>AccountSummary</code>, <code>OrderSend</code>, <code>OrderModify</code>, <code>OrderClose</code></li> </ul>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#principles","title":"\u2705 Principles","text":"<ul> <li>Retry only transient transport errors: <code>codes.Unavailable</code> (and network I/O errors if wrapped accordingly).</li> <li>Use per\u2011call timeout via <code>context.WithTimeout</code> to bound latency.</li> <li>Between attempts, sleep with backoff + jitter using <code>waitWithCtx(ctx, backoffDelay(attempt))</code>.</li> <li>Stop immediately on non\u2011transient (business) errors.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#skeleton-helper-mirrors-your-account-layer","title":"\ud83e\uddf1 Skeleton helper (mirrors your account layer)","text":"<pre><code>func (a *MT4Account) callWithRetry(ctx context.Context, fn func(context.Context) error) error {\n    var last error\n    for attempt := 0; attempt &lt; maxRetries; attempt++ {\n        if err := fn(ctx); err != nil {\n            if st, ok := status.FromError(err); ok &amp;&amp; st.Code() == codes.Unavailable {\n                // transient: back off and retry\n                if err := waitWithCtx(ctx, backoffDelay(attempt)); err != nil {\n                    return err // context cancelled/deadline\n                }\n                last = err\n                continue\n            }\n            return err // non\u2011transient \u2192 bubble up\n        }\n        return nil // success\n    }\n    return fmt.Errorf(\"max retries reached: %w\", last)\n}\n</code></pre> <p>In this project, a similar logic is called directly from the account methods so as not to duplicate backups throughout the project.</p>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#percall-timeout-wrapper","title":"\u23f1\ufe0f Per\u2011call timeout wrapper","text":"<pre><code>func withTimeout(parent context.Context, d time.Duration, fn func(context.Context) error) error {\n    ctx, cancel := context.WithTimeout(parent, d)\n    defer cancel()\n    return fn(ctx)\n}\n</code></pre>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#example-robust-quote","title":"\ud83d\udcb1 Example: robust <code>Quote</code>","text":"<pre><code>err := withTimeout(ctx, 3*time.Second, func(c context.Context) error {\n    return a.callWithRetry(c, func(cc context.Context) error {\n        q, err := a.Quote(cc, symbol)\n        if err != nil { return err }\n        log.Printf(\"%s %.5f/%.5f @ %s\", symbol, q.GetBid(), q.GetAsk(), q.GetTime().AsTime())\n        return nil\n    })\n})\nif err != nil { return fmt.Errorf(\"quote failed: %w\", err) }\n</code></pre>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#example-accountsummary-healthcheck","title":"\ud83e\uddfe Example: <code>AccountSummary</code> health\u2011check","text":"<pre><code>err := withTimeout(ctx, 3*time.Second, func(c context.Context) error {\n    return a.callWithRetry(c, func(cc context.Context) error {\n        _, err := a.AccountSummary(cc)\n        return err\n    })\n})\nif err != nil { return fmt.Errorf(\"health\u2011check failed: %w\", err) }\n</code></pre>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#example-ordersend-market","title":"\ud83d\uded2 Example: <code>OrderSend</code> (market)","text":"<pre><code>err := withTimeout(ctx, 8*time.Second, func(c context.Context) error {\n    return a.callWithRetry(c, func(cc context.Context) error {\n        _, err := a.OrderSend(cc, symbol, side, volume, nil, &amp;slip, sl, tp, &amp;comment, &amp;magic, nil)\n        return err\n    })\n})\nif err != nil { return fmt.Errorf(\"OrderSend failed: %w\", err) }\n</code></pre>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#tuning","title":"\ud83c\udf9b\ufe0f Tuning","text":"<p>Constants in <code>examples/mt4/MT4Account.go</code>:</p> <pre><code>const (\n    backoffBase = 300 * time.Millisecond\n    backoffMax  = 5 * time.Second\n    jitterRange = 200 * time.Millisecond\n    maxRetries  = 10\n)\n</code></pre> <ul> <li>VPS/LAN: <code>backoffBase=150ms</code>, <code>backoffMax=3\u20135s</code>, timeouts 2\u20133s for reads.</li> <li>Home/unstable: <code>backoffMax=8\u201310s</code>, timeouts 4\u20136s (reads) / 6\u201310s (trades).</li> </ul>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>We will delete business errors (for example, invalid volume/price) \u2014 no need, return it immediately.</li> <li>There is no <code>defer cancel()</code> \u2014 goroutin leaks.</li> <li>Too aggressive backoff \u2014 \"pounding\" on the network; increase the \"backoffBase\" and jitter spread.</li> <li>One global context for all \u2014 it is better to have a separate timeout for each call.</li> </ul>"},{"location":"Cookbook/Reliability_Connection/UnaryRetries/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>HandleReconnect.md</code> \u2014 for streaming and general strategy.</li> <li>`Reliability (en)' \u2014 summary recommendations on timeouts/retreats.</li> <li><code>GetQuote.md</code>, <code>PlaceMarketOrder.md</code> \u2014 where it is applied live.</li> </ul>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/","title":"\ud83e\uddfe ConfigExample (GoMT4)","text":"<p>Goal: show the minimal config.json used by this repo and how it\u2019s consumed by the examples.</p> <p>Real files:</p> <ul> <li>Config file: <code>examples/config/config.json</code></li> <li>Config loader: <code>examples/config/config.go</code> (reads JSON into a struct)</li> <li>Used by: <code>examples/main.go</code></li> </ul>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/#location","title":"\ud83d\udccd Location","text":"<pre><code>examples/config/config.json\n</code></pre> <p>This file is read at startup by the example app.</p>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/#schema-what-fields-mean","title":"\ud83e\udde9 Schema (what fields mean)","text":"<pre><code>{\n  \"Login\": 501401178,\n  \"Password\": \"v8gctta\",\n  \"Server\": \"RoboForex-Demo\",\n  \"DefaultSymbol\": \"EURUSD\"\n}\n</code></pre> <ul> <li>Login (number) \u2014 MT4 account login.</li> <li>Password (string) \u2014 investor or trade password. For demos, prefer investor (read\u2011only).</li> <li>Server (string) \u2014 exact broker server name (e.g., <code>RoboForex-Demo</code>).</li> <li>DefaultSymbol (string) \u2014 instrument to use by default (must match broker\u2019s name; suffixes like <code>EURUSD.m</code> are different symbols).</li> </ul>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/#edit-run","title":"\ud83d\udee0\ufe0f Edit &amp; run","text":"<ol> <li>Open <code>examples/config/config.json</code> and fill your values.</li> <li>Launch the example:</li> </ol> <pre><code>cd GoMT4\ngo mod tidy\ngo run ./examples/main.go\n</code></pre> <p>If config is valid and MT4 is connected, you\u2019ll see logs from the example service.</p>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/#validation-quick-checks","title":"\ud83d\udd0d Validation (quick checks)","text":"<ul> <li>Login is numeric, password non\u2011empty.</li> <li>Server name exactly matches MT4 (check in terminal login dialog).</li> <li><code>DefaultSymbol</code> exists and is visible in Market Watch (<code>Show All</code>).</li> </ul> <p>Minimal runtime probe (uses real calls):</p> <pre><code>sum, err := account.AccountSummary(ctx)\nif err != nil { return err }\n_, err = account.Quote(ctx, cfg.DefaultSymbol)\nif err != nil { return err }\n</code></pre>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/#security-notes","title":"\ud83d\udd10 Security notes","text":"<ul> <li><code>config.json</code> in this repo is meant for local development.</li> <li>Do not commit real trading credentials to a public repo. Use demo creds or keep the repo private.</li> <li>If you need secrets isolation, migrate to environment variables or an external secret store (optional; not required by this project).</li> </ul>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/#common-errors","title":"\u26a0\ufe0f Common errors","text":"<ul> <li><code>symbol not found</code> \u2192 wrong/hidden symbol; check suffix (<code>EURUSD.m</code>) and Show All in Market Watch.</li> <li><code>invalid login/password/server</code> \u2192 verify values against MT4 login dialog.</li> <li>Timeouts on first run \u2192 start MT4 manually once so it initializes data; then retry.</li> </ul>"},{"location":"Cookbook/Utils_Helpers/ConfigExample/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>EnsureSymbolVisible.md</code> \u2014 make sure <code>DefaultSymbol</code> is available.</li> <li><code>AccountSummary.md</code> \u2014 quick health snapshot after config is loaded.</li> <li><code>GetQuote.md</code> \u2014 confirm quotes for the default symbol.</li> </ul>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/","title":"\ud83d\udc41\ufe0f EnsureSymbolVisible (GoMT4)","text":"<p>Goal: make sure a symbol is available/visible in MT4 Market Watch before you call <code>Quote</code>, <code>OrderSend</code>, <code>SymbolParams</code>, etc.</p> <p>Real code refs you already ship:</p> <ul> <li>Market info demos: <code>examples/mt4/MT4_service.go</code> (see ShowAllSymbols, ShowSymbols, ShowSymbolParams)</li> <li>Account layer: <code>examples/mt4/MT4Account.go</code> (e.g., <code>SymbolParams</code>, <code>Quote</code>)</li> <li>Docs: <code>docs/Market_Info/ShowAllSymbols.md</code>, <code>ShowSymbols.md</code>, <code>ShowSymbolParams.md</code></li> </ul>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/#why-this-matters","title":"\u2753 Why this matters","text":"<ul> <li>MT4 hides many instruments by default. Hidden symbols often cause errors like <code>symbol not found</code> or empty quotes.</li> <li>Brokers may add suffixes: <code>EURUSD</code> vs <code>EURUSD.m</code> / <code>.pro</code> are different tools.</li> </ul>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/#what-exists-in-this-repo","title":"\u2705 What exists in this repo","text":"<p>Do you already have work calls that you can use to check availability?:</p> <ul> <li><code>SymbolParams(ctx, symbol)</code> \u2014 if the symbol is unavailable/does not exist, an error will be returned.</li> <li><code>Quote(ctx, symbol)</code> \u2014 similarly, returns an error/empty.</li> <li>Demo-showing a list of characters: <code>ShowAllSymbols</code> / <code>ShowSymbols</code> in `MT4_service.go'.</li> </ul> <p>Direct method <code>EnsureSymbolVisible(...)</code>there is no ** in the code. Below is the optional convenience** wrapper: not part of the auto\u2011generated pb, but a small utility that can be added to avoid copying checks.</p>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/#minimal-check-use-existing-calls","title":"\ud83e\uddea Minimal check (use existing calls)","text":"<pre><code>func CheckSymbolAvailable(ctx context.Context, a *MT4Account, symbol string) error {\n    // Fast probe via params; you can also use Quote\n    if _, err := a.SymbolParams(ctx, symbol); err != nil {\n        return fmt.Errorf(\"symbol %s is not available (hidden or wrong suffix): %w\", symbol, err)\n    }\n    return nil\n}\n</code></pre> <p>Using:</p> <pre><code>if err := CheckSymbolAvailable(ctx, account, \"EURUSD\"); err != nil {\n    log.Printf(\"\u26a0\ufe0f %v\", err)\n    log.Printf(\"Hint: open MT4 \u2192 Market Watch \u2192 Show All, and check actual symbol name (suffix)\")\n    return err\n}\n</code></pre>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/#optional-convenience-helper-not-in-pb-you-may-add","title":"\ud83e\uddf0 Optional convenience helper (not in pb; you may add)","text":"<p>This utility tries to pick up common suffixes if the base character is not found. This is an add-on, not part of your current API \u2014 add it as desired.</p> <pre><code>// EnsureSymbolVisible tries base symbol, then common suffixes (.m, .pro, .ecn),\n// and returns the first that exists.\nfunc EnsureSymbolVisible(ctx context.Context, a *MT4Account, base string) (string, error) {\n    candidates := []string{base, base + \".m\", base + \".pro\", base + \".ecn\"}\n    for _, s := range candidates {\n        if _, err := a.SymbolParams(ctx, s); err == nil {\n            return s, nil // found a visible/real symbol\n        }\n    }\n    return \"\", fmt.Errorf(\"symbol %s not visible or not found; open Market Watch \u2192 Show All and check the exact name\", base)\n}\n</code></pre> <p>Using:</p> <pre><code>sym, err := EnsureSymbolVisible(ctx, account, \"EURUSD\")\nif err != nil { return err }\nq, err := account.Quote(ctx, sym) // safe to proceed\n</code></pre>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/#manual-step-for-mt4-user","title":"\ud83e\udded Manual step (for MT4 user)","text":"<ol> <li>Open MT4 \u2192 Market Watch.</li> <li>PCM \u2192 Show All.</li> <li>Check your broker's exact symbol name (including the suffix).</li> <li>Write it in <code>examples/config/config.json</code> \u2192 <code>DefaultSymbol</code>.</li> </ol>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Suffix mismatch: <code>EURUSD</code> \u2260 <code>EURUSD.m</code>. Always check the exact name.</li> <li>Hidden in Market Watch: Turn on Show All before the first launch.</li> <li>Wrong symbol case: Names are case-sensitive in terms of suffixes for some brokers.</li> </ul>"},{"location":"Cookbook/Utils_Helpers/EnsureSymbolVisible/#see-also","title":"\ud83d\udd17 See also","text":"<ul> <li><code>SymbolParams.md</code> \u2014 tool parameters (Digits/Point/LotStep/StopsLevel).</li> <li><code>GetQuote.md</code> is a one\u2014time quote.</li> <li><code>PlaceMarketOrder.md</code> \u2014 application after validation of the symbol.</li> </ul>"},{"location":"Cookbook/Utils_Helpers/RoundVolumePrice/","title":"\ud83d\udd22 RoundVolumePrice (GoMT4)","text":"<p>Goal: correctly round volume (lots) and price values according to symbol parameters (Digits, VolumeStep, Min/Max lot). This avoids broker rejections when sending/modifying orders.</p> <p>Real code refs:</p> <ul> <li>Account: <code>examples/mt4/MT4Account.go</code> (<code>SymbolParams</code> provides Digits, VolumeStep, Min/Max, Point)</li> <li>Demos: <code>examples/mt4/MT4_service.go</code> (order send/modify examples use these params)</li> </ul>"},{"location":"Cookbook/Utils_Helpers/RoundVolumePrice/#why-we-need-this","title":"\u2705 Why we need this","text":"<ul> <li>Brokers only accept volumes that are multiples of <code>VolumeStep</code> and within <code>[MinLot, MaxLot]</code>.</li> <li>Prices must be rounded to the symbol\u2019s <code>Digits</code> (e.g., 5\u2011digit EURUSD \u2192 1.23456).</li> <li>If you don\u2019t align values, <code>OrderSend</code> or <code>OrderModify</code> will return an error (invalid volume/price).</li> </ul>"},{"location":"Cookbook/Utils_Helpers/RoundVolumePrice/#1-read-params-first","title":"\ud83d\udd0e 1) Read params first","text":"<pre><code>p, err := account.SymbolParams(ctx, symbol)\nif err != nil { return err }\n\nfmt.Printf(\"%s Digits=%d VolumeStep=%.2f MinLot=%.2f MaxLot=%.2f\\n\",\n    symbol, p.GetDigits(), p.GetVolumeStep(), p.GetVolumeMin(), p.GetVolumeMax())\n</code></pre>"},{"location":"Cookbook/Utils_Helpers/RoundVolumePrice/#2-helpers-convenience-functions","title":"\ud83e\uddee 2) Helpers (convenience functions)","text":"<p>\u26a0\ufe0f Note: these helpers are not auto\u2011generated by pb, but are commonly added in projects like this one. If you don\u2019t yet have them in your repo, you can safely add them in <code>utils.go</code> (or similar). They simply apply the parameters you already fetch with <code>SymbolParams</code>.</p> <pre><code>func AlignVolume(v, step, min, max float64) float64 {\n    if step &lt;= 0 { return v }\n    v = math.Floor(v/step+0.5) * step\n    if v &lt; min { v = min }\n    if v &gt; max { v = max }\n    return v\n}\n\nfunc RoundPrice(p float64, digits int) float64 {\n    mul := math.Pow10(digits)\n    return math.Round(p*mul) / mul\n}\n</code></pre> <p>Usage:</p> <pre><code>vol := AlignVolume(0.13, p.GetVolumeStep(), p.GetVolumeMin(), p.GetVolumeMax())\nprice := RoundPrice(1.092345, int(p.GetDigits()))\n</code></pre>"},{"location":"Cookbook/Utils_Helpers/RoundVolumePrice/#3-use-in-ordersend","title":"\ud83d\udcdd 3) Use in OrderSend","text":"<pre><code>side := pb.OrderSendOperationType_OC_OP_BUY\n\nvol := AlignVolume(0.13, p.GetVolumeStep(), p.GetVolumeMin(), p.GetVolumeMax())\nprice := RoundPrice(q.GetAsk(), int(p.GetDigits()))\n\nresp, err := account.OrderSend(ctx, symbol, side, vol, &amp;price, &amp;slip, nil, nil, &amp;comment, &amp;magic, nil)\nif err != nil {\n    return fmt.Errorf(\"OrderSend failed: %w\", err)\n}\n</code></pre>"},{"location":"Cookbook/Utils_Helpers/RoundVolumePrice/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Skipping rounding \u2192 broker rejects with \u201cinvalid price/volume\u201d.</li> <li>Wrong Digits \u2192 always take from <code>SymbolParams</code>, not from hardcoded assumptions.</li> <li>Different brokers \u2192 <code>VolumeStep</code> can differ (0.01 vs 0.1) and <code>MinLot</code>/<code>MaxLot</code> vary.</li> </ul>"},{"location":"Cookbook/Utils_Helpers/RoundVolumePrice/#see-also","title":"\ud83d\udcce See also","text":"<ul> <li><code>SymbolParams.md</code> \u2014 explains where Digits/LotStep come from.</li> <li><code>PlaceMarketOrder.md</code>, <code>PlacePendingOrder.md</code> \u2014 show real order placement using these helpers.</li> <li><code>ModifyOrder.md</code> \u2014 reuses <code>RoundPrice</code> for SL/TP adjustments.</li> </ul>"},{"location":"Market_Info/Market_Info_Overview/","title":"Market Info \u2014 Overview","text":"<p>This section contains market data and instrument metadata methods for MT4. Use it to discover symbols, read quotes, fetch historical candles, and get contract/tick parameters.</p>"},{"location":"Market_Info/Market_Info_Overview/#methods-in-this-folder","title":"\ud83d\udcc2 Methods in this folder","text":"<ul> <li> <p>ShowAllSymbols.md   Full catalogue of all instruments available in the terminal (names + indices).</p> </li> <li> <p>ShowSymbols.md   Lightweight list of symbol names and indices (basic variant).</p> </li> <li> <p>ShowSymbolParams.md   Extended parameters for a symbol: digits, volume rules, currencies, trade mode.</p> </li> <li> <p>ShowQuote.md   Latest bid/ask snapshot for a single symbol.</p> </li> <li> <p>ShowQuotesMany.md   Snapshot quotes for multiple symbols at once; useful before subscribing to ticks.</p> </li> <li> <p>ShowQuoteHistory.md   Historical OHLC data (candles) for a symbol over a timeframe.</p> </li> <li> <p>ShowTickValues.md TickValue / TickSize / ContractSize for one or more symbols (P/L &amp; sizing math).</p> </li> </ul>"},{"location":"Market_Info/Market_Info_Overview/#typical-workflows","title":"\u26a1 Typical Workflows","text":""},{"location":"Market_Info/Market_Info_Overview/#1-build-a-watchlist-and-show-live-prices","title":"1) Build a watchlist and show live prices","text":"<pre><code>// Discover and pick symbols\nsyms, _ := svc.ShowAllSymbols(ctx)\n\n// Get initial snapshot for the shortlist\n_ = svc.ShowQuotesMany(ctx, []string{\"EURUSD\", \"GBPUSD\"})\n\n// (optional) Subscribe to ticks in the Streaming section\n// svc.StreamQuotes(ctx)\n</code></pre>"},{"location":"Market_Info/Market_Info_Overview/#2-validate-trading-inputs-and-display-instrument-info","title":"2) Validate trading inputs and display instrument info","text":"<pre><code>// Fetch parameters for validation and formatting\n_ = svc.ShowSymbolParams(ctx, \"EURUSD\")\n\n// Compute monetary values\n_ = svc.ShowTickValues(ctx, []string{\"EURUSD\"})\n</code></pre>"},{"location":"Market_Info/Market_Info_Overview/#3-chart-a-symbol","title":"3) Chart a symbol","text":"<pre><code>// Pull historical candles and render\n_ = svc.ShowQuoteHistory(ctx, \"EURUSD\")\n</code></pre>"},{"location":"Market_Info/Market_Info_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Key by name, not index. <code>SymbolIndex</code> can change across sessions; persist <code>SymbolName</code>.</li> <li>Format by Digits. Use <code>Digits</code> from <code>ShowSymbolParams</code> for UI; keep raw doubles for math.</li> <li>Batch when possible. Prefer <code>ShowQuotesMany</code> and <code>ShowTickValues</code> to reduce round\u2011trips.</li> <li>Time is UTC. Quotes and candles come with UTC timestamps\u2014convert only at presentation.</li> <li>Broker suffixes are real. Treat <code>EURUSD.m</code> / <code>XAUUSD-RAW</code> as distinct symbols.</li> </ol>"},{"location":"Market_Info/Market_Info_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The <code>Market_Info</code> block helps you:</p> <ul> <li>Discover and organize instruments.</li> <li>Read current and historical market data.</li> <li>Validate and format symbol\u2011specific values (digits, steps, currencies).</li> <li>Compute monetary effects (tick value/size, contract size) for risk &amp; P/L.</li> </ul> <p>\ud83d\udc49 Use this page as a map. Jump into each <code>.md</code> file for full method details, parameters, and pitfalls.</p>"},{"location":"Market_Info/ShowAllSymbols/","title":"Getting All Available Symbols","text":"<p>Request: retrieve a list of all symbols (instruments) available in the terminal Returns all symbol names and their corresponding internal indices.</p>"},{"location":"Market_Info/ShowAllSymbols/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints all available symbols with indices.\nsvc.ShowAllSymbols(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\ndata, err := account.ShowAllSymbols(ctx)\nif err != nil {\n    log.Fatalf(\"\u274c ShowAllSymbols error: %v\", err)\n}\n\nfor _, sym := range data.SymbolNameInfos {\n    fmt.Printf(\"Symbol: %s, Index: %d\\n\", sym.GetSymbolName(), sym.GetSymbolIndex())\n}\n</code></pre>"},{"location":"Market_Info/ShowAllSymbols/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowAllSymbols(ctx context.Context)\n</code></pre>"},{"location":"Market_Info/ShowAllSymbols/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> For timeout and cancellation control"},{"location":"Market_Info/ShowAllSymbols/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.SymbolsData</code>:</p> Field Type Description <code>SymbolNameInfos</code> <code>[]*pb.SymbolNameIndexPair</code> List of symbol names with their indices <p>Each <code>*pb.SymbolNameIndexPair</code> includes:</p> Field Type Description <code>SymbolName</code> <code>string</code> Name of the trading symbol <code>SymbolIndex</code> <code>int32</code> Internal index of the symbol"},{"location":"Market_Info/ShowAllSymbols/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Enumerate all available trading instruments from the MT4 terminal. Useful for:</p> <ul> <li>Populating dropdown menus and symbol lists</li> <li>Building watchlists or market scanners</li> <li>Performing bulk operations across instruments</li> </ul>"},{"location":"Market_Info/ShowAllSymbols/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Indices are not stable: <code>SymbolIndex</code> can change after terminal restarts or broker updates. Always use <code>SymbolName</code> as the key.</li> <li>Broker suffixes: Symbols may have suffixes like <code>EURUSD.m</code> or <code>DE40.cash</code>. Treat each as distinct \u2014 no auto-stripping.</li> <li>Sorting: The API does not guarantee order. Sort client\u2011side if you need deterministic lists.</li> </ul>"},{"location":"Market_Info/ShowAllSymbols/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Large catalogs: Brokers may expose hundreds/thousands of instruments. Printing/logging all at once can flood output.</li> <li>Disabled instruments: Some returned symbols may not be tradable on your account type \u2014 check permissions before using.</li> <li>Empty responses: A stale/disconnected terminal can return an empty list without error. Add sanity checks.</li> </ul>"},{"location":"Market_Info/ShowAllSymbols/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Happy path: List is non\u2011empty and contains common pairs like <code>EURUSD</code>.</li> <li>Edge: Include known disabled symbols and verify they don\u2019t break downstream logic.</li> <li>Failure path: Simulate no connection \u2014 expect error or empty slice handled gracefully.</li> </ul>"},{"location":"Market_Info/ShowQuote/","title":"Getting a Quote for Symbol","text":"<p>Request: fetch the latest quote for a given symbol Returns current bid/ask prices, spread, and time for a specified trading instrument.</p>"},{"location":"Market_Info/ShowQuote/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints bid/ask/time for the symbol.\nsvc.ShowQuote(ctx, \"EURUSD\")\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\ndata, err := account.Quote(ctx, \"EURUSD\")\nif err != nil {\n    log.Fatalf(\"\u274c Quote error: %v\", err)\n}\n\nfmt.Printf(\"Bid: %.5f, Ask: %.5f, Time: %s\\n\",\n    data.GetBid(),\n    data.GetAsk(),\n    data.GetDateTime().AsTime().Format(\"2006-01-02 15:04:05\"),\n)\n</code></pre>"},{"location":"Market_Info/ShowQuote/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowQuote(ctx context.Context, symbol string)\n</code></pre>"},{"location":"Market_Info/ShowQuote/#input","title":"\ud83d\udd3d Input","text":"<p>Required:</p> Field Type Description <code>ctx</code> <code>context.Context</code> Context for timeout or cancellation. <code>symbol</code> <code>string</code> Trading symbol (e.g., \"EURUSD\")."},{"location":"Market_Info/ShowQuote/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.QuoteData</code> with fields:</p> Field Type Description <code>Bid</code> <code>float64</code> Current bid price. <code>Ask</code> <code>float64</code> Current ask price. <code>DateTime</code> <code>timestamp</code> UTC timestamp of the quote. <p>Spread: If not exposed directly, compute as <code>Ask - Bid</code>. For points/pips, divide by the symbol\u2019s <code>Point</code> (from <code>SymbolParams</code>).</p>"},{"location":"Market_Info/ShowQuote/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Retrieve live market pricing for a specific symbol. Useful for:</p> <ul> <li>Displaying real-time bid/ask prices</li> <li>Building dashboards or widgets</li> <li>Monitoring spreads and triggering alerts</li> </ul>"},{"location":"Market_Info/ShowQuote/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Precision: Print with instrument-specific decimals (e.g., 5 for EURUSD). Keep raw values for calculations.</li> <li>Timestamp: <code>DateTime</code> is UTC \u2014 format for display, log in UTC.</li> </ul>"},{"location":"Market_Info/ShowQuote/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Zero/invalid values: Check <code>Bid &gt; 0 &amp;&amp; Ask &gt;= Bid</code>. Otherwise treat as stale.</li> <li>Wrong symbol string: Use the exact broker symbol (including suffixes).</li> </ul>"},{"location":"Market_Info/ShowQuote/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Happy path: <code>EURUSD</code> \u2192 <code>Ask &gt; Bid</code>, timestamp recent.</li> <li>Error path: Unknown/disabled symbol \u2192 return error or empty data handled gracefully.</li> </ul>"},{"location":"Market_Info/ShowQuoteHistory/","title":"Getting Historical Quote Data","text":"<p>Request: retrieve historical OHLC (candlestick) data for a given symbol Returns a list of time-based bars with open, high, low, close prices over a defined time range and timeframe.</p>"},{"location":"Market_Info/ShowQuoteHistory/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints recent OHLC candles for the symbol.\nsvc.ShowQuoteHistory(ctx, \"EURUSD\")\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nfrom := time.Now().AddDate(0, 0, -5)\nto   := time.Now()\ntimeframe := pb.ENUM_QUOTE_HISTORY_TIMEFRAME_QH_PERIOD_H1\n\nctx, cancel := context.WithTimeout(context.Background(), 8*time.Second)\ndefer cancel()\n\ndata, err := account.QuoteHistory(ctx, \"EURUSD\", timeframe, from, to)\nif err != nil {\n    log.Fatalf(\"\u274c QuoteHistory error: %v\", err)\n}\n\nfor _, c := range data.GetHistoricalQuotes() {\n    fmt.Printf(\"[%s] O: %.5f H: %.5f L: %.5f C: %.5f\\n\",\n        c.GetTime().AsTime().Format(\"2006-01-02 15:04:05\"),\n        c.GetOpen(),\n        c.GetHigh(),\n        c.GetLow(),\n        c.GetClose(),\n    )\n}\n</code></pre>"},{"location":"Market_Info/ShowQuoteHistory/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowQuoteHistory(ctx context.Context, symbol string)\n</code></pre>"},{"location":"Market_Info/ShowQuoteHistory/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>symbol</code> <code>string</code> Trading symbol (e.g., \"EURUSD\"). <code>timeframe</code> <code>ENUM_QUOTE_HISTORY_TIMEFRAME</code> Bar timeframe (e.g., hourly, daily, etc.). <code>from</code> <code>time.Time</code> Start of the historical range (UTC). <code>to</code> <code>time.Time</code> End of the historical range (UTC). <code>ctx</code> <code>context.Context</code> For timeout or cancellation."},{"location":"Market_Info/ShowQuoteHistory/#enum-enum_quote_history_timeframe","title":"ENUM: <code>ENUM_QUOTE_HISTORY_TIMEFRAME</code>","text":"Value Description <code>QH_PERIOD_M1</code> 1-minute bars <code>QH_PERIOD_M5</code> 5-minute bars <code>QH_PERIOD_M15</code> 15-minute bars <code>QH_PERIOD_M30</code> 30-minute bars <code>QH_PERIOD_H1</code> 1-hour bars <code>QH_PERIOD_H4</code> 4-hour bars <code>QH_PERIOD_D1</code> Daily bars <code>QH_PERIOD_W1</code> Weekly bars <code>QH_PERIOD_MN1</code> Monthly bars"},{"location":"Market_Info/ShowQuoteHistory/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.QuoteHistoryData</code>:</p> Field Type Description <code>HistoricalQuotes</code> <code>[]*pb.HistoricalQuoteBar</code> List of historical OHLC candles. <p>Each <code>*pb.HistoricalQuoteBar</code> includes:</p> Field Type Description <code>Time</code> <code>timestamp</code> Time of the bar (UTC). <code>Open</code> <code>float64</code> Opening price. <code>High</code> <code>float64</code> Highest price. <code>Low</code> <code>float64</code> Lowest price. <code>Close</code> <code>float64</code> Closing price."},{"location":"Market_Info/ShowQuoteHistory/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Load candlestick-style historical price data for a symbol. Ideal for:</p> <ul> <li>Charting historical candles</li> <li>Backtesting trading strategies</li> <li>Detecting technical analysis patterns</li> </ul>"},{"location":"Market_Info/ShowQuoteHistory/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Range limits: Very large ranges may be truncated. Query in smaller chunks.</li> <li>Timezone: All times are UTC. Convert to local TZ for charts.</li> <li>Gaps: Weekend and holiday gaps are normal; don\u2019t misinterpret them as missing data.</li> </ul>"},{"location":"Market_Info/ShowQuoteHistory/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Inconsistent data: Different brokers can have slightly different history for the same symbol.</li> <li>No future bars: <code>to</code> cannot exceed the server\u2019s latest bar \u2014 it will return empty beyond.</li> <li>Alignment: Bars align strictly to their timeframe (e.g., H1 always at :00 minutes).</li> </ul>"},{"location":"Market_Info/ShowQuoteHistory/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Happy path: Request last 100 H1 bars for EURUSD \u2192 verify consistent OHLC values.</li> <li>Edge case: Request with <code>from &gt; to</code> \u2192 expect error/empty response.</li> <li>Stress test: Fetch several months of M1 data \u2192 ensure chunking or iteration works.</li> </ul>"},{"location":"Market_Info/ShowQuotesMany/","title":"Getting Quotes for Multiple Symbols with Ticks","text":"<p>Request: fetch quotes for multiple symbols and stream real-time price ticks Combines a one-time quote snapshot (<code>QuoteMany</code>) with a live tick stream (<code>OnSymbolTick</code>) for each symbol.</p>"},{"location":"Market_Info/ShowQuotesMany/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints multiple quotes with bid/ask/time.\nsymbols := []string{\"EURUSD\", \"GBPUSD\"}\nsvc.ShowQuotesMany(ctx, symbols)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nsymbols := []string{\"EURUSD\", \"GBPUSD\"}\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\ndata, err := account.QuoteMany(ctx, symbols)\nif err != nil {\n    log.Fatalf(\"\u274c QuoteMany error: %v\", err)\n}\n\nfor _, q := range data.GetQuotes() {\n    fmt.Printf(\"Symbol: %s | Bid: %.5f | Ask: %.5f | Time: %s\\n\",\n        q.GetSymbol(),\n        q.GetBid(),\n        q.GetAsk(),\n        q.GetDateTime().AsTime().Format(\"2006-01-02 15:04:05\"),\n    )\n}\n\n// --- Streaming tick updates (direct) ---\n// Subscribes to real-time ticks for given symbols.\n// Stops after first tick or timeout (demo only).\n\nstreamSymbols := []string{\"EURUSD\"}\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\ntickCh, errCh := account.OnSymbolTick(ctx, streamSymbols)\n\nfor {\n    select {\n    case tick := &lt;-tickCh:\n        if tick != nil &amp;&amp; tick.GetSymbolTick() != nil {\n            q := tick.GetSymbolTick()\n            fmt.Printf(\"[Tick] %s | Bid: %.5f | Ask: %.5f | Time: %s\\n\",\n                q.GetSymbol(),\n                q.GetBid(),\n                q.GetAsk(),\n                q.GetTime().AsTime().Format(\"2006-01-02 15:04:05\"))\n            return // demo: exit after first tick\n        }\n    case err := &lt;-errCh:\n        log.Fatalf(\"\u274c Tick stream error: %v\", err)\n    }\n}\n</code></pre>"},{"location":"Market_Info/ShowQuotesMany/#input","title":"\ud83d\udd3d Input","text":""},{"location":"Market_Info/ShowQuotesMany/#for-quotemany","title":"For <code>QuoteMany</code>","text":"Field Type Description <code>symbols</code> <code>[]string</code> List of trading symbols to fetch quotes. <code>ctx</code> <code>context.Context</code> Cancellation and timeout control."},{"location":"Market_Info/ShowQuotesMany/#for-onsymboltick","title":"For <code>OnSymbolTick</code>","text":"Field Type Description <code>symbols</code> <code>[]string</code> Symbols to subscribe for real-time ticks. <code>ctx</code> <code>context.Context</code> Required for stream control."},{"location":"Market_Info/ShowQuotesMany/#method-signatures","title":"Method Signatures","text":"<pre><code>func (s *MT4Service) ShowQuotesMany(ctx context.Context, symbols []string)\n\nfunc (a *MT4Account) QuoteMany(ctx context.Context, symbols []string) (*pb.QuoteManyReply, error)\n\nfunc (a *MT4Account) OnSymbolTick(ctx context.Context, symbols []string) (&lt;-chan *pb.SymbolTickDataPacket, &lt;-chan error)\n</code></pre>"},{"location":"Market_Info/ShowQuotesMany/#output","title":"\u2b06\ufe0f Output","text":""},{"location":"Market_Info/ShowQuotesMany/#from-quotemany","title":"From <code>QuoteMany</code>","text":"<p>Returns slice of <code>*pb.QuoteData</code>:</p> Field Type Description <code>Symbol</code> <code>string</code> Trading symbol name <code>Bid</code> <code>float64</code> Current bid price <code>Ask</code> <code>float64</code> Current ask price <code>Time</code> <code>timestamp</code> UTC time of the quote"},{"location":"Market_Info/ShowQuotesMany/#from-onsymboltick","title":"From <code>OnSymbolTick</code>","text":"<p>Returns real-time stream of <code>*pb.SymbolTickDataPacket</code>:</p> Field Type Description <code>SymbolTick</code> <code>QuoteData</code> Real-time tick data for symbol"},{"location":"Market_Info/ShowQuotesMany/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Use this method when working with multiple symbols:</p> <ol> <li><code>QuoteMany</code> gives instant snapshot of bid/ask prices \u2014 good for validation or display.</li> <li><code>OnSymbolTick</code> streams live updates \u2014 ideal for dashboards or pricing alerts.</li> </ol> <p>Perfect for trading UIs, price monitors, or auto-trading logic with symbol watchlists.</p>"},{"location":"Market_Info/ShowQuotesMany/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Stream lifecycle: Always cancel context to stop <code>OnSymbolTick</code>. Otherwise the channel stays open.</li> <li>Initial state: Combine <code>QuoteMany</code> first, then subscribe to ticks \u2014 avoids waiting for first tick.</li> <li>Channel handling: Both data and error channels must be consumed to avoid goroutine leaks.</li> </ul>"},{"location":"Market_Info/ShowQuotesMany/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>High-frequency symbols: Subscribing to many active symbols can flood your app with ticks. Consider rate-limiting.</li> <li>Connection drops: Streams end silently if connection dies \u2014 always monitor <code>errCh</code>.</li> <li>Duplicate updates: Rapid ticks may repeat Bid/Ask without visible change. Filter if necessary.</li> </ul>"},{"location":"Market_Info/ShowQuotesMany/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Snapshot check: Call <code>QuoteMany</code> on 2\u20133 symbols, verify consistent prices.</li> <li>Stream test: Subscribe to one symbol, ensure ticks arrive within expected intervals.</li> <li>Timeout/Cancel: Cancel context mid-stream \u2192 channels should close cleanly.</li> </ul>"},{"location":"Market_Info/ShowSymbolParams/","title":"Getting Symbol Parameters","text":"<p>Request: retrieve extended trading parameters for a symbol Provides detailed attributes such as precision, volume limits, currencies, and trade modes.</p>"},{"location":"Market_Info/ShowSymbolParams/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints full symbol parameters in a readable format.\nsvc.ShowSymbolParams(ctx, \"EURUSD\")\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\ninfo, err := account.SymbolParams(ctx, \"EURUSD\")\nif err != nil {\n    log.Fatalf(\"\u274c SymbolParams error: %v\", err)\n}\n\nfmt.Println(\"\ud83d\udcca Symbol Parameters:\")\nfmt.Printf(\"\u2022 Symbol: %s\\n\", info.GetSymbolName())\nfmt.Printf(\"\u2022 Description: %s\\n\", info.GetSymDescription())\nfmt.Printf(\"\u2022 Digits: %d\\n\", info.GetDigits())\nfmt.Printf(\"\u2022 Volume Min: %.2f\\n\", info.GetVolumeMin())\nfmt.Printf(\"\u2022 Volume Max: %.2f\\n\", info.GetVolumeMax())\nfmt.Printf(\"\u2022 Volume Step: %.2f\\n\", info.GetVolumeStep())\nfmt.Printf(\"\u2022 Trade Mode: %s\\n\", tradeModeToString(info.GetTradeMode()))\nfmt.Printf(\"\u2022 Currency Base: %s\\n\", info.GetCurrencyBase())\nfmt.Printf(\"\u2022 Currency Profit: %s\\n\", info.GetCurrencyProfit())\nfmt.Printf(\"\u2022 Currency Margin: %s\\n\", info.GetCurrencyMargin())\n</code></pre>"},{"location":"Market_Info/ShowSymbolParams/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowSymbolParams(ctx context.Context, symbol string) error\n</code></pre>"},{"location":"Market_Info/ShowSymbolParams/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>symbol</code> <code>string</code> Trading symbol (e.g., \"EURUSD\"). <code>ctx</code> <code>context.Context</code> For timeout and cancellation control."},{"location":"Market_Info/ShowSymbolParams/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.SymbolParamsManyInfo</code> with fields (key subset):</p> Field Type Description <code>SymbolName</code> <code>string</code> Name of the symbol. <code>SymDescription</code> <code>string</code> Descriptive name/label. <code>Digits</code> <code>int32</code> Number of decimal places. <code>VolumeMin</code> <code>float64</code> Minimum allowed lot volume. <code>VolumeMax</code> <code>float64</code> Maximum allowed lot volume. <code>VolumeStep</code> <code>float64</code> Minimum lot increment. <code>CurrencyBase</code> <code>string</code> Base currency of the symbol. <code>CurrencyProfit</code> <code>string</code> Profit currency for trades in this symbol. <code>CurrencyMargin</code> <code>string</code> Margin currency for this symbol. <code>TradeMode</code> <code>int32</code> Trade mode enum (e.g., disabled/long-only)."},{"location":"Market_Info/ShowSymbolParams/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Obtain a comprehensive profile of an instrument: precision, volume constraints, currencies, and trade mode \u2014 to validate orders and display instrument config.</p>"},{"location":"Market_Info/ShowSymbolParams/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Order validation: Use <code>VolumeMin/Max/Step</code> and <code>Digits</code> to validate user inputs before <code>OrderSend</code>.</li> <li>Rounding rule: Round order volume to the nearest <code>VolumeStep</code> (never exceed <code>VolumeMax</code>).</li> <li>Precision: Format prices using <code>Digits</code>; do not hardcode decimals per symbol.</li> <li>TradeMode usage: If <code>TradeMode</code> indicates disabled/restricted, surface a clear message and skip order placement.</li> </ul>"},{"location":"Market_Info/ShowSymbolParams/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Broker differences: Parameters may vary across accounts/servers for the same symbol.</li> <li>Stale cache: Don\u2019t cache forever \u2014 refresh on reconnect or at session start.</li> <li>Step mismatch: Floating arithmetic can break step checks; compare with a small epsilon when validating steps.</li> </ul>"},{"location":"Market_Info/ShowSymbolParams/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Happy path: <code>EURUSD</code> returns non-empty description; digits match expected (e.g., 5).</li> <li>Volume bounds: Try <code>VolumeMin - \u03b5</code> and <code>VolumeMax + \u03b5</code> \u2192 validation rejects.</li> <li>Mode edge: Force a symbol with restricted <code>TradeMode</code> \u2192 UI/action must block placing orders.</li> </ul>"},{"location":"Market_Info/ShowSymbols/","title":"Getting Basic Symbol List","text":"<p>Request: retrieve symbol names and indices available in the terminal Returns a simplified list of available trading symbols and their corresponding internal indices.</p>"},{"location":"Market_Info/ShowSymbols/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints all available symbols with indices.\nsvc.ShowSymbols(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\ndata, err := account.Symbols(ctx)\nif err != nil {\n    log.Fatalf(\"\u274c Symbols error: %v\", err)\n}\n\nfmt.Println(\"=== Available Symbols ===\")\nfor _, symbolInfo := range data.GetSymbolNameInfos() {\n    fmt.Printf(\"Symbol: %s, Index: %d\\n\",\n        symbolInfo.GetSymbolName(),\n        symbolInfo.GetSymbolIndex())\n}\n</code></pre>"},{"location":"Market_Info/ShowSymbols/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowSymbols(ctx context.Context)\n</code></pre>"},{"location":"Market_Info/ShowSymbols/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> For timeout and cancellation."},{"location":"Market_Info/ShowSymbols/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.SymbolsData</code> with:</p> Field Type Description <code>SymbolNameInfos</code> <code>[]*pb.SymbolNameIndexPair</code> Pairs of symbol name and index. <p>Each <code>*pb.SymbolNameIndexPair</code> includes:</p> Field Type Description <code>SymbolName</code> <code>string</code> The name of the trading symbol. <code>SymbolIndex</code> <code>int32</code> The internal index for that symbol."},{"location":"Market_Info/ShowSymbols/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Fetch a clean list of symbols from the terminal for:</p> <ul> <li>Populating symbol dropdowns and selectors</li> <li>Filtering instruments by index</li> <li>Lightweight enumeration for setup/diagnostics</li> </ul>"},{"location":"Market_Info/ShowSymbols/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Index stability: <code>SymbolIndex</code> can change after terminal restarts/updates. Key by <code>SymbolName</code> if you need persistence.</li> <li>Sorting: The API doesn\u2019t guarantee order. Sort client-side for deterministic UI.</li> <li>Suffixes: Treat broker suffixes (e.g., <code>EURUSD.m</code>) as distinct symbols; don\u2019t auto-normalize.</li> </ul>"},{"location":"Market_Info/ShowSymbols/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Large lists: Avoid printing thousands of lines to stdout; prefer paging or file output.</li> <li>Empty result: A stale/disconnected terminal may yield an empty list without error \u2014 add a sanity check (expect common pairs).</li> </ul>"},{"location":"Market_Info/ShowTickValues/","title":"Getting Tick Value, Size, and Contract Size","text":"<p>Request: retrieve tick value, tick size, and contract size for multiple symbols Useful for calculating profit/loss and position sizing.</p>"},{"location":"Market_Info/ShowTickValues/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints tick value/size/contract size for given symbols.\nsymbols := []string{\"EURUSD\", \"XAUUSD\"}\nsvc.ShowTickValues(ctx, symbols)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nsymbols := []string{\"EURUSD\", \"XAUUSD\"}\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\ndata, err := account.TickValueWithSize(ctx, symbols)\nif err != nil {\n    log.Fatalf(\"\u274c TickValueWithSize error: %v\", err)\n}\n\nfor _, info := range data.Infos {\n    fmt.Printf(\"\ud83d\udcb9 Symbol: %s\\n  TickValue: %.5f\\n  TickSize: %.5f\\n  ContractSize: %.2f\\n\\n\",\n        info.GetSymbolName(),\n        info.GetTradeTickValue(),\n        info.GetTradeTickSize(),\n        info.GetTradeContractSize(),\n    )\n}\n</code></pre>"},{"location":"Market_Info/ShowTickValues/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowTickValues(ctx context.Context, symbols []string)\n</code></pre>"},{"location":"Market_Info/ShowTickValues/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>symbols</code> <code>[]string</code> List of trading symbols (e.g., \"EURUSD\"). <code>ctx</code> <code>context.Context</code> For timeout and cancellation management."},{"location":"Market_Info/ShowTickValues/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.TickValueWithSizeData</code> containing:</p> Field Type Description <code>Infos</code> <code>[]*pb.TickValueWithSizeSymbolInfo</code> Tick-related info per symbol. <p>Each <code>*pb.TickValueWithSizeSymbolInfo</code> includes:</p> Field Type Description <code>SymbolName</code> <code>string</code> Trading symbol (e.g., \"EURUSD\"). <code>TradeTickValue</code> <code>float64</code> Value of one tick in account currency. <code>TradeTickSize</code> <code>float64</code> Smallest possible price movement. <code>TradeContractSize</code> <code>float64</code> Units per lot (e.g., 100000 for major FX)."},{"location":"Market_Info/ShowTickValues/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Access core trading calculations such as:</p> <ul> <li>Estimating profit/loss per tick movement</li> <li>Determining pip/tick monetary value</li> <li>Building accurate position sizing formulas</li> </ul>"},{"location":"Market_Info/ShowTickValues/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Currency context: <code>TradeTickValue</code> is in the account currency. Cross-currency symbols will factor broker conversions.</li> <li>From tick to pip: If you need pip value, convert via symbol <code>Point/Digits</code> from <code>SymbolParams</code>.</li> <li>Vector use: Prefer this batched call over per-symbol queries when working with lists.</li> </ul>"},{"location":"Market_Info/ShowTickValues/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Empty input: The API requires at least one symbol \u2014 calling with an empty slice returns an error.</li> <li>Mixed asset classes: Contract sizes differ across FX, metals, indices \u2014 don\u2019t assume <code>100000</code> universally.</li> <li>Precision: Use appropriate formatting; keep raw floats for calculations.</li> </ul>"},{"location":"Order_Operations/Order_Operations_Overview/","title":"Order Operations \u2014 Overview","text":"<p>This section groups together methods for managing orders: creating, modifying, closing, deleting, and retrieving their details. It\u2019s the practical toolkit for working with active and historical trades.</p>"},{"location":"Order_Operations/Order_Operations_Overview/#methods-in-this-section","title":"\ud83d\udcc2 Methods in this Section","text":"<ul> <li> <p>ShowOrderSendExample.md   Example of placing a new order.</p> </li> <li> <p>ShowOrderModifyExample.md   Example of updating SL/TP or other order parameters.</p> </li> <li> <p>ShowOpenedOrders.md   Get full details of all currently opened orders.</p> </li> <li> <p>ShowOpenedOrderTickets.md   Stream only the ticket IDs of active orders.</p> </li> <li> <p>ShowOrderCloseExample.md   Standard order close example by ticket.</p> </li> <li> <p>ShowOrderCloseByExample.md   Demonstrates closing one order against another (<code>CloseBy</code>).</p> </li> <li> <p>ShowOrderDeleteExample.md   Example of deleting a pending order.</p> </li> <li> <p>ShowOrdersHistory.md   Retrieve closed trades within a selected date range.</p> </li> </ul>"},{"location":"Order_Operations/Order_Operations_Overview/#example-workflow","title":"\u26a1 Example Workflow","text":"<pre><code>// Example: lifecycle of an order\n\n// 1. Place an order (via Send) -&gt; returns ticket\nticket := 123456\n\n// 2. Modify order parameters (SL/TP)\nsvc.ShowOrderModifyExample(ctx, ticket)\n\n// 3. Monitor open orders\nsvc.ShowOpenedOrders(ctx)\n\n// 4. Option A: Close directly\nsvc.ShowOrderCloseExample(ctx, ticket)\n\n// 5. Option B: Use CloseBy to offset positions\nsvc.ShowOrderCloseByExample(ctx, ticket)\n\n// 6. Review historical performance\nsvc.ShowOrdersHistory(ctx)\n</code></pre>"},{"location":"Order_Operations/Order_Operations_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Always fetch OpenedOrders before attempting modifications/closures.</li> <li>Use <code>ShowOrderModifyExample</code> instead of re-sending orders for SL/TP updates.</li> <li>Delete pending orders you no longer need to keep account clean.</li> <li>Store historical results using <code>ShowOrdersHistory</code> for analytics and compliance.</li> </ol>"},{"location":"Order_Operations/Order_Operations_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The methods in this section are for full lifecycle management of trades:</p> <ul> <li>Open \u2192 Modify \u2192 Monitor \u2192 Close/Delete \u2192 Audit.</li> <li>Simplifies automation logic.</li> <li>Ensures robust error handling for every order action.</li> </ul> <p>\ud83d\udc49 Use this overview as a map and follow links to each <code>.md</code> file for complete details.</p>"},{"location":"Order_Operations/ShowOpenedOrderTickets/","title":"Getting Opened Order Tickets","text":"<p>Request: fetch only the tickets (IDs) of currently opened orders Retrieve a lightweight ticket list without full order details.</p>"},{"location":"Order_Operations/ShowOpenedOrderTickets/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints all currently opened order tickets.\nsvc.ShowOpenedOrderTickets(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\nticketsData, err := account.OpenedOrdersTickets(ctx)\nif err != nil {\n    log.Fatalf(\"\u274c OpenedOrdersTickets error: %v\", err)\n}\n\nfor _, ticket := range ticketsData.GetTickets() {\n    fmt.Printf(\"Open Order Ticket: %d\\n\", ticket)\n}\n</code></pre>"},{"location":"Order_Operations/ShowOpenedOrderTickets/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOpenedOrderTickets(ctx context.Context)\n</code></pre>"},{"location":"Order_Operations/ShowOpenedOrderTickets/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> For timeout and cancellation control"},{"location":"Order_Operations/ShowOpenedOrderTickets/#output","title":"\u2b06\ufe0f Output","text":"<p>This method prints the ticket IDs of opened orders to stdout. Underlying response: <code>*pb.OpenedOrdersTicketsData</code></p> Field Type Description <code>Tickets</code> <code>[]uint64</code> List of ticket IDs for opened orders"},{"location":"Order_Operations/ShowOpenedOrderTickets/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Retrieve only open order IDs without full details. Useful for:</p> <ul> <li>Rapid synchronization or order tracking</li> <li>Lightweight matching against local state</li> <li>Selecting targets for modification/cancellation</li> </ul>"},{"location":"Order_Operations/ShowOpenedOrderTickets/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Tickets only: To inspect volumes, prices, or symbols, follow up with <code>OpenedOrders</code> or <code>HistoryOrderByTicket</code>.</li> <li>Uniqueness: Ticket IDs are unique per account; always treat them as <code>uint64</code>.</li> <li>Performance: Ideal for high-frequency polling or lightweight checks.</li> </ul>"},{"location":"Order_Operations/ShowOpenedOrderTickets/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>No orders open: The API returns an empty slice, not <code>nil</code>. Always handle gracefully.</li> <li>Stale state: If orders are rapidly opened/closed, snapshot may be outdated in milliseconds. For real-time, use streams if available.</li> </ul>"},{"location":"Order_Operations/ShowOpenedOrders/","title":"Getting Opened Orders","text":"<p>Request: retrieve currently opened orders from MT4 Fetch all active (non-closed) trade positions on the account.</p>"},{"location":"Order_Operations/ShowOpenedOrders/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints all currently opened orders with details.\nsvc.ShowOpenedOrders(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\ndefer cancel()\n\nordersData, err := account.OpenedOrders(ctx)\nif err != nil {\n    log.Fatalf(\"\u274c OpenedOrders error: %v\", err)\n}\n\nfor _, order := range ordersData.GetOrderInfos() {\n    fmt.Printf(\"[%s] Ticket: %d | Symbol: %s | Lots: %.2f | OpenPrice: %.5f | Profit: %.2f\\n\",\n        order.GetOrderType(),\n        order.GetTicket(),\n        order.GetSymbol(),\n        order.GetLots(),\n        order.GetOpenPrice(),\n        order.GetProfit(),\n    )\n}\n</code></pre>"},{"location":"Order_Operations/ShowOpenedOrders/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOpenedOrders(ctx context.Context)\n</code></pre>"},{"location":"Order_Operations/ShowOpenedOrders/#input","title":"\ud83d\udd3d Input","text":"<p>Required:</p> <ul> <li><code>ctx</code> (<code>context.Context</code>) \u2014 context for managing timeout or cancellation.</li> </ul>"},{"location":"Order_Operations/ShowOpenedOrders/#output","title":"\u2b06\ufe0f Output","text":"<p>This method prints opened order information to stdout and does not return data directly. The printed output includes:</p> Field Type Description <code>Ticket</code> <code>int32</code> Unique ticket ID for the order. <code>Symbol</code> <code>string</code> Trading symbol (e.g., \"EURUSD\"). <code>Lots</code> <code>float64</code> Volume of the order in lots. <code>OpenPrice</code> <code>float64</code> Price at which the order was opened. <code>Profit</code> <code>float64</code> Current floating profit/loss of the order. <code>OrderType</code> <code>ENUM_ORDER_TYPE_TF</code> Type of the order (Buy, Sell, etc.)."},{"location":"Order_Operations/ShowOpenedOrders/#enum-enum_order_type_tf","title":"ENUM: <code>ENUM_ORDER_TYPE_TF</code>","text":"Value Description <code>OrderTypeTfBuy</code> Buy order <code>OrderTypeTfSell</code> Sell order <code>OrderTypeTfBuyLimit</code> Pending Buy Limit <code>OrderTypeTfSellLimit</code> Pending Sell Limit <code>OrderTypeTfBuyStop</code> Pending Buy Stop <code>OrderTypeTfSellStop</code> Pending Sell Stop"},{"location":"Order_Operations/ShowOpenedOrders/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Use this method to retrieve and display a list of all currently open orders. Useful for:</p> <ul> <li>Monitoring active positions</li> <li>Building command-line dashboards with real-time order info</li> <li>Analyzing trade exposure, floating profit/loss, and position distribution</li> </ul> <p>Provides essential functionality for real-time monitoring in MT4 integrations.</p>"},{"location":"Order_Operations/ShowOrderCloseByExample/","title":"Closing an Order by Opposite Order","text":"<p>Request: close one order using another opposite-position order Sends a request to close a position by matching it with an opposite order. </p>"},{"location":"Order_Operations/ShowOrderCloseByExample/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Closes one order by its opposite order.\nsvc.ShowOrderCloseByExample(ctx, 123456, 654321)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n// \u26a0\ufe0f This action closes trades \u2014 use on demo or with caution.\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nresult, err := account.OrderCloseBy(ctx, 123456, 654321)\nif err != nil {\n    log.Fatalf(\"\u274c OrderCloseBy error: %v\", err)\n}\n\nfmt.Printf(\"Closed by opposite: Profit=%.2f, Price=%.5f, Time: %s\\n\",\n    result.GetProfit(),\n    result.GetClosePrice(),\n    result.GetCloseTime().AsTime().Format(\"2006-01-02 15:04:05\"),\n)\n</code></pre>"},{"location":"Order_Operations/ShowOrderCloseByExample/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOrderCloseByExample(ctx context.Context, ticket int32, oppositeTicket int32)\n</code></pre>"},{"location":"Order_Operations/ShowOrderCloseByExample/#input","title":"\ud83d\udd3d Input","text":"<p>Required:</p> Field Type Description <code>ctx</code> <code>context.Context</code> Context for timeout or cancellation. <code>ticket</code> <code>int32</code> The primary order ticket to be closed. <code>oppositeTicket</code> <code>int32</code> The opposite-position order to close with. <p>Both tickets must be valid and represent opposing open positions.</p>"},{"location":"Order_Operations/ShowOrderCloseByExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.OrderCloseByData</code> with fields:</p> Field Type Description <code>Profit</code> <code>float64</code> Profit/loss realized from closing. <code>ClosePrice</code> <code>float64</code> The closing price of the operation. <code>CloseTime</code> <code>timestamp</code> The time the orders were closed."},{"location":"Order_Operations/ShowOrderCloseByExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Close one position with another opposite-position order. Useful for:</p> <ul> <li>Trade netting workflows</li> <li>Reducing exposure by pairing positions</li> <li>Closing multiple positions efficiently</li> </ul>"},{"location":"Order_Operations/ShowOrderCloseByExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Same symbol required: Both tickets must be for the same symbol and opposite directions.</li> <li>Partial overlap: If lot sizes differ, only the overlapping volume is closed; the larger position remains with the residual volume.</li> <li>Ticket types: Tickets are <code>int32</code> in your API; avoid mixing with <code>uint64</code> types used elsewhere.</li> </ul>"},{"location":"Order_Operations/ShowOrderCloseExample/","title":"Closing an Order","text":"<p>Request: close or delete an active order by its ticket Sends a request to terminate the specified trade.</p>"},{"location":"Order_Operations/ShowOrderCloseExample/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Closes an order by ticket and prints result.\nsvc.ShowOrderCloseExample(ctx, 123456)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n// \u26a0\ufe0f This actually closes a trade \u2014 use on demo or with caution.\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nres, err := account.OrderClose(ctx, 123456, nil, nil, nil)\nif err != nil {\n    log.Fatalf(\"\u274c OrderClose error: %v\", err)\n}\n\nfmt.Printf(\"Closed: %s | Comment: %s\\n\",\n    res.GetMode(),\n    res.GetHistoryOrderComment(),\n)\n</code></pre>"},{"location":"Order_Operations/ShowOrderCloseExample/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOrderCloseExample(ctx context.Context, ticket int32)\n</code></pre>"},{"location":"Order_Operations/ShowOrderCloseExample/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> Timeout / cancellation control. <code>ticket</code> <code>int32</code> Ticket of the order to close. <code>price</code> <code>*float64</code> Optional close price. <code>slip</code> <code>*int32</code> Optional slippage (points). <code>magic</code> <code>*int32</code> Optional magic ID."},{"location":"Order_Operations/ShowOrderCloseExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Result object:</p> Field Type Description <code>Mode</code> <code>string</code> Operation result (e.g., \"Closed\"). <code>HistoryOrderComment</code> <code>string</code> Server comment on the closure operation."},{"location":"Order_Operations/ShowOrderCloseExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Close or delete an order by ticket. Useful for manual interventions, post-trade cleanup, or testing order workflows.</p>"},{"location":"Order_Operations/ShowOrderDeleteExample/","title":"Deleting a Pending Order","text":"<p>Request: delete a pending order by its ticket Sends a request to remove a pending order from the trading terminal.</p>"},{"location":"Order_Operations/ShowOrderDeleteExample/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Deletes a pending order by ticket.\n// \u26a0\ufe0f Works only for pending orders (BuyLimit, SellLimit, etc.).\nsvc.ShowOrderDeleteExample(ctx, 123456)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n// \u26a0\ufe0f Use only with pending orders. For active Buy/Sell use OrderClose.\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\ndata, err := account.OrderDelete(ctx, 123456)\nif err != nil {\n    log.Fatalf(\"\u274c OrderDelete error: %v\", err)\n}\n\nfmt.Printf(\"Order deleted. Mode: %s, Comment: %s\\n\",\n    data.GetMode(),\n    data.GetHistoryOrderComment(),\n)\n</code></pre>"},{"location":"Order_Operations/ShowOrderDeleteExample/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOrderDeleteExample(ctx context.Context, ticket int32)\n</code></pre>"},{"location":"Order_Operations/ShowOrderDeleteExample/#input","title":"\ud83d\udd3d Input","text":"<p>Required:</p> Field Type Description <code>ctx</code> <code>context.Context</code> Timeout or cancellation management. <code>ticket</code> <code>int32</code> Ticket number of the pending order. <p>The ticket must reference a pending order.</p>"},{"location":"Order_Operations/ShowOrderDeleteExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.OrderCloseDeleteData</code>:</p> Field Type Description <code>Mode</code> <code>string</code> Operation result (e.g., \"Deleted\"). <code>HistoryOrderComment</code> <code>string</code> Server comment about the deleted order."},{"location":"Order_Operations/ShowOrderDeleteExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Remove limit/stop orders that are no longer needed:</p> <ul> <li>Cancel pending orders before execution</li> <li>Manage pending order queues</li> <li>Clean up unused test/training orders</li> </ul>"},{"location":"Order_Operations/ShowOrderDeleteExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Pending only: For open market positions use <code>OrderClose</code>, not <code>OrderDelete</code>.</li> <li>Idempotency: If the order is already filled/expired/cancelled, the API may return an error with a broker comment.</li> <li>No price/slippage: Delete uses only the ticket; price and slippage parameters are not applicable.</li> </ul>"},{"location":"Order_Operations/ShowOrderModifyExample/","title":"Modifying an Order","text":"<p>Request: modify parameters (SL/TP) of an existing open order by its ticket Sends a request to update the stop loss and take profit values of a specified order.</p>"},{"location":"Order_Operations/ShowOrderModifyExample/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Modifies SL/TP for an order by ticket.\n// \u26a0\ufe0f This changes a live trade \u2014 use on demo or with caution.\nsvc.ShowOrderModifyExample(ctx, 123456)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nnewSL := 1.0500\nnewTP := 1.0900\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nmodified, err := account.OrderModify(ctx, 123456, nil, &amp;newSL, &amp;newTP, nil)\nif err != nil {\n    log.Fatalf(\"\u274c OrderModify error: %v\", err)\n}\n\nif modified {\n    fmt.Println(\"\u2705 Order successfully modified.\")\n} else {\n    fmt.Println(\"\u26a0\ufe0f Order was NOT modified.\")\n}\n</code></pre>"},{"location":"Order_Operations/ShowOrderModifyExample/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOrderModifyExample(ctx context.Context, ticket int32)\n</code></pre>"},{"location":"Order_Operations/ShowOrderModifyExample/#input","title":"\ud83d\udd3d Input","text":"<p>Required:</p> <ul> <li><code>ctx</code> (<code>context.Context</code>) \u2014 context for managing timeout or cancellation.</li> <li><code>ticket</code> (<code>int32</code>) \u2014 The ticket number of the order to modify.</li> </ul> <p>Optional parameters (when directly using MT4Account):</p> Field Type Description <code>price</code> <code>*float64</code> New price (used mainly for pending). <code>stopLoss</code> <code>*float64</code> New stop loss level. <code>takeProfit</code> <code>*float64</code> New take profit level. <code>expiration</code> <code>*timestamppb.Timestamp</code> New expiration (pending orders). <p>At least one of <code>price</code>, <code>stopLoss</code>, <code>takeProfit</code>, <code>expiration</code> must be provided.</p>"},{"location":"Order_Operations/ShowOrderModifyExample/#output","title":"\u2b06\ufe0f Output","text":"<p>The method prints whether modification succeeded. Underlying response: <code>*pb.OrderModifyReply</code> \u2192 <code>Data.OrderWasModified</code> (<code>bool</code>).</p>"},{"location":"Order_Operations/ShowOrderModifyExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Adjust SL/TP (and, for pendings, price/expiration) on active orders\u2014useful for dynamic risk management and strategy updates.</p>"},{"location":"Order_Operations/ShowOrderModifyExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Digits &amp; rounding: Use <code>Digits</code> from <code>SymbolParams</code> to format/round SL/TP; avoid hardcoded decimals.</li> <li>Volume/price rules: Brokers enforce minimal distances/steps for SL/TP and pending prices; validate before sending to reduce rejects.</li> <li>No-op guard: If all optional params are <code>nil</code>, nothing will change; treat as a no-op.</li> </ul>"},{"location":"Order_Operations/ShowOrderModifyExample/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Closed/non-existent ticket: Will fail with a server-side error (e.g., ticket not found).</li> <li>Invalid levels: SL above price on sells (or below on buys), TP in the wrong direction, or levels inside the minimal distance will be rejected.</li> </ul>"},{"location":"Order_Operations/ShowOrderSendExample/","title":"Sending a Market or Pending Order","text":"<p>Request: send a trade order (market or pending) Sends a new order using the specified parameters and receives back execution details.</p>"},{"location":"Order_Operations/ShowOrderSendExample/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Opens a BUY order and prints ticket/price/time.\n// \u26a0\ufe0f This places a real trade \u2014 use on demo or with caution.\nsvc.ShowOrderSendExample(ctx, \"EURUSD\")\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nresult, err := account.OrderSend(\n    ctx,\n    \"EURUSD\",\n    pb.OrderSendOperationType_OC_OP_BUY, // order type: Buy\n    0.1,                                 // lots\n    nil,                                 // price (nil = market)\n    ptrInt32(5),                         // slippage\n    ptrFloat64(1.0500),                  // stop loss\n    ptrFloat64(1.0900),                  // take profit\n    ptrString(\"Go order test\"),          // comment\n    ptrInt32(123456),                    // magic number\n    nil,                                 // expiration\n)\nif err != nil {\n    log.Fatalf(\"\u274c OrderSend error: %v\", err)\n}\n\nfmt.Printf(\"\u2705 Order opened! Ticket: %d, Price: %.5f, Time: %s\\n\",\n    result.GetTicket(),\n    result.GetPrice(),\n    result.GetOpenTime().AsTime().Format(\"2006-01-02 15:04:05\"),\n)\n</code></pre>"},{"location":"Order_Operations/ShowOrderSendExample/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOrderSendExample(ctx context.Context, symbol string)\n</code></pre>"},{"location":"Order_Operations/ShowOrderSendExample/#input","title":"\ud83d\udd3d Input","text":"<p>Required:</p> Field Type Description <code>ctx</code> <code>context.Context</code> Timeout or cancellation management. <code>symbol</code> <code>string</code> Trading symbol (e.g., \"EURUSD\"). <code>orderType</code> <code>pb.OrderSendOperationType</code> Type of order (market/pending). <code>volume</code> <code>float64</code> Order volume in lots (e.g., 0.1). <p>Optional (when calling <code>MT4Account.OrderSend</code> directly):</p> Field Type Description <code>price</code> <code>*float64</code> Price for pending orders; <code>nil</code> for market. <code>slippage</code> <code>*int32</code> Max slippage (points). <code>stopLoss</code> <code>*float64</code> Stop Loss price. <code>takeProfit</code> <code>*float64</code> Take Profit price. <code>comment</code> <code>*string</code> Optional order comment. <code>magic</code> <code>*int32</code> Magic number tag. <code>expiration</code> <code>*timestamppb.Timestamp</code> Expiration (pending orders only)."},{"location":"Order_Operations/ShowOrderSendExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Returns <code>*pb.OrderSendData</code>:</p> Field Type Description <code>Ticket</code> <code>int32</code> Unique order ID assigned by MT4. <code>Price</code> <code>float64</code> Actual execution price. <code>OpenTime</code> <code>timestamp</code> Time when order was executed (UTC)."},{"location":"Order_Operations/ShowOrderSendExample/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Place new trade orders (market or pending), controlling volume, price, and risk parameters. The result confirms ticket number, execution price, and open time for tracking/logging.</p>"},{"location":"Order_Operations/ShowOrderSendExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Timeouts: Your implementation sets a default 5s timeout if none is provided \u2014 keep calls bounded.</li> <li>Volume validation: Ensure <code>volume</code> respects <code>VolumeMin/Max</code> and <code>VolumeStep</code> from <code>SymbolParams</code> before sending.</li> <li>Pending orders: <code>price</code> must be provided for pending types; for market orders it should be <code>nil</code>.</li> <li>Types: <code>slippage</code> is <code>*int32</code>, <code>magic</code> is <code>*int32</code>, <code>expiration</code> uses protobuf timestamp.</li> </ul>"},{"location":"Order_Operations/ShowOrderSendExample/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Not connected: When terminal is not connected, API returns <code>\"not connected\"</code>.</li> <li>Rejected by broker: Invalid SL/TP distances, disabled trading, or wrong price for pending orders will cause API errors.</li> <li>Races: Price can move between validation and send; expect slippage/requotes depending on broker settings.</li> </ul>"},{"location":"Order_Operations/ShowOrdersHistory/","title":"Getting Order History","text":"<p>Request: retrieve historical orders for a specified time range Fetch all closed orders from the trading account history within a defined window.</p>"},{"location":"Order_Operations/ShowOrdersHistory/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints order history for the last 7 days.\nsvc.ShowOrdersHistory(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nfrom := time.Now().AddDate(0, 0, -7)\nto   := time.Now()\n\nctx, cancel := context.WithTimeout(context.Background(), 8*time.Second)\ndefer cancel()\n\nhistory, err := account.OrdersHistory(\n    ctx,\n    pb.EnumOrderHistorySortType_HISTORY_SORT_BY_CLOSE_TIME_DESC,\n    &amp;from, &amp;to,\n    nil, nil, // page &amp; itemsPerPage (optional)\n)\nif err != nil {\n    log.Fatalf(\"\u274c OrdersHistory error: %v\", err)\n}\n\nfor _, order := range history.GetOrdersInfo() {\n    fmt.Printf(\"[%s] Ticket: %d | Symbol: %s | Lots: %.2f | Open: %.5f | Close: %.5f | Profit: %.2f | Closed: %s\\n\",\n        order.GetOrderType(),\n        order.GetTicket(),\n        order.GetSymbol(),\n        order.GetLots(),\n        order.GetOpenPrice(),\n        order.GetClosePrice(),\n        order.GetProfit(),\n        order.GetCloseTime().AsTime().Format(\"2006-01-02 15:04:05\"),\n    )\n}\n</code></pre>"},{"location":"Order_Operations/ShowOrdersHistory/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) ShowOrdersHistory(ctx context.Context)\n</code></pre>"},{"location":"Order_Operations/ShowOrdersHistory/#input","title":"\ud83d\udd3d Input","text":"<p>Required:</p> <ul> <li><code>ctx</code> (<code>context.Context</code>) \u2014 context for managing timeout or cancellation.</li> </ul> <p>Method internally uses (when calling <code>MT4Account.OrdersHistory</code>):</p> Field Type Description <code>sortType</code> <code>pb.EnumOrderHistorySortType</code> Sorting logic. <code>from</code> <code>*time.Time</code> Start time of the history window. <code>to</code> <code>*time.Time</code> End time of the history window. <code>page</code> <code>*int32</code> Page number (optional). <code>items</code> <code>*int32</code> Items per page (optional). <p>Possible <code>EnumOrderHistorySortType</code> values:</p> <ul> <li><code>HISTORY_SORT_BY_OPEN_TIME_ASC</code></li> <li><code>HISTORY_SORT_BY_OPEN_TIME_DESC</code></li> <li><code>HISTORY_SORT_BY_CLOSE_TIME_ASC</code></li> <li><code>HISTORY_SORT_BY_CLOSE_TIME_DESC</code></li> </ul>"},{"location":"Order_Operations/ShowOrdersHistory/#output","title":"\u2b06\ufe0f Output","text":"<p>Prints closed order information to stdout. Underlying response: <code>*pb.OrdersHistoryData</code></p> Field Type Description <code>OrdersInfo</code> (slice) List of historical (closed) orders. <p>Printed fields typically include:</p> Field Type Description <code>Ticket</code> <code>int32</code> Unique ID of the order. <code>Symbol</code> <code>string</code> Trading symbol (e.g., EURUSD). <code>Lots</code> <code>float64</code> Volume of the order in lots. <code>OpenPrice</code> <code>float64</code> Entry price of the order. <code>ClosePrice</code> <code>float64</code> Exit price of the order. <code>Profit</code> <code>float64</code> Final realized profit/loss. <code>OrderType</code> <code>ENUM_ORDER_TYPE_TF</code> Type of order (Buy, Sell, etc.). <code>OpenTime</code> <code>timestamp</code> Time when the order was opened. <code>CloseTime</code> <code>timestamp</code> Time when the order was closed. <code>Sl</code> <code>float64</code> Stop Loss price (if set). <code>Tp</code> <code>float64</code> Take Profit price (if set). <code>Magic</code> <code>int32</code> Magic number for programmatic orders. <code>Comment</code> <code>string</code> Custom comment attached to the order. <code>Expiration</code> <code>timestamp</code> Expiration time for pending orders."},{"location":"Order_Operations/ShowOrdersHistory/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Pagination: Use <code>page</code> and <code>itemsPerPage</code> for large ranges to avoid oversized payloads.</li> <li>Sorting: Choose <code>sortType</code> based on how you plan to display/export results (by open vs close time).</li> <li>Time window: If <code>from</code>/<code>to</code> are nil, the server may apply defaults; pass both for deterministic results.</li> </ul>"},{"location":"Order_Operations/ShowOrdersHistory/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Wide ranges: Very large windows can be slow/heavy; prefer paged requests.</li> <li>Broker discrepancies: History can differ slightly across servers/brokers for the same symbol.</li> <li>Status vs fills: This is order history; if you need individual fills/deals, use the corresponding deals endpoint.</li> </ul>"},{"location":"Order_Operations/ShowOrdersHistory/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Retrieve completed trades in a specified time frame for:</p> <ul> <li>Historical trade analysis and reporting</li> <li>Auditing and compliance exports</li> <li>Reconciliation with external systems</li> </ul>"},{"location":"Streaming/StreamOpenedOrderProfits/","title":"\u26a1 Streaming Opened Order Profits","text":"<p>Request: subscribe to real-time stream of floating profit/loss per open order Starts a streaming channel to monitor floating profit for all active trades.</p>"},{"location":"Streaming/StreamOpenedOrderProfits/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Streams profit updates for opened orders; stops after ~30s in demo.\nsvc.StreamOpenedOrderProfits(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\n// Interval in milliseconds (server pulls/aggregates updates)\nprofitCh, errCh := account.OnOpenedOrdersProfit(ctx, 1000)\n\nfmt.Println(\"\ud83d\udd04 Streaming order profits...\")\n\nfor {\n    select {\n    case profit, ok := &lt;-profitCh:\n        if !ok {\n            fmt.Println(\"\u2705 Profit stream ended.\")\n            return\n        }\n        for _, info := range profit.OpenedOrdersWithProfitUpdated {\n            fmt.Printf(\"[Profit] Ticket: %d | Symbol: %s | Profit: %.2f\\n\",\n                info.Ticket, info.Symbol, info.OrderProfit)\n        }\n\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n\n    case &lt;-time.After(30 * time.Second): // demo timeout\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Streaming/StreamOpenedOrderProfits/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) StreamOpenedOrderProfits(ctx context.Context)\n</code></pre>"},{"location":"Streaming/StreamOpenedOrderProfits/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> For stream lifetime control and cancellation. <code>intervalMs</code> <code>int</code> Polling interval between updates in milliseconds. <p>In the wrapper, <code>intervalMs</code> defaults to 1000 ms.</p>"},{"location":"Streaming/StreamOpenedOrderProfits/#output","title":"\u2b06\ufe0f Output","text":"<p>Stream of per-order profit updates. Underlying response: <code>*pb.OnOpenedOrdersProfitData</code></p> <p>Each update contains entries like <code>OnOpenedOrdersProfitOrderInfo</code>:</p> Field Type Description <code>Ticket</code> <code>int32</code> Order ticket ID. <code>Symbol</code> <code>string</code> Trading symbol (e.g., \"EURUSD\"). <code>Lots</code> <code>float64</code> Trade volume in lots. <code>Profit</code> <code>float64</code> Current floating profit/loss. <code>OpenPrice</code> <code>float64</code> Order open price. <code>CurrentPrice</code> <code>float64</code> Current market price. <code>OpenTime</code> <code>timestamp</code> Order open time. <code>OrderType</code> <code>ENUM_ORDER_TYPE_TF</code> Trade type. <code>Magic</code> <code>int32</code> Strategy/magic number. <code>Comment</code> <code>string</code> Order comment."},{"location":"Streaming/StreamOpenedOrderProfits/#enum-enum_order_type_tf","title":"ENUM: <code>ENUM_ORDER_TYPE_TF</code>","text":"Value Description <code>OrderTypeTfBuy</code> Buy order <code>OrderTypeTfSell</code> Sell order <code>OrderTypeTfBuyLimit</code> Pending Buy Limit <code>OrderTypeTfSellLimit</code> Pending Sell Limit <code>OrderTypeTfBuyStop</code> Pending Buy Stop <code>OrderTypeTfSellStop</code> Pending Sell Stop"},{"location":"Streaming/StreamOpenedOrderProfits/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Enable real-time tracking of floating P/L per open order for dashboards, exposure monitoring, and alerting.</p>"},{"location":"Streaming/StreamOpenedOrderProfits/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Interval trade-off: Lower <code>intervalMs</code> \u2192 fresher updates, higher CPU/network use. 500\u20132000 ms works well for dashboards.</li> <li>Delta batches: Updates often include only orders that changed; maintain a map keyed by <code>Ticket</code> and apply deltas.</li> </ul>"},{"location":"Streaming/StreamOpenedOrderProfits/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Timeout vs cancel: Your example uses a 30s timeout; prefer explicit <code>cancel()</code> for controlled shutdowns.</li> <li>Ordering: Do not assume chronological ordering across entries; sort by <code>Ticket</code> or timestamp if needed.</li> <li>Float formatting: Round only for display; keep raw values for calculations.</li> </ul>"},{"location":"Streaming/StreamOpenedOrderProfits/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Smoke test: <code>intervalMs=1000</code> for a few minutes; verify steady updates and no leaks.</li> <li>Burst test: Open/close several orders quickly; ensure map/delta logic stays consistent.</li> <li>Shutdown: Cancel context and assert both channels close/return without blocking.</li> </ul>"},{"location":"Streaming/StreamOpenedOrderTickets/","title":"\u2728 Streaming Opened Order Tickets","text":"<p>Request: subscribe to stream of currently open order ticket numbers Returns only the ticket IDs of all open orders as they change in real time.</p>"},{"location":"Streaming/StreamOpenedOrderTickets/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Streams all opened order tickets (positions + pendings); stops after ~30s in demo.\nsvc.StreamOpenedOrderTickets(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\n// Interval in milliseconds (server polls updates)\nticketCh, errCh := account.OnOpenedOrdersTickets(ctx, 1000)\n\nfmt.Println(\"\ud83d\udd04 Streaming opened order tickets...\")\n\nfor {\n    select {\n    case pkt, ok := &lt;-ticketCh:\n        if !ok {\n            fmt.Println(\"\u2705 Ticket stream ended.\")\n            return\n        }\n        tix := append(pkt.PositionTickets, pkt.PendingOrderTickets...)\n        fmt.Printf(\"[Tickets] %d open tickets: %v\\n\", len(tix), tix)\n\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n\n    case &lt;-time.After(30 * time.Second): // demo timeout\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Streaming/StreamOpenedOrderTickets/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) StreamOpenedOrderTickets(ctx context.Context)\n</code></pre>"},{"location":"Streaming/StreamOpenedOrderTickets/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> Controls streaming lifecycle and cancellation. <code>intervalMs</code> <code>int</code> Polling interval between updates in milliseconds. <p>Wrapper default: 1000 ms.</p>"},{"location":"Streaming/StreamOpenedOrderTickets/#output","title":"\u2b06\ufe0f Output","text":"<p>Stream of <code>*pb.OnOpenedOrdersTicketsData</code> packets. Each packet contains:</p> Field Type Description <code>PositionTickets</code> <code>[]int32</code> Ticket IDs of open positions. <code>PendingOrderTickets</code> <code>[]int32</code> Ticket IDs of pending orders. <p>Combined, they represent all open orders at the time of the poll.</p>"},{"location":"Streaming/StreamOpenedOrderTickets/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Track open order ticket numbers in real time for:</p> <ul> <li>Updating active trade lists in UIs</li> <li>Detecting order creation/closure events</li> <li>Triggering targeted follow-ups (fetch details, modify/close)</li> </ul>"},{"location":"Streaming/StreamOpenedOrderTickets/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Diffing: Maintain a <code>map[int32]bool</code> of previous tickets. On each packet, compute added/removed sets to detect events.</li> <li>Batch ops: When many changes occur at once, process <code>PositionTickets</code> and <code>PendingOrderTickets</code> separately if logic differs.</li> <li>Minimal overhead: Use this stream when you only need IDs; fetch details lazily on demand.</li> </ul>"},{"location":"Streaming/StreamOpenedOrderTickets/#testing-suggestions","title":"\ud83e\uddea Testing Suggestions","text":"<ul> <li>Basic: Verify non-empty tickets when known orders are open.</li> <li>Add/Remove: Open/close orders and confirm the diffing logic detects changes.</li> <li>Timeout/Cancel: Ensure context cancel cleanly stops both channels.</li> </ul>"},{"location":"Streaming/StreamOrdersHistoryExample/","title":"\ud83d\ude80 Streaming Orders History (Example)","text":"<p>Request: Stream historical orders with sensible defaults. This demo wrapper prints pages of order history and exits after a short timeout.</p>"},{"location":"Streaming/StreamOrdersHistoryExample/#code-example","title":"Code Example","text":"<pre><code>// Quick use: prints orders from the last 30 days in pages (size=200)\n// sorted by close time (DESC). Demo loop times out after ~30s.\nsvc.StreamOrdersHistoryExample(ctx)\n</code></pre>"},{"location":"Streaming/StreamOrdersHistoryExample/#method-signature","title":"Method Signature","text":"<pre><code>// Demo wrapper: safe defaults + console printing\nfunc (s *MT4Service) StreamOrdersHistoryExample(ctx context.Context)\n</code></pre> <p>Defaults used inside the example wrapper:</p> <ul> <li>Date range: <code>from = now - 30 days</code>, <code>to = now</code></li> <li>Sort: <code>HISTORY_SORT_BY_CLOSE_TIME_DESC</code></li> <li>Page size: <code>200</code></li> <li>Demo timeout: \\~30 seconds (select-case exit)</li> </ul> <p>Under the hood, it calls the service API:</p> <pre><code>func (s *MT4Service) StreamOrdersHistory(\n    ctx context.Context,\n    sortType pb.EnumOrderHistorySortType,\n    from, to *time.Time,\n    pageSize int32,\n) (&lt;-chan *pb.OrdersHistoryData, &lt;-chan error)\n</code></pre>"},{"location":"Streaming/StreamOrdersHistoryExample/#input","title":"\ud83d\udd3d Input","text":"Field Type Required Description <code>ctx</code> <code>context.Context</code> \u2705 Controls lifetime (cancel/timeout) of stream <p>No other parameters are required for the Example wrapper; it sets safe defaults.</p>"},{"location":"Streaming/StreamOrdersHistoryExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Console output of selected fields from each page of <code>*pb.OrdersHistoryData</code>:</p> <p>For each order (<code>OrdersInfo[]</code>), the example prints:</p> <ul> <li><code>OrderType</code></li> <li><code>Ticket</code></li> <li><code>Symbol</code></li> <li><code>Profit</code></li> </ul> <p>Sample line format:</p> <pre><code>[HIST] &lt;OrderType&gt; | Ticket: &lt;id&gt; | &lt;Symbol&gt; | PnL: &lt;profit&gt;\n</code></pre> <p>Need more detail (open/close prices, times, lots, commission, etc.)? Use the low-level <code>StreamOrdersHistory</code> and print the extra fields you need. The proto model exposes them on each order.</p>"},{"location":"Streaming/StreamOrdersHistoryExample/#enum-pbenumorderhistorysorttype","title":"ENUM: <code>pb.EnumOrderHistorySortType</code>","text":"<p>Common values (check your generated <code>pb</code> for exact names):</p> <ul> <li><code>HISTORY_SORT_BY_CLOSE_TIME_DESC</code></li> <li><code>HISTORY_SORT_BY_CLOSE_TIME_ASC</code></li> <li>(others may exist depending on your schema)</li> </ul> <p>Order type enum: depends on your <code>pb</code> (e.g., <code>ORDER_TYPE_BUY</code>, <code>ORDER_TYPE_SELL</code>, <code>ORDER_TYPE_BUY_LIMIT</code>, <code>ORDER_TYPE_SELL_LIMIT</code>, <code>ORDER_TYPE_BUY_STOP</code>, <code>ORDER_TYPE_SELL_STOP</code>).</p>"},{"location":"Streaming/StreamOrdersHistoryExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Connection required: Ensure you have called <code>ConnectByServerName</code>/<code>ConnectByHostPort</code> successfully; otherwise the underlying stream will fail fast.</li> <li>Auto-reconnect: The stream layer retries on transient <code>gRPC</code>/API errors with backoff + jitter.</li> <li>Customization: For production, prefer <code>StreamOrdersHistory</code> (service API) and pass your own <code>from/to</code>, sorting, and <code>pageSize</code>.</li> <li>Throughput: If you process heavy pages, do it in a worker to avoid blocking the reader loop.</li> </ul>"},{"location":"Streaming/StreamOrdersHistoryExample/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Ignoring <code>errCh</code>: Always <code>select</code> on the error channel; otherwise you\u2019ll miss terminal failures.</li> <li>Infinite loops: The example has a demo timeout; if you remove it, make sure you still have a cancellation path.</li> <li>Large ranges: Very wide date ranges + small pages can be slow; increase <code>pageSize</code> as appropriate.</li> </ul>"},{"location":"Streaming/StreamOrdersHistoryExample/#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>Happy path: Expect multiple pages if you have many orders in the last 30 days.</li> <li>Network hiccups: Brief drops should be retried transparently; you may notice short pauses.</li> <li>Cancel path: Cancel the passed <code>ctx</code>; both channels should close and the goroutine should exit.</li> </ul>"},{"location":"Streaming/StreamQuoteHistoryExample/","title":"\ud83d\udcdd Streaming Quote History (Example)","text":"<p>Request: Stream historical price bars (OHLC) using safe defaults. This demo wrapper prints batches of candles and exits after a short timeout.</p>"},{"location":"Streaming/StreamQuoteHistoryExample/#code-example","title":"Code Example","text":"<pre><code>// Quick use: last 90 days of H1 candles for a symbol,\n// delivered in weekly chunks. Demo loop times out after ~30s.\nsvc.StreamQuoteHistoryExample(ctx, \"EURUSD\")\n</code></pre>"},{"location":"Streaming/StreamQuoteHistoryExample/#method-signature","title":"Method Signature","text":"<pre><code>// Demo wrapper: safe defaults + console printing\nfunc (s *MT4Service) StreamQuoteHistoryExample(ctx context.Context, symbol string)\n</code></pre> <p>Defaults used inside the example wrapper:</p> <ul> <li>Date range: <code>from = now - 90 days</code>, <code>to = now</code></li> <li>Timeframe: <code>QH_PERIOD_H1</code></li> <li>Chunk duration: <code>7 * 24h</code> (weekly)</li> <li>Demo timeout: \\~30 seconds (select-case exit)</li> </ul> <p>Under the hood, it calls the service API:</p> <pre><code>func (s *MT4Service) StreamQuoteHistory(\n    ctx context.Context,\n    symbol string,\n    timeframe pb.ENUM_QUOTE_HISTORY_TIMEFRAME,\n    from, to time.Time,\n    chunk time.Duration,\n) (&lt;-chan *pb.QuoteHistoryData, &lt;-chan error)\n</code></pre>"},{"location":"Streaming/StreamQuoteHistoryExample/#input","title":"\ud83d\udd3d Input","text":"Field Type Required Description <code>ctx</code> <code>context.Context</code> \u2705 Controls lifetime (cancel/timeout) of stream <code>symbol</code> <code>string</code> \u2705 Trading symbol, e.g. <code>\"EURUSD\"</code> <p>The Example wrapper fixes timeframe/chunk/range to sensible defaults. Use the service API for full control.</p>"},{"location":"Streaming/StreamQuoteHistoryExample/#output","title":"\u2b06\ufe0f Output","text":"<p>Console output of OHLC bars from each <code>*pb.QuoteHistoryData</code> batch. For each candle, the example prints:</p> <ul> <li><code>Time</code> (UTC),</li> <li><code>Open</code>, <code>Close</code> (and can be extended to <code>High</code>, <code>Low</code>).</li> </ul> <p>Sample line format:</p> <pre><code>[YYYY-mm-dd HH:MM:SS] O: &lt;open&gt; C: &lt;close&gt;\n</code></pre> <p>The proto may expose additional fields (e.g., <code>High</code>, <code>Low</code>, <code>Volume</code>). Print whatever you need.</p>"},{"location":"Streaming/StreamQuoteHistoryExample/#enum-pbenum_quote_history_timeframe","title":"ENUM: <code>pb.ENUM_QUOTE_HISTORY_TIMEFRAME</code>","text":"<p>Common values (check your generated <code>pb</code> for exact names):</p> <ul> <li><code>QH_PERIOD_M1</code>, <code>QH_PERIOD_M5</code>, <code>QH_PERIOD_M15</code>, <code>QH_PERIOD_M30</code></li> <li><code>QH_PERIOD_H1</code>, <code>QH_PERIOD_H4</code></li> <li><code>QH_PERIOD_D1</code>, <code>QH_PERIOD_W1</code>, <code>QH_PERIOD_MN1</code></li> </ul>"},{"location":"Streaming/StreamQuoteHistoryExample/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Connection required: Ensure <code>ConnectByServerName</code> or <code>ConnectByHostPort</code> succeeded before streaming.</li> <li>Chunking: Larger <code>chunk</code> \u21d2 fewer round-trips (better throughput). Smaller <code>chunk</code> \u21d2 lower memory spikes.</li> <li>Auto-reconnect: The underlying stream retries on transient gRPC/API errors with exponential backoff + jitter.</li> <li>Back-pressure: If you do heavy work per batch, offload to a worker so the reader loop never blocks.</li> </ul>"},{"location":"Streaming/StreamQuoteHistoryExample/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Ignoring <code>errCh</code>: Always select on the error channel to catch terminal failures.</li> <li>Huge ranges: Very wide ranges on small timeframes can generate large data; consider paging by time (chunks) appropriately.</li> <li>Timezone confusion: Timestamps are UTC in the proto; format/convert on display as needed.</li> </ul>"},{"location":"Streaming/StreamQuoteHistoryExample/#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>Happy path: Expect multiple batches for the last 90 days of H1 data.</li> <li>Network hiccups: Brief outages should be retried automatically; expect a short pause.</li> <li>Cancel path: Cancel the passed <code>ctx</code> and verify both channels close and the goroutine exits.</li> </ul>"},{"location":"Streaming/StreamQuotes/","title":"\ud83e\uddca Streaming Real-Time Quotes","text":"<p>Request: subscribe to live tick updates for predefined symbols Continuously streams the latest bid/ask prices and timestamps for each symbol.</p>"},{"location":"Streaming/StreamQuotes/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Streams live ticks for default symbols (EURUSD, GBPUSD in demo); stops after ~30s.\nsvc.StreamQuotes(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nsymbols := []string{\"EURUSD\", \"GBPUSD\"}\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\ntickCh, errCh := account.OnSymbolTick(ctx, symbols)\n\nfmt.Println(\"\ud83d\udd04 Streaming ticks...\")\nfor {\n    select {\n    case tick, ok := &lt;-tickCh:\n        if !ok {\n            fmt.Println(\"\u2705 Tick stream ended.\")\n            return\n        }\n        if sym := tick.GetSymbolTick(); sym != nil {\n            fmt.Printf(\"[Tick] %s | Bid: %.5f | Ask: %.5f | Time: %s\\n\",\n                sym.GetSymbol(),\n                sym.GetBid(),\n                sym.GetAsk(),\n                sym.GetTime().AsTime().Format(\"2006-01-02 15:04:05\"))\n        }\n\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n\n    case &lt;-time.After(30 * time.Second): // demo timeout\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Streaming/StreamQuotes/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) StreamQuotes(ctx context.Context)\n</code></pre>"},{"location":"Streaming/StreamQuotes/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> Controls stream lifetime and cancellation. <p>The wrapper uses a predefined symbol list (e.g., <code>EURUSD</code>, <code>GBPUSD</code>). Adjust as needed.</p>"},{"location":"Streaming/StreamQuotes/#output","title":"\u2b06\ufe0f Output","text":"<p>Stream of <code>*pb.OnSymbolTickData</code> packets. Each packet may contain <code>SymbolTick</code> with:</p> Field Type Description <code>Symbol</code> <code>string</code> Trading symbol name. <code>Bid</code> <code>float64</code> Current bid price. <code>Ask</code> <code>float64</code> Current ask price. <code>Time</code> <code>timestamp</code> UTC time of the quote."},{"location":"Streaming/StreamQuotes/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Receive continuous real-time market data for selected symbols \u2014 ideal for live dashboards, widgets, and spread tracking.</p>"},{"location":"Streaming/StreamQuotes/#notes-tips","title":"\ud83e\udde9 Notes &amp; Tips","text":"<ul> <li>Per-symbol cache: Keep a <code>map[string]Quote]</code> of last values and update only on change to reduce UI churn.</li> <li>Both channels: Always consume data and error channels to avoid leaks.</li> <li>Display precision: Use symbol <code>Digits</code> (from <code>SymbolParams</code>) for formatting; keep raw doubles for math.</li> </ul>"},{"location":"Streaming/StreamQuotes/#pitfalls","title":"\u26a0\ufe0f Pitfalls","text":"<ul> <li>Nil checks: <code>SymbolTick</code> can be nil in a packet \u2014 guard before reading fields (as in example).</li> <li>Ordering: Do not assume packets are strictly chronological across symbols.</li> <li>Bursts: Rapid bursts can overwhelm rendering; debounce or batch prints.</li> </ul>"},{"location":"Streaming/StreamTradeUpdates/","title":"\ud83c\udf10 Streaming Trade Updates","text":"<p>Request: subscribe to real-time trade update stream Starts a server-side stream to receive trade activity as it happens.</p>"},{"location":"Streaming/StreamTradeUpdates/#code-example","title":"Code Example","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Streams trade events (new orders, updates, closes). Stops after ~30s in demo.\nsvc.StreamTradeUpdates(ctx)\n\n// --- Low-level (direct account call) ---\n// Preconditions: account is already connected.\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\ntradeCh, errCh := account.OnTrade(ctx)\nif err != nil {\n    log.Fatalf(\"Stream error: %v\", err)\n}\n\nfmt.Println(\"\ud83d\udcca Streaming trade updates...\")\nfor {\n    select {\n    case trade, ok := &lt;-tradeCh:\n        if !ok {\n            fmt.Println(\"\u2705 Trade stream ended.\")\n            return\n        }\n\n        info := trade.EventData\n        if info != nil &amp;&amp; len(info.NewOrders) &gt; 0 {\n            order := info.NewOrders[0]\n            fmt.Printf(\"[Trade] Ticket: %d | Symbol: %s | Type: %v | Volume: %.2f | Profit: %.2f\\n\",\n                order.Ticket,\n                order.Symbol,\n                order.Type,\n                order.Lots,\n                order.OrderProfit)\n        }\n\n    case err := &lt;-errCh:\n        log.Printf(\"\u274c Stream error: %v\", err)\n        return\n\n    case &lt;-time.After(30 * time.Second): // demo timeout\n        fmt.Println(\"\u23f1\ufe0f Timeout reached.\")\n        return\n    }\n}\n</code></pre>"},{"location":"Streaming/StreamTradeUpdates/#method-signature","title":"Method Signature","text":"<pre><code>func (s *MT4Service) StreamTradeUpdates(ctx context.Context)\n</code></pre>"},{"location":"Streaming/StreamTradeUpdates/#input","title":"\ud83d\udd3d Input","text":"Field Type Description <code>ctx</code> <code>context.Context</code> Used to cancel or control the stream."},{"location":"Streaming/StreamTradeUpdates/#output","title":"\u2b06\ufe0f Output","text":"<p>Stream of <code>OnTradeData</code> messages. Each message contains a <code>TradeInfo</code> structure:</p>"},{"location":"Streaming/StreamTradeUpdates/#structure-tradeinfo","title":"Structure: <code>TradeInfo</code>","text":"Field Type Description <code>Ticket</code> <code>int</code> Unique identifier of the trade order <code>Symbol</code> <code>string</code> Trading symbol (e.g., \"EURUSD\") <code>Lots</code> <code>float</code> Volume in lots <code>OpenPrice</code> <code>float</code> Opening price of the trade <code>Profit</code> <code>float</code> Current floating P/L <code>OpenTime</code> <code>string</code> UTC timestamp of order open time <code>OrderType</code> <code>int32</code> Trade type (Buy/Sell/Stop/Limit etc) <code>Comment</code> <code>string</code> Trade comment <code>Magic</code> <code>int</code> Magic number for programmatic tagging"},{"location":"Streaming/StreamTradeUpdates/#enum-enum_order_type_tf","title":"ENUM: <code>ENUM_ORDER_TYPE_TF</code>","text":"Value Description <code>OrderTypeTfBuy</code> Buy order <code>OrderTypeTfSell</code> Sell order <code>OrderTypeTfBuyLimit</code> Pending Buy Limit <code>OrderTypeTfSellLimit</code> Pending Sell Limit <code>OrderTypeTfBuyStop</code> Pending Buy Stop <code>OrderTypeTfSellStop</code> Pending Sell Stop"},{"location":"Streaming/StreamTradeUpdates/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This method lets you monitor live trading activity in real time \u2014 it\u2019s the central source for:</p> <ul> <li>Updating user dashboards and UI widgets</li> <li>Triggering alerts and post-trade actions</li> <li>Building audit trails and analytics</li> </ul> <p>\u26a0\ufe0f The stream is continuous. Make sure to implement cancellation or filtering logic as needed for production use.</p>"},{"location":"Streaming/Streaming_Overview/","title":"Streaming \u2014 Overview","text":"<p>This section groups together methods for real-time streaming from MT4. Use them to subscribe to continuous updates: order profits, tickets, quotes, trade events \u2014 and now paged order history and chunked quote history.</p>"},{"location":"Streaming/Streaming_Overview/#methods-in-this-section","title":"\ud83d\udcc2 Methods in this Section","text":"<ul> <li> <p>StreamOpenedOrderProfits.md   Subscribe to live updates of floating profit/loss for all active orders.</p> </li> <li> <p>StreamOpenedOrderTickets.md   Stream the list of open order ticket IDs in real time.</p> </li> <li> <p>StreamQuotes.md   Get a continuous stream of tick data (bid/ask) for selected symbols.</p> </li> <li> <p>StreamTradeUpdates.md   Receive live trade activity events as they happen.</p> </li> <li> <p>StreamOrdersHistoryExample.md   Demo wrapper: last 30 days, sorted by close time (DESC), page size = 200.</p> </li> <li> <p>StreamQuoteHistoryExample.md   Demo wrapper: last 90 days, H1 timeframe, weekly chunks.</p> </li> </ul>"},{"location":"Streaming/Streaming_Overview/#example-workflow","title":"\u26a1 Example Workflow","text":"<pre><code>// Example: subscribe to profit updates and stop when threshold hit\nprofitCh, errCh := mt4.OnOpenedOrdersProfit(ctx, 1000)\n\nfor {\n    select {\n    case pkt := &lt;-profitCh:\n        for _, info := range pkt.OpenedOrdersWithProfitUpdated {\n            if info.OrderProfit &lt; -100 { // your risk threshold\n                fmt.Println(\"\u26a0\ufe0f Drawdown alert!\", info.Ticket)\n                cancel() // stop the stream\n            }\n        }\n    case err := &lt;-errCh:\n        log.Println(\"Stream error:\", err)\n        return\n    }\n}\n</code></pre> <pre><code>// Example: stream historical orders in pages (service wrapper)\npagesCh, errCh := svc.StreamOrdersHistory(\n    ctx,\n    pb.EnumOrderHistorySortType_HISTORY_SORT_BY_CLOSE_TIME_DESC,\n    &amp;from, &amp;to,\n    200, // page size\n)\n\nfor {\n    select {\n    case page, ok := &lt;-pagesCh:\n        if !ok { return }\n        for _, o := range page.GetOrdersInfo() {\n            fmt.Printf(\"[HIST] %s | %d | %s | PnL: %.2f\\n\",\n                o.GetOrderType(), o.GetTicket(), o.GetSymbol(), o.GetProfit())\n        }\n    case err := &lt;-errCh:\n        log.Println(\"history stream error:\", err)\n        return\n    }\n}\n</code></pre> <pre><code>// Example: stream OHLC history by time chunks (service wrapper)\nbarsCh, errCh := svc.StreamQuoteHistory(\n    ctx,\n    \"EURUSD\",\n    pb.ENUM_QUOTE_HISTORY_TIMEFRAME_QH_PERIOD_H1,\n    from, to,\n    7*24*time.Hour, // weekly chunks\n)\n\nfor {\n    select {\n    case batch, ok := &lt;-barsCh:\n        if !ok { return }\n        for _, c := range batch.GetHistoricalQuotes() {\n            fmt.Printf(\"[%s] O: %.5f C: %.5f\\n\",\n                c.GetTime().AsTime().Format(\"2006-01-02 15:04:05\"),\n                c.GetOpen(), c.GetClose(),\n            )\n        }\n    case err := &lt;-errCh:\n        log.Println(\"quote history stream error:\", err)\n        return\n    }\n}\n</code></pre>"},{"location":"Streaming/Streaming_Overview/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li>Always manage cancellation via <code>context.Context</code> to avoid goroutine leaks.</li> <li>Pick sensible polling intervals (e.g., <code>intervalMs</code>) to balance freshness vs. load.</li> <li>Combine multiple streams for dashboards (e.g., trades + quotes + profits).</li> <li>Always read from the error channel; log and exit/cancel on terminal failures.</li> <li>For orders history, tune page size to your throughput (larger pages \u21d2 fewer RPCs).</li> <li>For quote history, adjust chunk duration to timeframe and volume (bigger chunks \u21d2 fewer round-trips).</li> <li>Keep print/formatting light in the stream loop; offload heavy processing to workers.</li> </ol>"},{"location":"Streaming/Streaming_Overview/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The streaming block is designed for:</p> <ul> <li>Real-time dashboards and monitoring</li> <li>Automated alerting systems</li> <li>Synchronizing UIs with terminal/account state</li> <li>Backfilling analytics from historical orders and OHLC</li> </ul> <p>\ud83d\udc49 Use this overview as a map, then jump into each <code>.md</code> file for full method details and code snippets.</p>"}]}